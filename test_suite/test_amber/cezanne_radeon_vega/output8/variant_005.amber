#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 float _f0;
 int _f1;
 mat4x2 _f2;
 mat3 _f3;
 uint num_workgroup;
 mat4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false)))))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))) || false)))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false)))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(5310.1569)))))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(intBitsToFloat(ivec2(-42851, -73626))))).x, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-1873.5170))), 0.0))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(false, false)), true))))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) * 1.0))) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))), injectionSwitch)).y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true, true)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) * 1.0))) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))), injectionSwitch)).y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true, true))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false)))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), true && (bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint gid = gl_GlobalInvocationID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) / 1.0)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true)))))))) || (false))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(1.0, 1, mat4x2(1.0), mat3(1.0), gl_NumWorkGroups.x, mat4(1.0));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true && (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))), (false) || false)) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4((_GLF_DEAD(false)), true, false, true)), ! (! (bool(bvec4((_GLF_DEAD(false)), true, false, true)))))), ! (! (! (_GLF_DEAD(false))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, cos(length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), max(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)) / vec3(1.0, 1.0, 1.0)), vec3(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 0.0, 0.0))))), 0.0))).y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), false, false))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), false, false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(9.0)), bool(false))), 0.0, 1.0))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 uint total_threads = _GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), 1u)), (uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), 1u))) | (uint(uvec2((_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), 1u)))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u, min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), 0u | (_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) | (5u))), uint(5u))), ((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) | (5u))), uint(5u)))) << 0u)))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u, 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), (_GLF_struct_replacement_0.num_workgroup) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 0u | (uint(5u))), uint(5u)), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), 0u | (uint(5u))), uint(5u))) >> 0u)))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u | (5u)))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) | 0u)), uint(5u)))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u, min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), (_GLF_struct_replacement_0.num_workgroup) * _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u), (_GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u)) | 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, (5u) - 0u)) * 1u), _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - _GLF_IDENTITY(0u, min(0u, 0u))))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), clamp(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))), max(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), clamp(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(5u)), clamp(uint(uint(5u)), uint(uint(5u)), uint(uint(5u)))), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, (5u) | (5u)), 5u))))), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), _GLF_IDENTITY(uint(5u), max(uint(5u), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u | (_GLF_IDENTITY(5u, ~ (~ (5u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (_GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) * 1u)) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), clamp(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), clamp(((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (_GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) - 0u)), uint(5u)))))))))) << 0u))) | 0u, 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(5u, (true ? 5u : _GLF_FUZZED(workgroup_size))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(5u, (true ? 5u : _GLF_FUZZED(workgroup_size))))), max(_GLF_IDENTITY(_GLF_IDENTITY(5u, (true ? 5u : _GLF_FUZZED(workgroup_size))), clamp(_GLF_IDENTITY(5u, (true ? 5u : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(5u, (true ? 5u : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(5u, (true ? 5u : _GLF_FUZZED(workgroup_size))))), _GLF_IDENTITY(5u, (true ? 5u : _GLF_FUZZED(workgroup_size)))))), uint(5u)))), (_GLF_struct_replacement_0.num_workgroup) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), 0u + (uint(5u))))) | ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))) | 0u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u | (5u)))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u | (5u)))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u) / 1u), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u | (5u)))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | _GLF_IDENTITY(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) >> (137352u & 0u)), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), (_GLF_struct_replacement_0.num_workgroup) * ((_GLF_IDENTITY(1u, min(1u, 1u)) << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u, _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) ^ 0u) << _GLF_IDENTITY(uint(5u), uint(5u))), uint(_GLF_IDENTITY(uvec4((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u), (uvec4((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), (false ? _GLF_FUZZED((subgroup_local_id ^ subgroup_id)) : _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))), 0u ^ ((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), (_GLF_IDENTITY(uint(5u), uint(5u))) ^ 0u)))) | 0u, 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))) : _GLF_FUZZED(gid)))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, max(5u, 5u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u | _GLF_IDENTITY((5u), _GLF_IDENTITY(uint(uvec3((5u), 1u, 1u)), (uint(uvec3((5u), 1u, 1u))) | (uint(uvec3((5u), 1u, 1u)))))))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u), max(min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED((subgroup_local_id ^ subgroup_id)) : _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (uint(5u)) - 0u))), 0u ^ ((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u), min(_GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u), _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u, 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(_GLF_IDENTITY(5u, 0u | (5u)), min(_GLF_IDENTITY(5u, 0u | (5u)), _GLF_IDENTITY(5u, 0u | (5u)))))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED((subgroup_local_id ^ subgroup_id)) : _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))), 0u ^ ((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u, 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u | (5u)))))), (_GLF_struct_replacement_0.num_workgroup) * ((_GLF_IDENTITY(1u, (1u) | (1u)) << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, uint(uvec4(5u, 0u, 0u, 0u)))) / 1u)))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u), ~ (~ (min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u))), (false ? _GLF_FUZZED((subgroup_local_id ^ subgroup_id)) : _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup) + _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(5u), uint(5u))), min((0u << _GLF_IDENTITY(uint(5u), uint(5u))), (0u << _GLF_IDENTITY(uint(5u), uint(5u))))), 0u ^ ((_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, _GLF_IDENTITY(uint(uint(5u)), (uint(uint(5u))) - 0u))), uint(_GLF_IDENTITY(5u, clamp(_GLF_IDENTITY(5u, ~ (~ (5u))), _GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, clamp(5u, 5u, 5u))) - 0u), 5u))))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u, 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup), clamp((_GLF_struct_replacement_0.num_workgroup), (_GLF_struct_replacement_0.num_workgroup), _GLF_IDENTITY((_GLF_struct_replacement_0.num_workgroup), uint(uvec2((_GLF_struct_replacement_0.num_workgroup), 1u))))) + (0u << _GLF_IDENTITY(uint(5u), uint(5u)))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.num_workgroup, (_GLF_struct_replacement_0.num_workgroup) + (0u << _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u | (5u)))))), (_GLF_struct_replacement_0.num_workgroup) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) | 0u)))))))))) * workgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) / (1u | (0u << _GLF_IDENTITY(uint(2u), uint(2u))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[(_GLF_IDENTITY(_GLF_IDENTITY(gid + 1, min(gid + 1, gid + 1)), _GLF_IDENTITY(0u, (0u) | (0u)) | (gid + 1))) % total_threads], uint(2), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false, true)))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, log(_GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), max(sqrt(vec2(1.0, 1.0)), sqrt(vec2(1.0, 1.0))))) + (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   atomicStore(buf[(_GLF_IDENTITY(gid, (gid) | 0u) + 1) % total_threads], uint(2), 4, 64, 4);
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
