#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat2x3 _f0;
 uint workgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))) || false), (bool(bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - tan(0.0)), injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))) && _GLF_IDENTITY(true, false || (true)))), false || (_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), _GLF_IDENTITY(true, bool(bool(true))) && (false)), true, false, true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_IDENTITY(true, true && (true)), false, true)), (bool(bvec4(true, _GLF_IDENTITY(true, true && (true)), false, true))) || false))), _GLF_IDENTITY(false, bool(bvec3(false, false, true))) || (! (true))))), false, true))))), ! (! (! ((_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))))))))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
                return;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-27.13)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))) / 1.0) > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, true)), (bool(bvec4(false, false, _GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (true)), true))) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))));
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                continue;
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))) || false)))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != (_GLF_IDENTITY((_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) >> 0), 0, 0)), 0, 0, 0))) << _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(7), int(7)), ~ (~ ((_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) >> 0), 0, 0)), 0, 0, 0))) << _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(7), int(7))))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)), true && (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-509.580)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(true, ! (! (true)))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4((_GLF_IDENTITY(true, ! (! (true)))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)) || false)) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false)))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.0), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-19.36)), bool(false))), _GLF_FUZZED(-1.0)), bvec2(true, false))).y, determinant(mat4(round(length(normalize(1.0))), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(bvec3(bool(bool((injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true)))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, tan(tan(0.0)), 1.0, log(1.0), 1.0, 1.0, 0.0, length(0.0), 1.0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, tan(tan(0.0)), 1.0, log(1.0), 1.0, 1.0, 0.0, length(0.0), 1.0))), (false ? _GLF_FUZZED(163.793) : _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, tan(tan(0.0)), 1.0, log(1.0), 1.0, 1.0, 0.0, length(0.0), 1.0))))) : _GLF_FUZZED(290.547))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! _GLF_IDENTITY((true), false || ((true)))), (! (! (true))) || false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))), bool(bvec3((! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))), true, false))))))
          return;
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))), true && (bool(bool(false)))))) && true)))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 0.0))))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, float(mat3x2(0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0)))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-538.560)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0), transpose(transpose(mat4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0)))))))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(0.8) : 1.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-224.600)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4(6.5, 5768.7495, -8.9, -9.8, -32.75, 80.70, 7.0, -248.067, -5009.8090, 732.738, 7.4, 828.924, -323.853, 46.58, -467.854, 670.746)) : _GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(0.8) : 1.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-224.600)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0), (mat4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(0.8) : 1.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-224.600)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(17.51)), float(0.0), bool(true))), 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0)))))))).y)) || false))))))))))
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true), true, true))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + 0.0), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) + 0.0)) * 1.0) > injectionSwitch.y)))) && true))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false)))) || false)))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(false), true, _GLF_IDENTITY(false, true && (false)), false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(false), true, false, false))), bool(bvec4(! (bool(bvec4(_GLF_DEAD(false), true, false, false))), false, true, true))), false)), bool(bool(bool(_GLF_IDENTITY(bvec2(! (bool(bvec4(_GLF_DEAD(false), true, false, false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) && true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (bool(bvec4(_GLF_DEAD(false), true, false, false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) && true))), false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(! (bool(bvec4(_GLF_DEAD(false), true, false, false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) && true))), false))), bvec2(bvec4(bvec2(bvec2(bvec3(bvec2(! (bool(bvec4(_GLF_DEAD(false), true, false, false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) && true))), false))), false, true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2(! (bool(bvec4(_GLF_DEAD(false), true, false, false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) && true))), false))), bvec2(bvec4(bvec2(bvec2(bvec3(bvec2(! (bool(bvec4(_GLF_DEAD(false), true, false, false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) && true))), false))), false, true)))), true, false))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, sin(0.0), 0.0))), injectionSwitch)).x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], min(gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[1], (false ? _GLF_FUZZED(subgroup_local_id) : gl_NumWorkGroups[1])))), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(121162u, 126231u, 101367u))))[_GLF_IDENTITY(2, (_GLF_IDENTITY(true ? 2 : _GLF_FUZZED(10476), ~ (~ (true ? 2 : _GLF_FUZZED(10476))))))])).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1))) && true)) || false); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.3)), float(1.0), bool(true)))), _GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_local_id) : gl_WorkGroupSize.x)), gl_WorkGroupSize.x), (clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_local_id) : gl_WorkGroupSize.x), ~ (~ ((false ? _GLF_FUZZED(subgroup_local_id) : gl_WorkGroupSize.x))))), gl_WorkGroupSize.x)) | 0u)), gl_WorkGroupSize.x)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ _GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupID))))).x, max(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))).x, _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))).x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, determinant(mat3(1.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))) > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.5)), vec2(_GLF_FUZZED(float(33034)), (injectionSwitch)[1]), bvec2(false, true))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, abs(1.0), 0.0, sqrt(1.0), 0.0, 1.0))) > injectionSwitch.y))))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false))))
      barrier();
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.3) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2x4(injectionSwitch.y, 1.0, 0.0, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), min(float(mat2x4(injectionSwitch.y, 1.0, 0.0, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat2x4(injectionSwitch.y, 1.0, 0.0, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), (float(mat2x4(injectionSwitch.y, 1.0, 0.0, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))) * 1.0))), min(float(mat2x4(injectionSwitch.y, 1.0, 0.0, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), float(mat2x4(injectionSwitch.y, 1.0, 0.0, log(1.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))))))))), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-6.5)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y))))))
  barrier();
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (false)), false, true)))))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false), bool(_GLF_IDENTITY(bool(false), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(false), false || (bool(false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(false), false || (bool(false))))), false || (! ((_GLF_IDENTITY(bool(false), false || (bool(false))))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y))))
        return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) > (0 >> _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(false || (_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(int(0), int(0)))))), false || (_GLF_IDENTITY(false || (_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(int(0), int(0)))))), bool(bool(false || (_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(int(0), int(0)))))))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0))), (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))) - 0.0)) + 0.0) < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0))), false || (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0))))))), false, true)))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(-70969))), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_injected_loop_counter --), _GLF_IDENTITY(((_injected_loop_counter --)), (((_injected_loop_counter --))) | ((0 << _GLF_IDENTITY(int(7), int(7))) | 0)) ^ 0)), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) ^ 0)), (true ? ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_injected_loop_counter --), _GLF_IDENTITY((_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) - 0)), 0 + ((_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) - 0)))) ^ 0)), 0 + ((~ _GLF_IDENTITY((_injected_loop_counter --), _GLF_IDENTITY((_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) - 0)), 0 + ((_GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) - 0)))) ^ 0)))) : _GLF_FUZZED(-78855)))) << 0)))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))), ! (! ((_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false || (_GLF_WRAPPED_LOOP(false)), (false || (_GLF_WRAPPED_LOOP(false))) && true))) || false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7573.1040)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(4.0)), bool(false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))), injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     break;
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), true && (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), false, false, false))))))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 1, max(1 ^ _GLF_IDENTITY(1, int(ivec4(1, 0, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(1 ^ 1, (_GLF_IDENTITY(1 ^ 1, (1 ^ 1) << 0)) ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1 ^ 1, (_GLF_IDENTITY(1 ^ 1, (1 ^ 1) << 0)) ^ 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_struct_replacement_0.workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((false ? 768.231 : float(false)))), vec2(_GLF_FUZZED(float(140020u)), (injectionSwitch)[1]), bvec2(false, true)))[1])).y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), (injectionSwitch.x > injectionSwitch.y)))))))))) && true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_GLF_IDENTITY(-96356, max(-96356, -96356))) : _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) != (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(-20513))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_IDENTITY(_GLF_FUZZED(-20513), int(ivec2(_GLF_IDENTITY(_GLF_FUZZED(-20513), (_GLF_FUZZED(-20513)) | (_GLF_IDENTITY(_GLF_FUZZED(-20513), (true ? _GLF_FUZZED(-20513) : _GLF_FUZZED(58161))))), _GLF_IDENTITY(1, 0 | (1))))))), 0 + (_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(-20513))))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(-20513))), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(-20513))), int(int(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(-20513))))))) / 1)))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))) || false)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))), false), false), bvec3(bvec3(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))), false), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))), false), false), bvec3(bvec3(bvec3(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))), false), false))))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))), false)), bool(bool(bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || _GLF_IDENTITY(false, ! (! (false)))))), false)))))), bool(bvec2((_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))), false)), bool(bool(bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || _GLF_IDENTITY(false, ! (! (false)))))), false)))))), false)))))) || false))) && true)) && _GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, tan(0.0), 1.0, 1.0, 1.0)))))))))) && true), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true); _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
        continue;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    {
     for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, min(0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false))))), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(true && (bool(_GLF_DEAD(false))), true && (true && (bool(_GLF_DEAD(false)))))))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) / 1u))), min(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) / 1u))), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) / 1u))))) + subgroup_local_id, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) + subgroup_local_id) >> 0u), (workgroup_base + _GLF_IDENTITY(subgroup_id, 0u + (subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), clamp(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))) + subgroup_local_id) << 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)))))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) + 0.0)) > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED((-8.2 * vec3(-809.460, -315.317, -66.48)[0]))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch.y, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 1.0)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bvec2(! (_GLF_WRAPPED_IF_TRUE(true)), false))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))) ^ 0) > (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))), ~ (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))), (~ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0)), (true ? mat3(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0)) : _GLF_FUZZED(mat3(6.8, -96.42, 9301.6417, -5338.6572, 1402.8490, -2.1, 7108.6784, -37.69, 0.6)))))).x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0)), (true ? mat3(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(1.0)) : _GLF_FUZZED(mat3(6.8, -96.42, 9301.6417, -5338.6572, 1402.8490, -2.1, 7108.6784, -37.69, 0.6)))))).x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + 0.0, ((injectionSwitch.x) + 0.0) - abs(0.0)))))))) >> 0))) ^ 0))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * sqrt(1.0))), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * sqrt(1.0))), false, false))), true, true, false))))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)))))) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, mix(float(_GLF_FUZZED(17.37)), float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), bool(true))) > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))) || false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) || false))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(_GLF_IDENTITY(81.08, (true ? 81.08 : _GLF_FUZZED(238.467))))), vec2(_GLF_FUZZED(14.22), (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (1)))]), bvec2(false, true))).x > injectionSwitch.y))))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), (bool(bool(! (false)))) || false))))));
            }
           break;
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), (injectionSwitch) + vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-8707.1437, 6.7)))).y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))) || false)))), false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))) * (injectionSwitch)), injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y)), false))))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false)), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y)), false))))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y)), false))))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), mix(vec2(_GLF_FUZZED(-705.303), _GLF_FUZZED(-685.996)), vec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))).y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec3(bool(bvec2(false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec3(bool(bvec2(false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), (injectionSwitch.x > injectionSwitch.y)), false), false, false))))))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(float(true)))))), false)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y), _GLF_IDENTITY(true, ! (! (true))) && ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y)))), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y)), false))))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) * mat2(1.0)).x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false)))))) || false)))))) && true)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
            {
             barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-192.353), _GLF_FUZZED((+ 2.5))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))) : _GLF_FUZZED((false ? clamp(vec2(487.508, -7307.3212), -5129.7725, 5230.4304) : injectionSwitch)))).x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(473.907)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(1.9, 10.24)))).x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), true && ((false))), bool(bvec3(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, _GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))), false)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(81.19)), bool(false))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(mat4x3(mat4(mat4x3(injectionSwitch, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))), (mat4x3(mat4(mat4x3(injectionSwitch, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))).y, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(mat4x3(mat4(mat4x3(injectionSwitch, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))), (mat4x3(mat4(mat4x3(injectionSwitch, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))).y, 1.0, 0.0)), mix(float(float(vec3(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(mat4x3(mat4(mat4x3(injectionSwitch, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)))), (mat4x3(mat4(mat4x3(injectionSwitch, log(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))))) + mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))).y, 1.0, 0.0))), float(_GLF_FUZZED(4.3)), bool(false))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(vec2(-4213.6068, 109.463), (vec2(-4213.6068, 109.463)) + vec2(0.0, 0.0))), mix(vec2(_GLF_FUZZED(92.30), _GLF_FUZZED(-3574.2768)), vec2(_GLF_IDENTITY((_GLF_FUZZED(vec2(-4213.6068, 109.463)))[0], (true ? (_GLF_FUZZED(vec2(-4213.6068, 109.463)))[0] : _GLF_FUZZED(7573.5090))), (_GLF_FUZZED(vec2(-4213.6068, 109.463)))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) : injectionSwitch)).y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))))
              break;
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))), ! (_GLF_IDENTITY(! (bool(bvec4(false, true, _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(! (bool(bvec4(false, true, _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)), ! (! (bool(bvec2(! (bool(bvec4(false, true, _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true)) && true))
                continue;
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-7.8), clamp(_GLF_FUZZED(-7.8), _GLF_FUZZED(-7.8), _GLF_FUZZED(_GLF_IDENTITY(-7.8, min(_GLF_IDENTITY(-7.8, (-7.8) / 1.0), _GLF_IDENTITY(-7.8, float(mat2x3(-7.8, 1.0, 0.0, 1.0, 0.0, 0.0))))))))), ((true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-7.8), clamp(_GLF_FUZZED(-7.8), _GLF_FUZZED(-7.8), _GLF_FUZZED(-7.8))))) - 0.0)) > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 1.0))) : _GLF_FUZZED(-31.52)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.8))) > injectionSwitch.y)), ! (! (! ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7.8))) > injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(refract(4.5, 67.50, 13.28)))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-612.999, _GLF_IDENTITY(5009.2242, mix(float(5009.2242), float(_GLF_FUZZED(-142.453)), bool(false))))) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))).y)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  continue;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), true, true), bvec3(bvec4(bvec3(! (false), true, true), false))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-9.8), (injectionSwitch)[1]), max(_GLF_IDENTITY(vec2(_GLF_FUZZED(-9.8), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-9.8), (injectionSwitch)[1])) * mat2(1.0)), vec2(_GLF_FUZZED(-9.8), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(50.40)), bvec2(true, false))).y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))))))
              {
               barrier();
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ((_GLF_DEAD(false)) || false) && true)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-79.46), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-963.892)), bvec2(true, false))).y) || false)) && true)))))
        return;
      }
     else
      {
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), max(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) + (workgroup_base), (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) + (workgroup_base)) << 0u)), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base), 0u + (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).x)) + (workgroup_base))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), uint(uvec4(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))) + (workgroup_base)))), _GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-268.490)), bool(false))), min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-268.490)), bool(false))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-268.490)), bool(false))))), injectionSwitch.x)) + (workgroup_base)))))) + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 0u, (1u & _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1u), (uint(1u)) >> 0u)), clamp(uint(_GLF_IDENTITY(uint(1u), (uint(1u)) >> 0u)), uint(_GLF_IDENTITY(uint(1u), (uint(1u)) >> 0u)), uint(_GLF_IDENTITY(uint(1u), (uint(1u)) >> 0u))))))))))) + 1) % subgroup_size, uint(uvec2((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 0u, (1u & 1u)))))) + 1) % subgroup_size, 0u))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (((injectionSwitch.x > injectionSwitch.y)) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))), max(clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))), clamp(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))))) >> _GLF_IDENTITY(int(0), int(0))) & int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))))) >> _GLF_IDENTITY(int(0), int(0))) & int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), _GLF_IDENTITY(true, false || (true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), ! (! (true && (false)))), true), true, false))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), (mat2x4(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(52.24)), bool(false))))) > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(30.96)), vec2(_GLF_FUZZED(-8461.8054), (injectionSwitch)[1]), bvec2(false, true))).y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), _GLF_IDENTITY(false, (false) && true), true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(0.9, -7.3)) : (injectionSwitch))) / vec2(1.0, 1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0))).y))))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), mix(float(_GLF_FUZZED(-241.104)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), min(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), injectionSwitch)).y, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), injectionSwitch)).y, 0.0, 1.0, 0.0, 1.0, log(1.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), 1.0, abs(sqrt(0.0)), round(length(normalize(1.0))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0), (mat4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), injectionSwitch)).y, 0.0, 1.0, 0.0, 1.0, log(1.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), 1.0, abs(sqrt(0.0)), round(length(normalize(1.0))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) + _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), false, false)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), false, _GLF_IDENTITY(false, (false) && true)))))) || false))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0), _GLF_IDENTITY((mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0)) * mat3(1.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + ((mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0)) * mat3(1.0)))))))))) || false)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0), _GLF_IDENTITY((mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0)) * mat3(1.0), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + ((mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0)) * mat3(1.0)))))))))) || false))))))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), false, false)), ! (! (bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), false, false)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) && true))), false || (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ((_GLF_DEAD(false)) && true) && true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ((_GLF_DEAD(false)) && true) && true)))), bool(bvec2(! ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ((_GLF_DEAD(false)) && true) && true)))), false)))))))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, cos(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, length(log(1.0)), 0.0, 1.0, 0.0)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, cos(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, length(log(1.0)), 0.0, 1.0, 0.0))))) || false)), true, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, cos(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, length(log(1.0)), 0.0, 1.0, 0.0))))), true, false), true)))))))
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false))))))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
            {
             return;
            }
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false))))) || false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(0.8, 7.7)))), injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(0.8, 7.7)))), injectionSwitch)).x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          return;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (1)))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.3), _GLF_FUZZED(-5.1)), bvec2(false, false))).x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(29862))), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-7.6)), bool(false)))), bool(true)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(false), false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_DEAD(false), false), false)), bvec3(bvec4(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false), false)), false)))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(false), false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_DEAD(false), false), false)), bvec3(bvec4(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), false), false)), false)))))))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(false), false), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false)))), false))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false)))), false))), false))), false)))))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))) && true); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true), bool(bool(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
        return;
       break;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.6), _GLF_FUZZED(77.89)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), (injectionSwitch)))[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), bvec2(true, true))).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, false)))), bool(bvec2(! (_GLF_IDENTITY(true, bool(bvec2(true, false)))), false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_IDENTITY((false), ((false)) || false))))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true, true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))) || (false)))), true, true)))))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0)), 0 ^ (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0)))))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), true, true))))), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), true, true))))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), true, true))))), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), true, true))))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false)))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), true, true))))), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), true, true))))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false)))))), (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), true, true))))), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), true, true))))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false, false))))))) && true), false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       break;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         break;
        }
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false)))))))
                barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false))))))), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))) && true)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))) || false), false, true, false)))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), false, false))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-9957.4828)), float(injectionSwitch.y), bool(true)))))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), ((0 << _GLF_IDENTITY(int(2), int(2)))) - 0), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), min((0 << _GLF_IDENTITY(int(2), int(2))), (0 << _GLF_IDENTITY(int(2), int(2))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0)))), _GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))) * mat2(1.0), clamp((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))) * mat2(1.0), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))) * mat2(1.0), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))) * mat2(1.0))))).y))))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0))))))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((-71456 & 0) | 1)); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != 1))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       barrier();
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (0 & -74849)))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 + (1)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) || false), true, true)), ! (! (bool(bvec3(_GLF_DEAD(false), true, true)))))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), false || (false))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))), _injected_loop_counter), (_GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), min(min(_injected_loop_counter, _injected_loop_counter), min(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 1, 1)), (_GLF_IDENTITY(int(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 1, 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 1, 1))))) ^ 0), _GLF_IDENTITY((int(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))) << 0)), 1, 1))), ((int(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))) << 0)), 1, 1)))) / 1) | (int(ivec4(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(1, int(int(1))), 1))))), _injected_loop_counter)))) << 0)) < ((_GLF_IDENTITY(1, int(int(1))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) >> 0), (_GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, max(7, 7)))) >> 0)) / (1 & 1)), _GLF_IDENTITY(min(int(7), int(7)), (_GLF_IDENTITY(min(int(7), int(7)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (min(int(7), int(7))), max(_GLF_IDENTITY(~ (min(int(7), int(7))), (~ (min(int(7), int(7)))) - 0), ~ (min(int(7), int(7)))))), int(_GLF_IDENTITY(int(~ (~ (min(int(7), int(7))))), (int(~ (~ (min(int(7), int(7)))))) | (int(~ (~ (min(int(7), int(_GLF_IDENTITY(7, (7) - 0)))))))))))) >> 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), min(_injected_loop_counter, _injected_loop_counter)) < ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), int(int(1))), clamp(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) << 0)))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) / (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (~ (1)) | _GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(~ (1), (~ (1)) | _GLF_IDENTITY(0, clamp(0, 0, 0))) : _GLF_FUZZED(_injected_loop_counter)))), ((_GLF_IDENTITY(~ (1), (~ (1)) | _GLF_IDENTITY(0, clamp(0, 0, 0))))) ^ 0)))), 1, 1)) & 1)), min(int(7), int(7))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, _GLF_IDENTITY(7, clamp(7, 7, 7))))), min(int(7), int(7))), int(7))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))), _GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)))))), min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))), _injected_loop_counter)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), min(_injected_loop_counter, _injected_loop_counter))) | 0) < (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), clamp(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), 0 | (int(int(1)))), min(int(int(1)), int(int(1))))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), (int(_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec2(int(1), 1), ~ (~ (ivec2(int(1), 1)))))), int(1))))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), (int(int(1))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), (int(int(1))) << 0), (_GLF_IDENTITY(int(int(1)), (int(int(1))) << 0)) / 1)) / 1)) >> 0)))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) / (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0)), clamp((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0)), ((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0))) | ((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0)))), (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0))))))), 1, 1)) & 1)), min(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(-31045)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), (0 | 0) + (_GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) ^ 0)))))))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), clamp(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), 0 | (int(int(1)))), min(int(int(1)), int(int(1))))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), (int(_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec2(int(1), 1), ~ (~ (ivec2(int(1), 1)))))), int(1))))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), (int(int(1))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), (int(int(1))) << 0), (_GLF_IDENTITY(int(int(1)), (int(int(1))) << 0)) / 1)) / 1)) >> 0)))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) / (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0)), clamp((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0)), ((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0))) | ((_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0)))), (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ _GLF_IDENTITY((1), ((1)) | ((1))) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))), int(3))), 0), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter)))))) >> 0), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), (_GLF_IDENTITY(int(2), min(int(2), int(2)))) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))))), ivec4(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ~ (~ ((1)))), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), int(_GLF_IDENTITY(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(int(ivec2(1, 1)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), (ivec3(int(2), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ ivec3(0, 0, 0)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0))))))), 1, 1)) & 1)), min(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(-31045)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), (0 | 0) + (_GLF_IDENTITY(int(7), _GLF_IDENTITY(~ (~ (int(7))), (~ (~ (int(7)))) ^ 0))))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), clamp(int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (7) - 0), _GLF_IDENTITY(7, (7) / 1), 7))), int(7), int(7))))), int(7)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))), _GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)), min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))), _injected_loop_counter)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), min(_injected_loop_counter, _injected_loop_counter))) | _GLF_IDENTITY(0, ~ (~ (0)))) < ((_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (1) ^ 0))), int(int(1))), _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), min(int(int(1)), int(int(1))))), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), (int(int(1))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), (int(int(1))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(int(1)), _GLF_IDENTITY((int(int(1))) << 0, ~ (~ (_GLF_IDENTITY((int(int(1))) << 0, clamp((int(int(1))) << 0, (int(int(1))) << 0, (int(int(1))) << 0)))))), (_GLF_IDENTITY(int(int(1)), (int(int(1))) << 0)) / 1)) / 1)) >> 0)))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) / (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), clamp(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2)))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) | 0)))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), max(~ (2), ~ (2)))))), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0))), ivec4(_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(_injected_loop_counter))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))), (0 >> _GLF_IDENTITY(int(3), int(3))), 0)))))) | 0))))), 1, 1)) & 1)), min(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, 7))), ~ (~ (int(7)))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), ~ (~ (int(7))))), ((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) | ((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(7), ~ (~ (int(7)))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), clamp(int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (7) - 0), _GLF_IDENTITY(7, (7) / 1), 7))), int(7), int(7))))), (_GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY(clamp(7, 7, 7), (clamp(7, 7, 7)) | 0))), clamp(int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (7) - 0), _GLF_IDENTITY(7, (7) / 1), 7))), int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, min(7, 7)), 7))), int(7)))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), int(7))))) && true) && true))))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(0 ^ (_injected_loop_counter ++), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 ^ (_injected_loop_counter ++)))))
      {
       if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1 < subgroup_size)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         for(int _injected_loop_counter = (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6)), int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6)), clamp((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6)), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6)), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6)))), int(_GLF_ONE(1.0, injectionSwitch.y)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) >> 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + (0 | 0)) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ (0 << _GLF_IDENTITY(int(1), int(1))))) / 1))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         int i = 0;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
            }
           continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              break;
             barrier();
            }
          }
        }
       else
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, (4) >> (-96398 & 0)));
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))), mix(vec2((vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))[0], (vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(float(injectionSwitch[1])), 1.0 * (float(float(injectionSwitch[1]))))))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), 0 | (int(ivec4(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))))], injectionSwitch[1]))))))[1]), vec2(_GLF_FUZZED(5608.9741), _GLF_FUZZED((float(false) + 971.446))), bvec2(false, false)))), determinant(mat2(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) * exp(0.0)), 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8872.6578) : 0.0))))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[0], injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(-9143.9136))), _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))), _GLF_IDENTITY(vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))), mix(vec2((vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))[0], (vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).x)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], injectionSwitch[1])), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(float(injectionSwitch[1])), 1.0 * (float(float(injectionSwitch[1]))))))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), 0 | (int(ivec4(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))))], injectionSwitch[1]))), mat2(1.0) * (max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(float(injectionSwitch[1])), 1.0 * (float(float(injectionSwitch[1]))))))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), 0 | (int(ivec4(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))))], injectionSwitch[1]))))))))[_GLF_IDENTITY(1, ~ (~ (1)))]), _GLF_IDENTITY(vec2(_GLF_FUZZED(5608.9741), _GLF_FUZZED((float(false) + 971.446))), (vec2(_GLF_FUZZED(5608.9741), _GLF_FUZZED((float(false) + 971.446)))) / vec2(1.0, 1.0)), bvec2(false, false)))), determinant(mat2(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) * exp(0.0)), 1.0, 0.0, 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-8872.6578, float(mat4x2(-8872.6578, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)))) : 0.0))))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))))).y))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (bool(false))), _GLF_IDENTITY(bool(bvec3((! (bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bool(bool(bvec3((! (bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), ! (! (bool(bool(false))))))))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) | 0))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), min(max(1, 1), max(1, 1))))), (~ (_GLF_IDENTITY(1, max(1, 1)))) + 0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (bool(bvec2(false, true))), ! (! (! (bool(bvec2(false, true)))))))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, true), false))))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
