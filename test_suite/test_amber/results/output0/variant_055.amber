#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_24 {
 bvec3 _f0;
 bvec4 _f1;
 vec3 _f2;
 uvec2 _f3;
 bvec2 _f4;
 bool _f5;
} ;

struct _GLF_struct_25 {
 _GLF_struct_24 _f0;
 mat2 _f1;
 ivec2 _f2;
 mat3x2 _f3;
 ivec4 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_22 {
 vec2 _f0;
 mat4x3 _f1;
 mat3 _f2;
 mat4x3 _f3;
 bool _f4;
 mat3x2 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_21 {
 ivec3 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_23 {
 mat3x4 _f0;
 _GLF_struct_21 _f1;
 vec2 _f2;
 ivec4 _f3;
 _GLF_struct_22 _f4;
} ;

struct _GLF_struct_19 {
 bvec4 _f0;
 mat3x2 _f1;
 uvec2 _f2;
 bool _f3;
 bvec2 _f4;
 bvec3 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_18 {
 mat2x3 _f0;
 bvec3 _f1;
 vec3 _f2;
 vec2 _f3;
 mat3x4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_17 {
 uvec3 _f0;
 uint _f1;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 mat4x2 _f1;
 bvec4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_20 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 mat3x2 _f2;
 mat4x3 _f3;
 _GLF_struct_18 _f4;
 _GLF_struct_19 _f5;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
} ;

struct _GLF_struct_13 {
 uint _f0;
 ivec4 _f1;
 uvec4 _f2;
 mat2 _f3;
 mat2 _f4;
 bool _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 mat2 _f1;
 mat2x3 _f2;
 uvec3 _f3;
 _GLF_struct_14 _f4;
 int _f5;
} ;

struct _GLF_struct_11 {
 uvec4 _f0;
 vec4 _f1;
 uvec4 _f2;
 mat3 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 uvec2 _f1;
 mat2x3 _f2;
 int _f3;
 mat4 _f4;
} ;

struct _GLF_struct_9 {
 bool _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 uint _f1;
 vec3 _f2;
 uvec4 _f3;
 mat4x3 _f4;
 uvec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_12 {
 vec3 _f0;
 _GLF_struct_8 _f1;
 mat4 _f2;
 uvec2 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_10 _f5;
 _GLF_struct_11 _f6;
} ;

struct _GLF_struct_26 {
 _GLF_struct_12 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_20 _f2;
 uint subgroup_local_id;
 _GLF_struct_23 _f3;
 mat4 _f4;
 _GLF_struct_25 _f5;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
struct _GLF_struct_5 {
 bvec2 _f0;
} ;

struct _GLF_struct_4 {
 int _f0;
} ;

struct _GLF_struct_6 {
 bool _f0;
 bool _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 mat2x4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 mat4 _f1;
 vec2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 mat4 _f1;
 mat2 _f2;
 vec2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 bvec4 _f1;
 bvec2 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 _GLF_struct_0 _f1;
 mat4x2 _f2;
 _GLF_struct_1 _f3;
 ivec3 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 _GLF_struct_6 _f1;
 mat4x2 _f2;
 uint subgroup_size;
 vec3 _f3;
} ;

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_3(bvec3(true), _GLF_struct_0(bvec2(true), bvec4(true), bvec2(true), ivec4(1)), mat4x2(1.0), _GLF_struct_1(ivec3(1), mat4(1.0), mat2(1.0), vec2(1.0), mat2x4(1.0)), ivec3(1), _GLF_struct_2(uvec2(1u), mat4(1.0), vec2(1.0), uvec4(1u))), _GLF_struct_6(true, true, _GLF_struct_4(1), _GLF_struct_5(bvec2(true)), mat2x4(1.0), mat2x4(1.0)), mat4x2(1.0), gl_SubgroupSize, vec3(1.0));
 uint gid = gl_GlobalInvocationID.x;
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_struct_12(vec3(1.0), _GLF_struct_8(mat2(1.0), 1u, vec3(1.0), uvec4(1u), mat4x3(1.0), uvec4(1u), ivec4(1)), mat4(1.0), uvec2(1u), _GLF_struct_9(true, mat2x3(1.0)), _GLF_struct_10(vec2(1.0), uvec2(1u), mat2x3(1.0), 1, mat4(1.0)), _GLF_struct_11(uvec4(1u), vec4(1.0), uvec4(1u), mat3(1.0), mat3x4(1.0))), _GLF_struct_15(_GLF_struct_13(1u, ivec4(1), uvec4(1u), mat2(1.0), mat2(1.0), true, mat3x2(1.0)), mat2(1.0), mat2x3(1.0), uvec3(1u), _GLF_struct_14(mat2(1.0)), 1), _GLF_struct_20(_GLF_struct_16(ivec4(1), mat4x2(1.0), bvec4(true), uvec4(1u)), _GLF_struct_17(uvec3(1u), 1u), mat3x2(1.0), mat4x3(1.0), _GLF_struct_18(mat2x3(1.0), bvec3(true), vec3(1.0), vec2(1.0), mat3x4(1.0), vec2(1.0)), _GLF_struct_19(bvec4(true), mat3x2(1.0), uvec2(1u), true, bvec2(true), bvec3(true), vec2(1.0))), gl_SubgroupInvocationID, _GLF_struct_23(mat3x4(1.0), _GLF_struct_21(ivec3(1), uvec4(1u)), vec2(1.0), ivec4(1), _GLF_struct_22(vec2(1.0), mat4x3(1.0), mat3(1.0), mat4x3(1.0), true, mat3x2(1.0), bvec4(true))), mat4(1.0), _GLF_struct_25(_GLF_struct_24(bvec3(true), bvec4(true), vec3(1.0), uvec2(1u), bvec2(true), true), mat2(1.0), ivec2(1), mat3x2(1.0), ivec4(1), vec4(1.0)));
 buf[gid] = 1;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_struct_replacement_26.subgroup_local_id + 1 < _GLF_struct_replacement_7.subgroup_size)
    {
     buf[gid + 1] = 2;
    }
   else
    {
     buf[(gid + 1) % _GLF_struct_replacement_7.subgroup_size] = 2;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
