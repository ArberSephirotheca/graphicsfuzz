#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 430

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(0))
    {
     case 0:
     case 52:
     int i = 0;
     case 57:
     case 79:
     case 73:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
     break;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(_GLF_IDENTITY(0, (0) + 0)))
    {
     case 70:
     max(clamp(uvec4(12338u, 72808u, 113356u, 187730u), subgroup_id, workgroup_base), num_workgroup).b;
     case 74:
     for(mat2 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v[69], _GLF_SWITCH_1_2v; true; (mat3x2(-8118.6886) * mat4x3(10.01, 1.0, -5.9, -6.2, 8231.8768, 4987.7325, 370.178, -5.6, 9.1, 87.86, -25.46, 5.5)))
      {
       {
        {
         ivec3 _GLF_SWITCH_1_3v, _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v;
         vec2(7.3, -9.9);
         floatBitsToUint(vec4(-3.3, -120.051, 3.7, 6.0)).xy;
         vec2(-9.3, 9.9);
         uvec2 _GLF_SWITCH_1_6v[86], _GLF_SWITCH_1_7v;
         (mat4x3(-3.8, -2.3, -3.7, 63.76, 41.10, -87.64, 65.58, -7.4, -840.127, 7355.9581, 3257.9542, 8.5) * mat3x4(-7924.4625, -0.8, -2773.7293, 6.7, -909.768, -956.273, 6716.0137, -648.922, -41.90, 95.36, -30.99, 984.678));
         bitfieldInsert(workgroup_id, uint(false), -34324, 48929);
        }
       }
       inverse(mat4(-29.57, -297.553, 20.76, 9.4, 7.8, -7.9, 41.03, 354.839, 4.4, 7.2, -188.697, 3.1, 491.612, -77.80, 2.8, 831.845));
      }
     case 0:
     case 79:
     case 61:
     case 58:
     case 22:
     case 47:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
     break;
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
