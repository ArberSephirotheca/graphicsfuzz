#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(1)))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))));
            }
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), (~ (1)) - 0)), (false ? _GLF_FUZZED(57537) : (_GLF_IDENTITY(~ (1), (~ (1)) - 0))))) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) << 0)))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != 0) || false)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y = subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y = _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false))))), true, false)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false))))))))), false))), true, false))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false))))))))), false))), true, false))), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false))))))))), false))), true, false))), false)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false))))))))), false))), true, false))), false)))), true)))))), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), _GLF_IDENTITY(false, bool(bool(false)))), false))), false))), false))), false)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bool(false))))) || false))))))))), false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false))), false))), false)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) && true), bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false))))))))), false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false))), false))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))))), false)), true && (bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, _GLF_IDENTITY(false, (false) || false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), _GLF_IDENTITY(true, (true) && true), false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool(false)))))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bool(false))))) || false, ((! (_GLF_IDENTITY(false, bool(bool(false))))) || false) && true)))))))))), false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(false, ! (! (false)))))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), bvec3(bvec4(bvec3(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, false))), true, false))), false), false))), false)), false)))), false))), false)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))))), false)))))) && true), _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(_GLF_IDENTITY((! (! (false))), false || ((! (! (false))))) || false, ((! (! (false))) || false) && true))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(bool(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) && true)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) && true)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (false)) && true)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))) || false, ((! (! (false))) || false) && true))), true, true)))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY((! (! (false))) || false, ((! (! (false))) || false) && true)))), bool(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) && true)), _GLF_IDENTITY((! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((false)), true && (! ((false))))), true && ((_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))) || false, ((! (! _GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), true && ((false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), true && ((false)))))), ! (! (! (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), true && ((false)))))))))))) || false))) || false) && true)))), true, false), bvec3(bvec3(bvec3((! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY((! (! (false))) || _GLF_IDENTITY(false, (false) && true), ((! (! (false))) || false) && true)))), true, false))))))))), (! (! (false))) || false))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool((_GLF_WRAPPED_LOOP(false)))))) && true)), ((! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool((_GLF_WRAPPED_LOOP(false)))))) && true))) && true)));
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (_GLF_IDENTITY(gl_NumWorkGroups.x, min(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))) - uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u | (0u)))))))).x, gl_NumWorkGroups.x))));
 do
  {
   do
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.x = num_workgroup;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_size) : gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec4(int(1), 0, 0, 0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w = workgroup_id;
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) | (int(2))), ~ (~ (int(2)))), _GLF_IDENTITY(int(2), 0 ^ (int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) | 0), 2, _GLF_IDENTITY(2, (2) / 1)))))))), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (0 | 0) + (int(2)))) | (int(2)))) | (int(2))), ~ (~ (int(2)))), _GLF_IDENTITY(int(2), 0 ^ (int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) | 0), 2, _GLF_IDENTITY(2, (2) / 1)))))))), int(2))) ^ 0)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, max(7, 7)))), _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(6), int(6))) ^ 0)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (true ? GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id : _GLF_FUZZED((GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id ^ uvec4(126888u, 35152u, _GLF_IDENTITY(71267u, clamp(71267u, 71267u, _GLF_IDENTITY(71267u, (71267u) | (71267u)))), 88400u).b)))).w;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))) || _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2900.5667) : injectionSwitch.y))))), ((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2900.5667) : injectionSwitch.y)))))) || false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (false ? _GLF_FUZZED(vec3(5368.1127, -1.0, 9870.6489)) : _GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, _GLF_IDENTITY(0.0, float(mat3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, tan(0.0), 1.0, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))), 1.0, 1.0)))))))), clamp(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0)))), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (false ? _GLF_FUZZED(vec3(5368.1127, -1.0, 9870.6489)) : _GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0))))), clamp(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0), _GLF_IDENTITY(vec3(injectionSwitch, 0.0), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(vec3(4.4, 9.5, -478.791)) : vec3(injectionSwitch, 0.0))), vec3(injectionSwitch, 0.0))))) + sin(_GLF_IDENTITY(abs(vec2(0.0, 0.0)), max(abs(vec2(0.0, 0.0)), _GLF_IDENTITY(abs(vec2(0.0, 0.0)), max(abs(vec2(0.0, 0.0)), abs(vec2(0.0, 0.0))))))))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (false ? _GLF_FUZZED(vec3(5368.1127, -1.0, 9870.6489)) : _GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, _GLF_IDENTITY(0.0, float(mat3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, tan(0.0), 1.0, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))), 1.0, 1.0)))))))), clamp(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0)))), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (false ? _GLF_FUZZED(vec3(5368.1127, -1.0, 9870.6489)) : _GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0))))), clamp(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0), _GLF_IDENTITY(vec3(injectionSwitch, 0.0), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(vec3(4.4, 9.5, -478.791)) : vec3(injectionSwitch, 0.0))), vec3(injectionSwitch, 0.0))))) + sin(_GLF_IDENTITY(abs(vec2(0.0, 0.0)), max(abs(vec2(0.0, 0.0)), _GLF_IDENTITY(abs(vec2(0.0, 0.0)), max(abs(vec2(0.0, 0.0)), abs(vec2(0.0, 0.0))))))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (false ? _GLF_FUZZED(vec3(5368.1127, -1.0, 9870.6489)) : _GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, _GLF_IDENTITY(0.0, float(mat3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, tan(0.0), 1.0, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))), 1.0, 1.0)))))))), clamp(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0)))), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), (false ? _GLF_FUZZED(vec3(5368.1127, -1.0, 9870.6489)) : _GLF_IDENTITY(vec3(injectionSwitch, 0.0), min(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0))))), clamp(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0), _GLF_IDENTITY(vec3(injectionSwitch, 0.0), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(vec3(4.4, 9.5, -478.791)) : vec3(injectionSwitch, 0.0))), vec3(injectionSwitch, 0.0))))) + sin(_GLF_IDENTITY(abs(vec2(0.0, 0.0)), max(abs(vec2(0.0, 0.0)), _GLF_IDENTITY(abs(vec2(0.0, 0.0)), max(abs(vec2(0.0, 0.0)), abs(vec2(0.0, 0.0))))))))))).x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), false || (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), false || (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))) || false), true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), _GLF_IDENTITY(false || (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - log(vec2(1.0, 1.0))).x < injectionSwitch.y))))), true))), true && (_GLF_IDENTITY(false || (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch))) - log(_GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-6.5)), vec2(_GLF_FUZZED(43.50), (vec2(_GLF_IDENTITY(1.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 1.0)) * (1.0)), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, sqrt(0.0)), mat3(mat3x4(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, sqrt(0.0)), transpose(transpose(mat3(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, sqrt(0.0))))))))))))[1]), bvec2(false, true))))))).x < injectionSwitch.y))))), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), true && (false || (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - log(vec2(1.0, 1.0))).x < injectionSwitch.y))))), true))))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) != (_GLF_IDENTITY(0 | 0, 0 | (0 | 0)))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) | 0)))), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) | 0))), (0 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) | 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
              {
               GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.z = workgroup_base;
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u), min(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u), max(uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u), uvec4(subgroup_id * subgroup_size, 1u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u))), uvec4(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) * ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), subgroup_id)) * subgroup_size, 1u, 0u, 0u)))), uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u), min(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u), max(uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u), uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u))), uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, 1u, _GLF_IDENTITY(0u, (0u) + 0u), 0u), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * uint(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) * subgroup_size)), 1u, 0u, 0u), max(uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u), uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u))), uvec4(subgroup_id * subgroup_size, 1u, 0u, 0u))))) / 1u), 0u, 0u, 1u)))) + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y, uint(uvec4(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, ~ (~ (0u))), 1u)))) + 0u);
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u), subgroup_id * subgroup_size)) + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (true ? _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id) >> _GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, 0u | (0u))) / 1u, min((0u) / 1u, (0u) / 1u))), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_base))), 0u)), 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u))))), max((~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / _GLF_IDENTITY(1u, max(1u, 1u))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u))))), (~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (0u) / 1u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (true ? uint(5u) : _GLF_FUZZED(subgroup_id)))))), (uvec2(_GLF_IDENTITY(0u, (0u) / 1u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (true ? uint(5u) : _GLF_FUZZED(subgroup_id))))))) ^ uvec2(0u, 0u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (0u) / 1u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (true ? uint(5u) : _GLF_FUZZED(subgroup_id)))))), (uvec2(_GLF_IDENTITY(0u, (0u) / 1u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (true ? uint(5u) : _GLF_FUZZED(subgroup_id))))))) ^ uvec2(0u, 0u))), ~ (~ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (0u) / 1u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (true ? uint(5u) : _GLF_FUZZED(subgroup_id)))))), (uvec2(_GLF_IDENTITY(0u, (0u) / 1u), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (true ? uint(5u) : _GLF_FUZZED(subgroup_id))))))) ^ uvec2(0u, 0u))))))) * 1u)), 0u, 0u, 0u))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << (0u & 134352u)), 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) - 0u), 0u, 0u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << (0u & 134352u)), 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) - 0u), 0u, 0u))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << (0u & 134352u)), 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) - 0u), 0u, 0u)))) + uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(uvec4(uvec2(113752u, 118373u), num_workgroup, num_workgroup)))))), max((~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), (_GLF_IDENTITY(0u, (0u) / 1u)) ^ 0u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u))))), (~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), min((0u), (0u))) / 1u), (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), min((0u), (0u))) / 1u)) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), (_GLF_IDENTITY(0u, (0u) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), min(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), max(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) / 1u)))))))))), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)))))))), max(~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (0u) / 1u), 0u, 0u, 0u))), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)))) | (uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u) >> _GLF_IDENTITY(uvec4(0u), uvec4(0u)))))), max((~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | 0u)))))), (~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), _GLF_IDENTITY((uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)), ((uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u))) + uvec4(0u, 0u, 0u, 0u)))))))), ~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), (_GLF_IDENTITY(0u, (0u) / 1u)) * 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) | 0u)), ((0u)) * 1u) / 1u), (_GLF_IDENTITY(0u, (0u) / 1u)) * 1u))), _GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) / _GLF_IDENTITY(1u, uint(uint(1u)))))), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u))))), max((~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) ^ 0u))), 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u))))), (~ (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u), (uvec4(_GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(0u, (0u) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u)))), 0u, 0u, 0u))))))))))))) | (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(0u), _GLF_IDENTITY(uvec4(0u), (uvec4(0u)) + uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))))).x)))))))) : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id))).y + 1, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (true ? _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)) : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id))).y + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (true ? _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id), uvec4(0u, 0u, 0u, 0u) | (~ (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id)))))) | (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id))), (_GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id), uvec4(0u, 0u, 0u, 0u) | (~ (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id)))))) | (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id)))) << uvec4(0u, 0u, 0u, 0u)))), (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (true ? _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id), uvec4(0u, 0u, 0u, 0u) | (~ (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id)))))) | (GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id)))))) + (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u)))).y + 1))) % subgroup_size);
 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 >> _GLF_IDENTITY(int(3), int(3))) & -93125) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       do
        {
         buf[virtual_gid] = 1;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) << (0 << _GLF_IDENTITY(int(7), int(7))))) >> 0)))))))) && true); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1, _GLF_IDENTITY(uint(uvec3(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + _GLF_IDENTITY(1, ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))) * (1)), 1u, 0u)), 0u | (uint(uvec3(GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1, 1u, 0u)))))) / uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-9.4))))) < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2307.5756), _GLF_FUZZED(-6.9)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), bvec2(true, true)))))), max(vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2307.5756), _GLF_FUZZED(-6.9)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), bvec2(true, true)))))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2307.5756), _GLF_FUZZED(-6.9)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]), bvec2(true, true))))))))).y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (uint(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), (true ? ~ (2) : _GLF_FUZZED(67981))))))) >> 0u), 4, 64, 4);
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
     subgroupAll(false);
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec2(_injected_loop_counter < 1, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), bool(bool(! ((! (false))))))))))))), (bool(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec2(_injected_loop_counter < 1, false))))) && true)), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) < 1, bool(bvec2(_injected_loop_counter < 1, false)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))) && true), bool(bvec2(_injected_loop_counter < 1, false))))) && true)))))); _injected_loop_counter ++)
            {
             do
              {
               atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, ~ (~ (4))), 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-6.4, 9060.8192, -192.518, 2.1)) : mat2(1.0))), mat2(mat4(mat2(1.0))))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                              {
                               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    return;
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             else
                              {
                               subgroupAll(true);
                              }
                            }
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
