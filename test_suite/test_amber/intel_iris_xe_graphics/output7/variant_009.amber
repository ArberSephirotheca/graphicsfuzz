#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 bvec3 _f0;
 vec4 _f1;
 bvec4 _f2;
 mat4x3 _f3;
 ivec3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 bvec4 _f1;
 vec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 mat2x4 _f1;
 _GLF_struct_8 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 vec3 _f1;
 ivec3 _f2;
 mat3x4 _f3;
 mat3x2 _f4;
 bool _f5;
 int _f6;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 mat3x2 _f1;
 bvec2 _f2;
 bvec4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 uint _f2;
 mat3x2 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 mat2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 mat4x3 _f1;
 float _f2;
 bvec4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
} ;

struct _GLF_struct_10 {
 uint subgroup_id;
 _GLF_struct_0 _f0;
 bvec4 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_6 _f3;
 uint _f4;
 _GLF_struct_9 _f5;
 bvec2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec2(false || (_GLF_DEAD(false)), true))))), true, false, true)), (bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true, false, true))) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec2(false || (_GLF_DEAD(false)), true))))), true, false, true)), (bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true, false, true))) && true), false)), ! (! (bool(bvec2(_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec2(false || (_GLF_DEAD(false)), true))))), true, false, true)), (bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true, false, true))) && true), false)))))))))))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))) || false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(gl_SubgroupID, _GLF_struct_0(mat4x3(1.0)), bvec4(true), _GLF_struct_2(_GLF_struct_1(mat3x2(1.0), _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), ivec4(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, int(ivec3(1, (1 & 1), 0)))) | (1))) + 0), (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) + _GLF_IDENTITY(0, int(ivec2(0, int(_GLF_ONE(1.0, injectionSwitch.y))))), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) + 0, ((_GLF_IDENTITY(1, (1) | (1))) + 0) | ((_GLF_IDENTITY(1, (1) | (1))) + 0)), 1))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), (false ? _GLF_FUZZED(-40678) : (1))))) + 0, int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) + 0, ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | (1))) + 0) | ((_GLF_IDENTITY(1, (1) | (1))) + _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) | (0)) : _GLF_FUZZED(68128))))), 1))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) + 0, int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) + 0, ((_GLF_IDENTITY(1, (1) | (1))) + 0) | ((_GLF_IDENTITY(1, (1) | (1))) + 0)), 1))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) + 0, int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(88190)))))) + 0, _GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1))) + 0), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1))) + 0), (true ? ((_GLF_IDENTITY(1, (1) | (1))) + 0) : _GLF_FUZZED(-1966)))))) | ((_GLF_IDENTITY(1, (1) | (1))) + 0)), 1)))))) << 0))) - 0))))), mat4x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (1.0) - 0.0), bvec4(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true))))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true))))))), true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true))))))), true)), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true))))))), true)), false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), (bool(bvec4(true, true, false, true))) && true)) && true)), (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true), true, true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(true), true, true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(true), true, true)), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(bvec4(bvec2(true), true, true)), false, false)), true)))), true, false))))))), bvec2(bvec2(bvec2(true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), true, false))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) || false)))))), true, false))))))))), _GLF_struct_6(_GLF_struct_3(mat3(1.0), mat3x2(1.0), bvec2(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))), bvec4(_GLF_IDENTITY(true, bool(bvec2(true, false)))), mat3(1.0)), _GLF_struct_4(uvec2(1u), vec3(1.0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (1) | (1))), (false ? _GLF_FUZZED(ivec3(-50266, -20419, 38226)) : _GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), (ivec3(0, 0, 0) >> _GLF_IDENTITY(ivec3(8), ivec3(8))) ^ (ivec3(1)))) ^ ivec3(0, 0, _GLF_IDENTITY(0, 1 * (0)))))), mat3x4(1.0), mat3x2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), true, 1), _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u | (1u)), (_GLF_IDENTITY(1u, 0u | (1u))) + (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u)), mat3x2(1.0), _GLF_struct_5(mat4x2(1.0), uvec4(1u))), 1u, _GLF_struct_9(_GLF_struct_7(ivec2(1), bvec4(true), vec3(1.0), mat3x2(1.0)), mat2x4(1.0), _GLF_struct_8(bvec3(true), vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bvec4(true), mat4x3(1.0), ivec3(1), mat2x3(1.0)), mat3x2(1.0)), bvec2(true));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y), false)))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true, false)))))))), false, false)), true && (bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true, false)))))))), false, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, false))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).y)))))) || false)))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch)), max(mat2(1.0) * ((injectionSwitch)), mat2(1.0) * ((injectionSwitch))))) / vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(vec4(41.23, 3.1, -2.8, 7.5))) : 1.0)))).y)), false, false))), _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true))), (false ? _GLF_FUZZED(faceforward(-211.817, (- 0.2), -2.2)) : injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true))), (false ? _GLF_FUZZED(faceforward(-211.817, (- 0.2), -2.2)) : injectionSwitch.y)))) || false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(_GLF_IDENTITY(vec4(41.23, 3.1, -2.8, 7.5), abs(vec4(1.0, 1.0, 1.0, 1.0)) * (vec4(41.23, 3.1, -2.8, 7.5))))) : 1.0)))).y)), false, false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true))), (false ? _GLF_FUZZED(faceforward(-211.817, (- 0.2), -2.2)) : injectionSwitch.y))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(vec4(41.23, 3.1, -2.8, 7.5))) : 1.0)), max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(vec4(41.23, 3.1, -2.8, 7.5))) : 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(vec4(41.23, 3.1, -2.8, 7.5))) : 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(vec4(41.23, 3.1, -2.8, 7.5))) : 1.0)), min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(vec4(41.23, 3.1, -2.8, 7.5))) : 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(vec4(41.23, 3.1, -2.8, 7.5))) : 1.0)))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(vec4(41.23, 3.1, -2.8, 7.5))) : 1.0)))))))).y)), false, false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.0)), float(injectionSwitch.y), bool(true))), (false ? _GLF_FUZZED(faceforward(-211.817, (- 0.2), -2.2)) : _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0)))))))), true, _GLF_IDENTITY(true, bool(bvec2(true, false))))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))) || false)))))))) || false)), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(true, (true) || false), false))))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(true, (true) || false), false))))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(true, (true) || false), false))))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 0.0, 1.0)), (float(vec3(1.0, 0.0, 1.0))) - 0.0))))), (true ? (injectionSwitch) / vec2(1.0, 1.0) : _GLF_FUZZED(vec2(4173.0165, 19.05))))).y)), false, false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-3.5))), bool(false))), (false ? _GLF_FUZZED(faceforward(-211.817, (- 0.2), -2.2)) : injectionSwitch.y))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, (true) || false)))), false, false))), _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false))), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))) || false))), bool(bvec4(true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(true, (true) || false), false))))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(true, (true) || false), false))))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(true, (true) || false), false))))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 0.0, 1.0)), (float(vec3(1.0, 0.0, 1.0))) - 0.0))))), (true ? (injectionSwitch) / vec2(1.0, 1.0) : _GLF_FUZZED(vec2(4173.0165, 19.05))))).y)), false, false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-3.5))), bool(false))), (false ? _GLF_FUZZED(faceforward(-211.817, (- 0.2), -2.2)) : injectionSwitch.y))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, (true) || false)))), false, false))), _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false))), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))) || false))), false, true, true))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x = subgroup_size;
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))) && true), true && (_GLF_IDENTITY(! (false), _GLF_IDENTITY((_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) || false)) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), (! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))) && true)))) && true)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), 1.0, determinant(mat4(1.0, exp(0.0), 1.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0))))).x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), min(~ (~ (1)), ~ (~ (1)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) / (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), min((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) - 0)))))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), false || (! (_GLF_IDENTITY(false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7023.5177, -4615.9541)))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7023.5177, -4615.9541)))).x > injectionSwitch.y))))) || (false))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (injectionSwitch)))))).y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), true, true), false))))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups)).x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u))))).x));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(min(gl_WorkGroupID, gl_WorkGroupID), clamp(_GLF_IDENTITY(min(gl_WorkGroupID, gl_WorkGroupID), (min(gl_WorkGroupID, gl_WorkGroupID)) ^ uvec3(0u, 0u, 0u)), min(gl_WorkGroupID, gl_WorkGroupID), min(gl_WorkGroupID, gl_WorkGroupID)))).x;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y = workgroup_id;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) || false)))
    barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) | (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id))) >> uvec2(0u, _GLF_IDENTITY(0u, (0u) ^ 0u)))) | uvec2(0u, 0u)).y, clamp(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y, GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y, _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y, (false ? _GLF_FUZZED(_GLF_struct_replacement_10.subgroup_id) : _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) | (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id)).y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, max(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, ~ _GLF_IDENTITY((~ (_GLF_struct_replacement_10.subgroup_id * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x)), ~ _GLF_IDENTITY((~ ((~ (_GLF_struct_replacement_10.subgroup_id * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x)))), 0u | ((~ ((~ (_GLF_struct_replacement_10.subgroup_id * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x)))))))), _GLF_struct_replacement_10.subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x))) | (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x))) | (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x))) | (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x)))))))), 0u | (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x))) | (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x))) | (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(_GLF_IDENTITY(0u, (0u) << 0u), 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)))).x)))))))))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), ((_GLF_struct_replacement_10.subgroup_id)) - 0u), 0u ^ (_GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), ((_GLF_struct_replacement_10.subgroup_id)) - 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), ((_GLF_struct_replacement_10.subgroup_id)) - 0u), 0u ^ (_GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), ((_GLF_struct_replacement_10.subgroup_id)) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), ((_GLF_struct_replacement_10.subgroup_id)) - 0u), 0u ^ (_GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), ((_GLF_struct_replacement_10.subgroup_id)) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), ((_GLF_struct_replacement_10.subgroup_id)) - 0u), 0u ^ (_GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), ((_GLF_struct_replacement_10.subgroup_id)) - 0u))))))) | (_GLF_struct_replacement_10.subgroup_id)))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x) / (1u ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, clamp(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), ((_GLF_struct_replacement_10.subgroup_id)) | (_GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), 0u | ((_GLF_struct_replacement_10.subgroup_id))))) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, ~ (~ (_GLF_struct_replacement_10.subgroup_id)))) - 0u), (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | _GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), 0u + ((_GLF_struct_replacement_10.subgroup_id)))))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))), clamp(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) / 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_struct_replacement_10.subgroup_id)), max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY((_GLF_struct_replacement_10.subgroup_id), (true ? (_GLF_struct_replacement_10.subgroup_id) : _GLF_FUZZED(virtual_gid))) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))), (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id))))) | 0u))))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, max(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(_GLF_struct_replacement_10.subgroup_id, (_GLF_struct_replacement_10.subgroup_id) | (_GLF_struct_replacement_10.subgroup_id))) | (_GLF_struct_replacement_10.subgroup_id)))))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 0.0))), injectionSwitch.x)), injectionSwitch.x))))) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) << 0u))))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id) - uvec2(0u, 0u)), ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id), min(~ (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id), ~ (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, uvec2(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id[0], GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id[1])))))))))).x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1)))))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((subgroup_local_id + 1), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(uvec3(197808u, 114862u, 183379u)[2]))) + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1)))))))) % _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id), min(~ (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id), ~ (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id)))))), ((_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id), min(~ (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id), ~ (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id))))))) >> uvec2(0u, 0u)))).x))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))) % _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, min(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x))) / (((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u | (0u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u | (0u))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u | (0u))), (true ? uint(_GLF_IDENTITY(0u, 0u | (0u))) : _GLF_FUZZED(workgroup_base))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u | (0u))), (true ? uint(_GLF_IDENTITY(0u, 0u | (0u))) : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u | (0u))), (true ? uint(_GLF_IDENTITY(0u, 0u | (0u))) : _GLF_FUZZED(workgroup_base))))), (0u & _GLF_IDENTITY(57116u, (_GLF_IDENTITY(57116u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(57116u, (57116u) | 0u)))) - 0u)), 1u, 0u)))) - 0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (_GLF_IDENTITY(uint(0u), min(uint(0u), _GLF_IDENTITY(uint(0u), (true ? uint(0u) : _GLF_FUZZED(virtual_gid))))))), uint(0u)), 1u, 1u)), 0u ^ (uint(uvec3(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) + 0u)))))))), 1u, 1u)))))) ^ 0u)), (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))) % GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x) | 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)), max(_GLF_IDENTITY(((subgroup_local_id + 1)), ~ (~ (((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(63873)))))))), ((subgroup_local_id + 1)))), max(_GLF_IDENTITY(((subgroup_local_id + 1)), max(_GLF_IDENTITY(((subgroup_local_id + 1)), ~ (~ (((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(63873)))))))), ((subgroup_local_id + 1)))), _GLF_IDENTITY(((subgroup_local_id + 1)), max(_GLF_IDENTITY(((subgroup_local_id + 1)), ~ (~ (((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(63873)))))))), ((subgroup_local_id + 1)))))))) % GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, (_GLF_IDENTITY((subgroup_local_id + 1), ~ (~ ((subgroup_local_id + 1)))) % GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x) | 0u))) / 1u)) >> _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(0u, uint(uvec3(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), 1u, 1u)), clamp(_GLF_IDENTITY(uint(uvec3((0u), 1u, 1u)), clamp(uint(uvec3(_GLF_IDENTITY((0u), ~ (~ (_GLF_IDENTITY((0u), min(_GLF_IDENTITY((0u), clamp((0u), (0u), (0u))), (0u)))))), 1u, _GLF_IDENTITY(1u, ~ (~ (1u))))), uint(uvec3((0u), 1u, _GLF_IDENTITY(1u, (1u) * uint(_GLF_ONE(1.0, injectionSwitch.y))))), uint(uvec3((0u), 1u, 1u)))), uint(uvec3(_GLF_IDENTITY((0u), ((0u)) >> 0u), 1u, 1u)), uint(uvec3((_GLF_IDENTITY(0u, (0u) >> 0u)), 1u, 1u))))) | (0u >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(uvec4(uint(7u), 0u, 1u, 1u)), max(uint(uvec4(_GLF_IDENTITY(uint(7u), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED((subgroup_local_id / workgroup_base)))) * (uint(7u))), 0u, 1u, 1u)), _GLF_IDENTITY(uint(uvec4(uint(7u), 0u, 1u, 1u)), _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(uint(7u), 0u, 1u, 1u)), (true ? uint(uvec4(uint(7u), 0u, 1u, _GLF_IDENTITY(1u, (1u) | (1u)))) : _GLF_FUZZED(virtual_gid)))) / 1u, min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(uint(7u), 0u, 1u, 1u)), (true ? uint(uvec4(uint(7u), 0u, 1u, 1u)) : _GLF_FUZZED(virtual_gid)))), ((_GLF_IDENTITY(uint(uvec4(uint(7u), 0u, 1u, 1u)), (true ? uint(uvec4(uint(7u), 0u, 1u, 1u)) : _GLF_FUZZED(virtual_gid))))) + 0u) / 1u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(uint(7u), 0u, 1u, 1u)), (true ? uint(uvec4(uint(7u), 0u, 1u, 1u)) : _GLF_FUZZED(virtual_gid))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(uint(7u), 0u, 1u, 1u)), (true ? uint(uvec4(uint(7u), 0u, 1u, 1u)) : _GLF_FUZZED(virtual_gid))), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(uint(uvec4(uint(7u), 0u, 1u, 1u)), (true ? uint(uvec4(uint(7u), 0u, 1u, 1u)) : _GLF_FUZZED(virtual_gid)))))) / 1u)) / 1u, min((_GLF_IDENTITY(uint(uvec4(uint(7u), 0u, 1u, 1u)), (true ? uint(uvec4(uint(7u), 0u, 1u, 1u)) : _GLF_FUZZED(virtual_gid)))) / 1u, (_GLF_IDENTITY(uint(uvec4(uint(_GLF_IDENTITY(7u, 1u * (7u))), 0u, 1u, 1u)), (true ? uint(uvec4(uint(7u), 0u, 1u, 1u)) : _GLF_FUZZED(virtual_gid)))) / 1u))))), (_GLF_IDENTITY(uint(uvec4(uint(7u), 0u, _GLF_IDENTITY(1u, (1u) | (1u)), 1u)), (true ? uint(uvec4(uint(7u), 0u, 1u, 1u)) : _GLF_FUZZED(virtual_gid)))) / 1u))))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY((0), max((0), (0))) | (0)) | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 & -88001), ! (! (_injected_loop_counter != (0 & -88001))))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 & -88001), ! (! (_injected_loop_counter != (0 & -88001)))))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --) - 0, (_GLF_IDENTITY((_injected_loop_counter --) - 0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter --) - 0))) >> (0 & -2736))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      {
      }
     else
      {
       buf[virtual_gid] = _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, min(1, 1)))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(-8.7)), vec2(_GLF_FUZZED(-1.8), _GLF_IDENTITY((vec2(0.0, 0.0))[1], ((vec2(0.0, 0.0))[1]) * 1.0)), bvec2(false, true))) : _GLF_FUZZED(vec2(3.3, -618.701)))) + (injectionSwitch)).y)))))))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, exp(abs(0.0)) * (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 1.0)), (float(vec3(injectionSwitch.x, 0.0, 1.0))) * 1.0)))))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), 0.0, 1.0, 1.0))) > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0)))), _GLF_IDENTITY(true, (true) || false) && (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true)), ! (! (bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true)))))))))), ! (! _GLF_IDENTITY((! ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4((! ((injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))), false || (bool(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((! ((injectionSwitch.x < injectionSwitch.y))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4((! ((injectionSwitch.x < injectionSwitch.y))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4((! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4.4)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4.7)), float(injectionSwitch.y), bool(true)))), bool(true)))))), false, false, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4((! ((injectionSwitch.x < injectionSwitch.y))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))), ! (! (bool(bool(_GLF_IDENTITY(bool(bvec4((! ((injectionSwitch.x < injectionSwitch.y))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4((! ((injectionSwitch.x < injectionSwitch.y))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.2), _GLF_FUZZED(-1420.5598)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(128.040) : (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.2), _GLF_FUZZED(-1420.5598)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(128.040) : (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.2), _GLF_FUZZED(-1420.5598)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(128.040) : (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true)))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.2), _GLF_FUZZED(-1420.5598)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(128.040) : (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))))).x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))).y))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false))))) || ((_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, round(length(normalize(1.0)))))) > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))), _injected_loop_counter)) < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, 0u | _GLF_IDENTITY((subgroup_local_id), 0u | ((subgroup_local_id)))), _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), subgroup_local_id)))) + 1 < GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x)
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false))))))))))
        {
         for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, int(ivec3(2, (0 >> _GLF_IDENTITY(int(5), int(5))), 0)))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) >> 0) != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(findMSB(69229)))) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid, next_virtual_gid))], uint(2), 4, _GLF_IDENTITY(64, (64) >> 0), 0);
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(92.87)), bvec2(true, false))).y))))
      {
      }
     else
      {
       subgroupAll(false);
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, max(_GLF_IDENTITY(((injectionSwitch)[0]) / 1.0, max(((injectionSwitch)[0]) / 1.0, ((injectionSwitch)[0]) / 1.0)), ((injectionSwitch)[0]) / 1.0))))), _GLF_FUZZED(8108.3319)), vec2(_GLF_IDENTITY(_GLF_FUZZED(388.394), 1.0 * (_GLF_IDENTITY(_GLF_FUZZED(388.394), max(_GLF_FUZZED(388.394), _GLF_FUZZED(388.394))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1]), bvec2(false, true))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(_GLF_IDENTITY(float((injectionSwitch)[0]), (float((injectionSwitch)[0])) - 0.0)), mix(float(_GLF_FUZZED(float(150116u))), float(float(_GLF_IDENTITY(float((injectionSwitch)[0]), (float((injectionSwitch)[0])) - 0.0))), bool(true)))), 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(vec2(-7083.4708, -82.29)) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(86.87, -18.14))))) / vec2(1.0, 1.0)))))[0]) / 1.0))), _GLF_FUZZED(8108.3319)), vec2(_GLF_FUZZED(388.394), (injectionSwitch)[1]), bvec2(false, true))).y, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), _GLF_FUZZED(8108.3319)), vec2(_GLF_FUZZED(388.394), (injectionSwitch)[1]), bvec2(false, true))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), _GLF_FUZZED(8108.3319)), vec2(_GLF_FUZZED(388.394), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), _GLF_FUZZED(8108.3319)), vec2(_GLF_FUZZED(388.394), (injectionSwitch)[1]), bvec2(false, true))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), _GLF_FUZZED(8108.3319)), vec2(_GLF_FUZZED(388.394), (injectionSwitch)[1]), bvec2(false, true)))) / vec2(1.0, 1.0)))).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), _GLF_FUZZED(_GLF_IDENTITY(8108.3319, (8108.3319) / 1.0))), vec2(_GLF_FUZZED(388.394), (injectionSwitch)[1]), bvec2(false, true))).y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), _GLF_FUZZED(_GLF_IDENTITY(8108.3319, (8108.3319) / 1.0))), vec2(_GLF_FUZZED(388.394), (injectionSwitch)[1]), bvec2(false, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), _GLF_FUZZED(_GLF_IDENTITY(8108.3319, (8108.3319) / 1.0))), vec2(_GLF_FUZZED(388.394), (injectionSwitch)[1]), bvec2(false, true))).y)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * (_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(((injectionSwitch)[0]), float(vec2(((injectionSwitch)[0]), 1.0))), 0.0, 0.0, tan(_GLF_ZERO(0.0, injectionSwitch.x)))), mix(float(_GLF_FUZZED(-134.460)), float(float(vec4(_GLF_IDENTITY(((injectionSwitch)[0]), float(vec2(((injectionSwitch)[0]), 1.0))), 0.0, 0.0, tan(_GLF_ZERO(0.0, injectionSwitch.x))))), bool(true)))) / 1.0))), _GLF_FUZZED(8108.3319)), vec2(_GLF_FUZZED(388.394), (injectionSwitch)[1]), bvec2(false, true))).y))))));
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y))))))))))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-9.7))) > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), true))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), true))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), false || (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8107.0126)), float(injectionSwitch.y), bool(true))), (injectionSwitch.y) - 0.0), injectionSwitch.y))))))) && true))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[1]), vec2(_GLF_FUZZED(2963.5003), _GLF_FUZZED(-21.69)), _GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(false, false), true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_DEAD(false)))), true && (! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) && true)))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3774.8445)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))), ~ (~ (_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))))))], uint(_GLF_IDENTITY(2, (2) + 0)), 4, 64, 0);
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, false || (false)), true)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))), _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true), false))), false)))))), ((! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))))) && true) || false)), _GLF_IDENTITY(false, true && (false)) || ((_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))), (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true)))) || false), (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true)))) || false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))));
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(! (false), true, false)))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(! (false), true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY((! (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((! (! (false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, true, true, true)))))))))))), bool(bvec3(! (false), true, false))))))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))))), true, true, false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), clamp((1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))), (1 << _GLF_IDENTITY(int(4), int(4))))), (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 1, _GLF_IDENTITY(1, (1) * 1)))))))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 1, 1)), clamp(_GLF_IDENTITY(int(ivec3(int(4), 1, 1)), 0 | (int(ivec3(int(4), 1, 1)))), int(ivec3(int(4), 1, 1)), int(ivec3(int(4), 1, 1)))))))), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 1, 1)), clamp(_GLF_IDENTITY(int(ivec3(int(4), 1, 1)), 0 | (int(ivec3(int(4), 1, 1)))), int(ivec3(int(4), 1, 1)), int(ivec3(int(4), 1, 1))))))))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), max(((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), ~ (~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (~ (4))))), clamp(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) + 0))), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), (int(_GLF_IDENTITY(4, max(4, 4)))) | (int(_GLF_IDENTITY(4, max(4, 4)))))))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) << 0)), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 1, 1)), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(4), 1, 1), (true ? _GLF_IDENTITY(ivec3(int(4), 1, 1), min(ivec3(int(4), 1, 1), ivec3(int(4), 1, 1))) : _GLF_FUZZED(ivec3(67601, 9396, -45501))))), (int(ivec3(int(4), 1, 1))) / 1) : _GLF_FUZZED(25511)))))))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), (int(4)) ^ ((0 >> _GLF_IDENTITY(int(1), int(1))) & ivec4(46309, 48798, 28302, 33673).x)), _GLF_IDENTITY(int(4), int(ivec3(int(4), 1, 1)))))))))) + 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-124.898)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)))) / _GLF_ONE(1.0, injectionSwitch.y))))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y) || false)) || false))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
          barrier();
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(80557) : 1)))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, 6))), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & 1)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         barrier();
        }
      }
     else
      {
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
