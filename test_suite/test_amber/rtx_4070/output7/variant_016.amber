#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(fma(injectionSwitch, injectionSwitch, mix(injectionSwitch, injectionSwitch, -8432.4116))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           break;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(61972))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         for(int _injected_loop_counter = ((0 & -65637) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, false || (false)))) || false)))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(65.33) : injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec3(_injected_loop_counter != 1, false, false)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, min(4, 4))))), 0 | _GLF_IDENTITY((int(4)), _GLF_IDENTITY(((int(4))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) >> 0), _GLF_IDENTITY(0, 1 * (0)), 0))) ^ 0), clamp(((_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), 0 + (int(4))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4))))) | 0, _GLF_IDENTITY(((int(4))) | 0, (((int(4))) | 0) >> (0 << _GLF_IDENTITY(int(2), int(2)))), ((int(4))) | 0))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), false || (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), false || (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(44.27) : 0.0)), injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = (0 & (-50172 ^ (_GLF_IDENTITY(73786, 0 ^ (73786))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, (1 & 1) | 0)) << (0 << _GLF_IDENTITY(int(2), int(2)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(! (! (bool(bool(_GLF_IDENTITY(false, (false) || false))))), bool(bvec4(! (! (bool(bool(_GLF_IDENTITY(false, (false) || false))))), true, false, true)))))))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, bool(bvec3(false, false, true))) ? _GLF_FUZZED(vec4(-1136.6247, _GLF_IDENTITY(-642.658, (true ? -642.658 : _GLF_FUZZED(52.17))), 18.36, 53.88).z) : injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x : _GLF_FUZZED(-5871.0304)))), float(_GLF_FUZZED((1.8 / 37.31))), bool(false))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint gid = gl_GlobalInvocationID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && true)))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))).x > injectionSwitch.y) || false))), false, true, true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x4(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0))), injectionSwitch[1])).y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), bool(bool(! (! (true))))))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true))))))) && true), false, true, false))))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, true && (true))))), (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, true && (true)))))) || false)), _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! ((! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))) && true), false, true, false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, true && (true)))))), (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) && true), false, true, false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, true && (true)))))), (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) && true), _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))), bool(_GLF_IDENTITY(bvec3(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true)))))), bvec3(bvec4(bvec3(bvec3(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true)))))), false)))))))), (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) && true), false, true, false))))), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true)))))), bvec3(bvec4(bvec3(bvec3(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true)))))), false)))))))), (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) && true), false, true, false))))), false, true)), bvec3(bvec4(bvec3(bvec3(! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true)))))), bvec3(bvec4(bvec3(bvec3(false, false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true)))))), false)))))))), (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) && true), false, true, false))))), false, true)), false)))))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (1 ^ 1) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0))) < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bool((false)))))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)), ((_GLF_IDENTITY(true, (true) || false))) && true) && true)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, (true) || false)))), ((_GLF_IDENTITY(true, (true) || false))) && true) && true)))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-49323) : _injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && true))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) || false)))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)) || false)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))));
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(97377) : int(7))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((0 & -87912), _GLF_IDENTITY(min(_GLF_IDENTITY((0 & -87912), ((0 & -87912)) | ((0 & -87912))), (0 & -87912)), max(min(_GLF_IDENTITY((0 & -87912), ((0 & -87912)) | ((0 & -87912))), (0 & -87912)), min(_GLF_IDENTITY((0 & -87912), ((0 & -87912)) | ((0 & -87912))), (0 & -87912))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) | (0)), (0) | (0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))))))) | (0)), (0) | (0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), true))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, true), true)))))))) && true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)), (_GLF_IDENTITY(bool(bvec3(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)), bool(bvec4(bool(bvec3(_injected_loop_counter < 1, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)), true, true, false)))) && true), bool(bvec2(bool(bvec3(_injected_loop_counter < 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true))))); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) << 0) : _GLF_FUZZED(45162))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.6)), vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), bvec2(false, true))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, 0.0, log(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0), transpose(transpose(mat4(injectionSwitch.y, 0.0, 0.0, log(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0))))), 1.0 * (float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, 0.0, log(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0), transpose(transpose(mat4(injectionSwitch.y, 0.0, 0.0, log(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, tan(0.0), 0.0))))))))))))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint total_threads = num_workgroup * _GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), clamp(uvec4(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))), 0u, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), _GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), _GLF_IDENTITY(min(uvec4(workgroup_size, 0u, 0u, 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(workgroup_size, 0u, 0u, 1u))), (uvec4(workgroup_size, 0u, 0u, 1u)) << uvec4(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 0u, 0u))), (min(uvec4(workgroup_size, 0u, 0u, 1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 0u, 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(workgroup_size, 0u, 0u, 1u))), (uvec4(workgroup_size, 0u, 0u, 1u)) << uvec4(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 0u, 0u)))) | uvec4(0u, 0u, 0u, 0u))), uvec4(workgroup_size, 0u, 0u, 1u)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8247.3716, -5361.5335)) : injectionSwitch))) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))) && true)))))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), true, false)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y), false, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) || false)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(6.2))) / 1.0), mix(float(_GLF_FUZZED(-9068.8699)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(6.2))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(6.2))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(6.2))) / 1.0), clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(6.2))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(6.2))) / 1.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(6.2))) / 1.0))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(6.2))) / 1.0)))), bool(true))), injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(false)))))))
      barrier();
     return;
    }
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(37314, (37314) | 0) & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.0)), float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0)))), bool(true))))))) || false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))))))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))), (! (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), true))), bvec2(bvec4(bvec2(bvec2(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), true))), true, true))))), true && (bool(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), true))), bvec2(bvec4(bvec2(bvec2(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), true))), true, true)))))))))) || false)))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), (_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0])), injectionSwitch[1])), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(-7.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(-7.6)), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))]), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 1.0)), clamp(vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 1.0)), vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 1.0)), vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 1.0))))).x < injectionSwitch.y)), true))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(-7.6)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(tanh(injectionSwitch)))).y)), true))).x, float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(-7.6)), vec2((injectionSwitch)[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | (0))))], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x, float(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(-7.6)), vec2(_GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))), max(_GLF_IDENTITY(min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))), min(min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))))), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))))) : _GLF_FUZZED(vec2(-2337.3615, 91.48))))[_GLF_IDENTITY(0, 0 | (0))], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) - 0.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-606.204)), float(1.0), bool(true))))), 1.0, 0.0, 1.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-727.669))), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 1.0, 1.0, sqrt(0.0), 1.0, sin(0.0), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(-7.6)), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(919.042), ((injectionSwitch))[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)), max(((injectionSwitch)), ((injectionSwitch))))[0], (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)) ? ((injectionSwitch))[0] : _GLF_FUZZED(-52.24))), _GLF_FUZZED(float(false))), bvec2(true, false)))[0], clamp(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(919.042), ((injectionSwitch))[1]), vec2(_GLF_IDENTITY(((injectionSwitch))[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((injectionSwitch))[0] : _GLF_FUZZED(-52.24))), _GLF_FUZZED(float(false))), bvec2(true, false)))[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(919.042), ((injectionSwitch))[1]), vec2(_GLF_IDENTITY(((injectionSwitch))[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))), (injectionSwitch))))[0] : _GLF_FUZZED(-52.24))), _GLF_FUZZED(float(false))), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(bvec2(true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))))[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(919.042), ((injectionSwitch))[1]), vec2(_GLF_IDENTITY(((injectionSwitch))[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ((injectionSwitch))[0] : _GLF_FUZZED(-52.24))), _GLF_FUZZED(float(false))), bvec2(true, false)))[0])), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-9.9, (_GLF_IDENTITY(-9.9, (-9.9) / 1.0)) - 0.0)), _GLF_FUZZED(-7.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(-7.6)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-6.4))), (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(8108.3387), min(_GLF_FUZZED(8108.3387), _GLF_FUZZED(8108.3387))), min(true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(8108.3387), min(_GLF_FUZZED(8108.3387), _GLF_FUZZED(8108.3387))), true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(8108.3387), min(_GLF_FUZZED(8108.3387), _GLF_FUZZED(8108.3387))))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, 0.0)))).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, 0.0)))).x > injectionSwitch.y))), false, false, false)), (_GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, 0.0)))).x > injectionSwitch.y))), false, false, false)), ! (! (bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, 0.0)))).x > injectionSwitch.y))), false, false, false)))))) && true)) || false, (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))).x > injectionSwitch.y))) || false, _GLF_IDENTITY(bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))).x > injectionSwitch.y))) || false, false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))).x > injectionSwitch.y))) || false, false, true)), bool(bvec3(bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))).x > injectionSwitch.y))) || false, false, true)), true, true)))), (! (_GLF_IDENTITY(bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))).x > injectionSwitch.y))) || false, false, true)), bool(bvec3(bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(abs(vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))).x > injectionSwitch.y))) || false, false, true)), true, true))))) || false))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, sqrt(1.0) * (injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0)), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0)), vec4(0.0, 0.0, 1.0, 0.0)))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0)), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0)), vec4(0.0, 0.0, 1.0, 0.0)))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0)), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0)), vec4(0.0, 0.0, 1.0, 0.0)), (false ? _GLF_FUZZED(mix(-37.03, 50.82, tanh(24.26))) : dot(vec4(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, log(1.0)), vec4(0.0, 0.0, 1.0, 0.0)))))) > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, true))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false, true))), true), false)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false)))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 1), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) && true), false, true)), true && (bool(bvec3(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) && true), false, true))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))) && true))), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))) && true))), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))) && true))), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), (int(2)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, ! (! (true))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))), true)))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bool(true && (false))))))), (false) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec3((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec3((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec3((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec3((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), false, true))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false))))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ((_GLF_IDENTITY(false, bool(bool(false))))) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, false))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(5.9) : (injectionSwitch)[1]))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-6.5), _GLF_FUZZED(-760.420)), mix(vec2(_GLF_FUZZED(87.51), (vec2(_GLF_FUZZED(-6.5), _GLF_FUZZED(-760.420)))[1]), vec2((vec2(_GLF_FUZZED(-6.5), _GLF_FUZZED(-760.420)))[0], _GLF_FUZZED(7.6)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(false, false))).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)), (false) && true), true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), false || ((false)))) && true) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false), _GLF_IDENTITY(! (! ((false))), (! (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), false, false))))) && true)) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec3(bvec2(bvec2(bvec2(true, true))), false))))))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), bool(bvec2(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), false)))))), true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), bool(bvec2(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), false)))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), bool(bvec2(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), bool(bvec2(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), true && ((_GLF_IDENTITY(true, (true) && true)))), true && (! (_GLF_IDENTITY(true, (true) && true))))))), false))))))))), true)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), bool(bvec2(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))), bool(bvec2(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), true && ((_GLF_IDENTITY(true, (true) && true)))), true && (! (_GLF_IDENTITY(true, (true) && true))))))), false))))))))), true)))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), bvec2(bvec2(bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && _GLF_IDENTITY((! (_GLF_IDENTITY(true, (true) && true))), false || ((! (_GLF_IDENTITY(true, (true) && true))))))))))), bool(bvec2(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (! ((true) && true))))), true && (! (_GLF_IDENTITY(true, (true) && true))))))), false)))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))), _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, true)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))))) && true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))))) && true, true, false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))))) && true, true, false, true)), true), bvec2(bvec3(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))))) && true, true, false, true)), true), true))))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false))))), (false) && true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true))), true, true, false)))))), true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((! ((false))), ! (! (_GLF_IDENTITY((! ((false))), false || ((! ((false)))))))), (! (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), false, false))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((! ((false))), ! (! (_GLF_IDENTITY((! ((false))), false || ((! ((false)))))))), true && (! _GLF_IDENTITY((! ((false))), ! (! (_GLF_IDENTITY((! ((false))), false || ((! ((false)))))))))), (! (_GLF_IDENTITY(! ((false)), bool(bvec3(! ((false)), false, false))))) && true)))) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false), _GLF_IDENTITY(! _GLF_IDENTITY((! ((false))), ! (! (_GLF_IDENTITY((! ((false))), false || ((_GLF_IDENTITY(! ((false)), true && (! ((false)))))))))), (! (_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bvec3(! ((false)), false, false), bvec3(bvec4(bvec3(! ((false)), false, false), true))))))) && true)) && true), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), (false) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))), true))))))))))) || false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7317.8039) : injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1326.4955)), vec2(_GLF_FUZZED(-256.682), (injectionSwitch)[1]), bvec2(false, true))).y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               do
                {
                 return;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(false, true, false, true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))), true)), true))))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))), true))))) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 1 * (1))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) << 0, 0 | ((_injected_loop_counter ++) << 0))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 1.0, 1.0, cos(0.0))), float(mat3x4(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 1.0, 1.0, cos(0.0))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, cos(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, cos(0.0), 1.0, 1.0))).x > injectionSwitch.y))), false))) || false)), (_GLF_IDENTITY(false, true && (false)) || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(trunc(38.04)))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(trunc(38.04)))) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(trunc(38.04)))) > injectionSwitch.y, false)))))))))) || false))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), mix(float(_GLF_FUZZED(5.8)), float(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), mix(_GLF_IDENTITY(float(_GLF_FUZZED(1.5)), max(float(_GLF_FUZZED(1.5)), float(_GLF_FUZZED(1.5)))), float(max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(vec2(1233.1380).t)), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(vec2(1233.1380).t)), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(vec2(1233.1380).t)), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(vec2(1233.1380).t)), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(vec2(1233.1380).t)), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(vec2(1233.1380).t)), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(vec2(1233.1380).t)), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(vec2(1233.1380).t)), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y)))), bool(true)))), bool(true))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                break;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), bool(bvec2(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true)))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (int(6)) * 1)))), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), clamp(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0))))).y)))))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y)))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, exp(0.0), sin(0.0)))) > injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   atomicStore(buf[_GLF_IDENTITY((gid + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1)))), ((_GLF_IDENTITY(gid, clamp(_GLF_IDENTITY(gid, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid)))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))), uint(uint(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))))))), max(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))), uint(uint(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))), uint(uint(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))))))), clamp(uint(_GLF_IDENTITY(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))), uint(uint(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))))))), uint(_GLF_IDENTITY(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))), uint(uint(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))))))), uint(_GLF_IDENTITY(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))), uint(uint(uint((_GLF_IDENTITY(gid, ~ _GLF_IDENTITY((~ (gid)), 1u * (_GLF_IDENTITY((~ (gid)), max((~ (gid)), (~ (gid))))))))))))))))))), gid, _GLF_IDENTITY(gid, max(gid, _GLF_IDENTITY(gid, uint(uvec2(gid, 1u))))))) + 1)) | ((gid + 1))) % total_threads], uint(_GLF_IDENTITY(2, (2) | (2))), 4, 64, 0);
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (! (false))), true, false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
    {
     subgroupAll(false);
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(46.52)), bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))), 1.0, 0.0) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, 5102.7406, -7.8, 6.8))))), _GLF_IDENTITY((vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.0), _GLF_FUZZED(-669.699)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), (vec2(vec2(injectionSwitch))) - vec2(0.0, 0.0))).y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(1.0), 0.0, 0.0), (false ? _GLF_FUZZED(mat4x3(-65.28, -0.2, -6352.7892, -866.550, 481.535, 3.8, -53.52, -4.0, 5.3, 7549.0138, -6615.6231, -546.167)) : mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(1.0), 0.0, 0.0)))), (true ? float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(1.0), 0.0, 0.0), (false ? _GLF_FUZZED(mat4x3(-65.28, -0.2, -6352.7892, -866.550, 481.535, 3.8, -53.52, -4.0, 5.3, 7549.0138, -6615.6231, -546.167)) : mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(1.0), 0.0, 0.0)))) : _GLF_FUZZED(30.59))), (_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(abs(0.0), (abs(0.0)) - sqrt(0.0)), 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), max(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)))), dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(1.0), 0.0, 0.0), (false ? _GLF_FUZZED(mat4x3(-65.28, -0.2, -6352.7892, -866.550, 481.535, 3.8, -53.52, -4.0, 5.3, 7549.0138, -6615.6231, -546.167)) : mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), min(_GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), vec3(vec4(vec3(abs(0.0), 0.0, 1.0), 1.0))), _GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), min(vec3(abs(0.0), 0.0, 1.0), vec3(abs(0.0), 0.0, 1.0))))), vec3(0.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), _GLF_IDENTITY(vec3(mat3x4(vec3(abs(0.0), 0.0, 1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0, 1.0)), mix(vec3(_GLF_FUZZED(14.39), _GLF_FUZZED(-413.113), _GLF_FUZZED(593.554)), vec3((vec3(mat3x4(vec3(abs(0.0), 0.0, 1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0, 1.0)))[0], (vec3(mat3x4(vec3(abs(0.0), 0.0, 1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0, 1.0)))[1], (vec3(mat3x4(vec3(abs(0.0), 0.0, 1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0, 1.0)))[2]), bvec3(true, true, true)))), _GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), (vec3(abs(0.0), 0.0, 1.0)) - vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(vec3(abs(0.0), 0.0, 1.0), (vec3(abs(0.0), 0.0, 1.0)) * vec3(1.0, 1.0, 1.0)))), vec3(0.0, 0.0, 1.0))), sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(1.0), 0.0, 0.0)))), (true ? float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(abs(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9.0) : _GLF_IDENTITY(0.0, max(0.0, 0.0))))), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0))), sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(1.0), 0.0, 0.0), (false ? _GLF_FUZZED(mat4x3(-65.28, -0.2, -6352.7892, -866.550, 481.535, 3.8, -53.52, -4.0, 5.3, 7549.0138, -6615.6231, -546.167)) : mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(abs(0.0), 0.0, 1.0), vec3(0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, round(length(normalize(1.0))), 0.0, 0.0, 0.0, sqrt(1.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y))))))), sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), sqrt(1.0), 0.0, 0.0)))) : _GLF_FUZZED(30.59)))) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, 5102.7406, -7.8, 6.8)))))) * mat2(1.0), _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY((_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), float(mat3(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, length(0.0), 0.0, 0.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(56.53)), float(1.0), bool(true))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, 5102.7406, -7.8, 6.8))))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))).y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), mix(float(_GLF_FUZZED(56.53)), float(1.0), bool(true))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, 5102.7406, -7.8, _GLF_IDENTITY(6.8, (6.8) + abs(0.0)))))))))) * mat2(1.0), exp(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * mat2(1.0))) * ((_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.6) : injectionSwitch.y))), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(56.53)), float(1.0), bool(true)))), mix(float(_GLF_FUZZED(-44.93)), float(min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(56.53)), float(1.0), bool(true))))), bool(true)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, _GLF_IDENTITY(5102.7406, (_GLF_IDENTITY(5102.7406, min(5102.7406, 5102.7406))) - 0.0), -7.8, _GLF_IDENTITY(_GLF_IDENTITY(6.8, (_GLF_IDENTITY(true, false || (true)) ? 6.8 : _GLF_FUZZED(-49.07))), clamp(_GLF_IDENTITY(6.8, (true ? 6.8 : _GLF_FUZZED(48.22))), 6.8, _GLF_IDENTITY(6.8, max(6.8, 6.8))))))))), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) + vec2(0.0, 0.0)), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), mix(float(_GLF_IDENTITY(1.0, (1.0) * 1.0)), float(_GLF_FUZZED(5639.6087)), bool(false))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(56.53)), float(1.0), bool(true))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, 5102.7406, -7.8, 6.8)))))), (mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.7)), float(1.0), bool(true))), mix(float(_GLF_FUZZED(-760.254)), float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.7)), float(1.0), bool(true)))), bool(true))), min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(56.53)), mix(float(_GLF_FUZZED(-54.56)), float(_GLF_IDENTITY(float(_GLF_FUZZED(56.53)), (float(_GLF_FUZZED(56.53))) + 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(1.0), bool(true))), mix(float(_GLF_FUZZED((2.1))), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(56.53)), mix(float(_GLF_FUZZED(-54.56)), float(_GLF_IDENTITY(float(_GLF_FUZZED(56.53)), (float(_GLF_FUZZED(56.53))) + 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(1.0), bool(true))), (_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(56.53)), mix(float(_GLF_FUZZED(-54.56)), float(_GLF_IDENTITY(float(_GLF_FUZZED(56.53)), (float(_GLF_FUZZED(56.53))) + 0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(1.0), bool(true)))) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(2372.1421, min(2372.1421, 2372.1421)), tan(0.0) + (_GLF_IDENTITY(2372.1421, min(2372.1421, 2372.1421)))), _GLF_IDENTITY(-9.3, min(-9.3, -9.3)), 220.860, 5102.7406, -7.8, 6.8))))))) + vec2(0.0, 0.0)))) * mat2(1.0))), 1.0, 1.0)), (vec2(mat2(_GLF_IDENTITY((_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(56.53)), float(1.0), bool(true))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, 5102.7406, -7.8, 6.8))))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), max((1.0), (1.0))) * 1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(56.53)), float(1.0), bool(true))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, 5102.7406, -7.8, 6.8)))))))) * mat2(1.0), exp(vec2(0.0, 0.0)) * ((_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(56.53)), float(1.0), bool(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((772.831 * -527.139))), float(1.0), bool(true))), injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, _GLF_IDENTITY(5102.7406, (_GLF_IDENTITY(5102.7406, min(5102.7406, 5102.7406))) - 0.0), -7.8, _GLF_IDENTITY(6.8, clamp(_GLF_IDENTITY(6.8, (true ? 6.8 : _GLF_FUZZED(48.22))), 6.8, _GLF_IDENTITY(6.8, max(6.8, _GLF_IDENTITY(6.8, mix(float(_GLF_FUZZED(float(54202u))), float(_GLF_IDENTITY(6.8, mix(float(_GLF_FUZZED(5.4)), float(6.8), bool(true)))), bool(true)))))))))))), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(56.53)), float(1.0), bool(true))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(2372.1421, -9.3, 220.860, 5102.7406, _GLF_IDENTITY(-7.8, min(-7.8, -7.8)), _GLF_IDENTITY(6.8, float(mat3(6.8, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, (1.0) / 1.0), abs(1.0), abs(1.0), 0.0, 1.0, length(vec3(0.0, 0.0, 0.0))))))))))), (mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (true ? mat3x2(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.7)), float(1.0), bool(true))), min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(56.53)), mix(float(_GLF_FUZZED(-54.56)), _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_FUZZED(56.53)), (float(_GLF_FUZZED(56.53))) + 0.0)), (float(_GLF_IDENTITY(float(_GLF_FUZZED(56.53)), (float(_GLF_FUZZED(56.53))) + 0.0))) * 1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(1.0), bool(true))))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0) : _GLF_FUZZED(mat3x2(_GLF_IDENTITY(2372.1421, tan(0.0) + (_GLF_IDENTITY(2372.1421, min(2372.1421, 2372.1421)))), -9.3, 220.860, 5102.7406, -7.8, _GLF_IDENTITY(6.8, clamp(_GLF_IDENTITY(6.8, (false ? _GLF_FUZZED(2.6) : 6.8)), _GLF_IDENTITY(6.8, mix(float(6.8), float(_GLF_FUZZED(725.285)), bool(false))), 6.8))))))))) + vec2(0.0, 0.0)))) * mat2(1.0))), 1.0, 1.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))))).x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (injectionSwitch.x > injectionSwitch.y))));
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec3(1, 0, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
        barrier();
       atomicStore(buf[(gid + 1) % total_threads], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2)))) / 1u)) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 4, 64, 0);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ _GLF_IDENTITY((int(2)), (0 & (- 56708)) ^ ((int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-375.103)), bool(false))), injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (int(0)) - 0), int(0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) : _GLF_FUZZED(_injected_loop_counter))) != 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) << 0))))) >> _GLF_IDENTITY(int(7), int(7))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) << 0))))) >> _GLF_IDENTITY(int(7), int(7))), false || (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) << 0))))) >> _GLF_IDENTITY(int(7), int(7)))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, log(1.0)))))), min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, log(1.0)))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, log(1.0)))))))), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true)))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((32423 / 48921) & 0)); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 | 0))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(length(injectionSwitch)))) > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))), false, false)))) || false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), ! (! (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, true && (true))), bvec3(bvec4(bvec3(false, true, true), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true)), (bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true))) && true))))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0), injectionSwitch.y, injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0), injectionSwitch.y, injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 ^ (_GLF_IDENTITY(int(0), 1 * (int(0))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (0 | 0) ^ (int(0))), 1 * (int(0)))))) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))))).y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
