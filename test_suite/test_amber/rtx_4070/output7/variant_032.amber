#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 vec4 _f0;
 mat2 _f1;
 vec3 _f2;
 mat4x2 _f3;
 ivec4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_13 {
 mat2 _f0;
} ;

struct _GLF_struct_15 {
 mat4x3 _f0;
 bvec3 _f1;
 _GLF_struct_13 _f2;
 ivec2 _f3;
 vec2 _f4;
 _GLF_struct_14 _f5;
 bool _f6;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
} ;

struct _GLF_struct_10 {
 ivec3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
 bvec4 _f1;
 mat3x4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_9 _f0;
 float _f1;
 _GLF_struct_10 _f2;
 vec4 _f3;
 vec4 _f4;
 _GLF_struct_11 _f5;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 int _f1;
 vec4 _f2;
 mat2x4 _f3;
 vec2 _f4;
 vec2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 float _f1;
 mat3 _f2;
 ivec3 _f3;
 uvec4 _f4;
 bool _f5;
} ;

struct _GLF_struct_8 {
 uint _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 uvec3 _f3;
 _GLF_struct_7 _f4;
 uint _f5;
} ;

struct _GLF_struct_16 {
 _GLF_struct_8 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_15 _f2;
 uint workgroup_id;
 ivec3 _f3;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
} ;

struct _GLF_struct_2 {
 uint subgroup_size;
 mat3x2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_0 {
 bool _f0;
 vec3 _f1;
 ivec3 _f2;
 mat4x3 _f3;
 uvec3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 ivec2 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 uvec3 _f4;
 _GLF_struct_3 _f5;
 vec3 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat2x4(1.0), ivec2(1), _GLF_struct_1(_GLF_struct_0(true, vec3(1.0), ivec3(1), mat4x3(1.0), uvec3(1u), mat3(1.0))), _GLF_struct_2(gl_SubgroupSize, mat3x2(1.0), uvec3(1u)), uvec3(1u), _GLF_struct_3(vec2(1.0)), vec3(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_8(1u, _GLF_struct_5(mat2x3(1.0), 1.0, mat3(1.0), ivec3(1), uvec4(1u), true), _GLF_struct_6(mat2x3(1.0)), uvec3(1u), _GLF_struct_7(mat3x4(1.0), 1, vec4(1.0), mat2x4(1.0), vec2(1.0), vec2(1.0), uvec3(1u)), 1u), _GLF_struct_12(_GLF_struct_9(ivec4(1), bvec4(true), mat3x4(1.0), uvec3(1u)), 1.0, _GLF_struct_10(ivec3(1), mat2x4(1.0)), vec4(1.0), vec4(1.0), _GLF_struct_11(mat4(1.0))), _GLF_struct_15(mat4x3(1.0), bvec3(true), _GLF_struct_13(mat2(1.0)), ivec2(1), vec2(1.0), _GLF_struct_14(vec4(1.0), mat2(1.0), vec3(1.0), mat4x2(1.0), ivec4(1), mat2x3(1.0)), true), gl_WorkGroupID.x, ivec3(1));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_16.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_4._f3.subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_4._f3.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_4._f3.subgroup_size);
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < _GLF_struct_replacement_4._f3.subgroup_size)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   if(_GLF_DEAD(false))
    return;
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
   subgroupAll(true);
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
