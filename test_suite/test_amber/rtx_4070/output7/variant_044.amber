#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), bool(_GLF_IDENTITY(bool(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))), true && (bool(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))))) && true)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false)))))) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)) / _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) >> 0u))));
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), gl_WorkGroupSize.x, gl_WorkGroupSize.x)), (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec2(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / 1u), 0u)))))) * 1u);
 for(int _injected_loop_counter = (0 & 71838); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (1 | 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((false)))), bool(_GLF_IDENTITY(bool(! ((false))), ! (! (bool(! ((false)))))))))) || _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) || false)), false || (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) && true) || false))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, mix(float(_GLF_FUZZED(-1054.3223)), float(injectionSwitch.y), bool(true)))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, mix(float(_GLF_FUZZED(-1054.3223)), float(injectionSwitch.y), bool(true))))))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : subgroup_size)), ~ (_GLF_IDENTITY(~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))), (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) | (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))))), (_GLF_IDENTITY(~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(max(num_workgroup, workgroup_size)) : subgroup_id * subgroup_size))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(max(num_workgroup, workgroup_size)) : subgroup_id * subgroup_size)))))) / 1u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, ! (! (false)))), false), true, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) && true)), false || ((_GLF_IDENTITY(! (false), (! (false)) && true))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) && true)), false || ((_GLF_IDENTITY(! (false), (! (false)) && true))))))), ! (! (bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) && true)), false || ((_GLF_IDENTITY(! (false), (! (false)) && true))))))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) - (1u ^ 1u)) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (subgroup_local_id)), (_GLF_IDENTITY(~ (~ (subgroup_local_id)), clamp(~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id))))) >> 0u), (~ (~ (subgroup_local_id))) | 0u)) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (subgroup_local_id)), (_GLF_IDENTITY(~ (~ (subgroup_local_id)), clamp(~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id))))) >> 0u), (~ (~ (subgroup_local_id))) | 0u)) + 1), ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (subgroup_local_id)), (_GLF_IDENTITY(~ (~ (subgroup_local_id)), clamp(~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id)), ~ (~ (subgroup_local_id))))) >> 0u), (~ (~ (subgroup_local_id))) | 0u)) + 1)) - 0u)) >> 0u) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) * 1.0))) || false))))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, _GLF_IDENTITY(exp(0.0), clamp(exp(0.0), _GLF_IDENTITY(exp(0.0), mix(float(exp(0.0)), float(_GLF_FUZZED(2079.2078)), bool(false))), exp(0.0))), 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, abs(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat4(injectionSwitch.y, exp(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(cos(0.0), (false ? _GLF_FUZZED(fma(8.0, -8.0, 1.5)) : cos(0.0))), 0.0, abs(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) || false))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44))))), ((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44)))))) - vec2(0.0, 0.0))))), vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), max(vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44))))), ((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44)))))) - vec2(0.0, 0.0)), clamp(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44))))), ((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44)))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44))))), ((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44)))))) - vec2(0.0, 0.0)), vec2(0.0, 0.0) + (_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44))))), ((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44)))))) - vec2(0.0, 0.0)))), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44))))), ((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.7, -26.44)))))) - vec2(0.0, 0.0))))))))).x > injectionSwitch.y)), true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0), injectionSwitch[1])).x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-758.318, -3.1)))).x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, 1.0, 1.0, 0.0, 0.0, 0.0)), clamp(_GLF_IDENTITY(float(mat2x3(injectionSwitch.x, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), min(float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0 * (_GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0)))), float(mat2x3(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9952.5321))), 0.0) + (injectionSwitch)), injectionSwitch)).x, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat2x3(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0)))), mix(float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0))), dot(vec2(0.0, 1.0), vec2(0.0, cos(0.0))))), float(_GLF_IDENTITY(_GLF_FUZZED((6765.7319)), max(_GLF_FUZZED((6765.7319)), _GLF_FUZZED((6765.7319))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(tan(0.0), (tan(0.0)) * 1.0), 0.0)))))))))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), ! (! (bool((injectionSwitch.x > injectionSwitch.y)))))))) && true))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) || false))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) || false)))), true && (! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) || false)))))))) || false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), (((false))) && true) && true)), (bool(_GLF_IDENTITY((false), ((false)) && true))) && true))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true))))) && true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0)))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), true, false), false)))))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) | 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), true, true, _GLF_IDENTITY(false, false || (false)))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))), (next_virtual_gid) ^ 0u)], uint(2), 4, 64, 0);
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) >> 0)); _GLF_IDENTITY(_injected_loop_counter --, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_injected_loop_counter --)))
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       subgroupAll(false);
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), ! (! (bool(bvec2(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), min(_GLF_IDENTITY(max(1.0, 1.0), float(vec4(max(1.0, 1.0), 0.0, 1.0, 1.0))), max(1.0, 1.0)))), 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / _GLF_IDENTITY(1, ~ (~ (1))))) / 1) < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, injectionSwitch.y))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))), (false ? _GLF_FUZZED(3.3) : _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, tan(0.0), 1.0, 1.0, exp(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 0.0))), 1.0, tan(0.0), 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0))))))) || (false)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), min(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))), vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false))))) || false)) || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), bool(bvec4(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true)))))), true, false)))) && _GLF_IDENTITY(true, true && (true))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))))
          barrier();
         continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_DEAD(false)) && true), (! ((_GLF_DEAD(false)) && true)) && true), false || (_GLF_IDENTITY(! ((_GLF_DEAD(false)) && true), (! ((_GLF_DEAD(false)) && true)) && true)))))), _GLF_IDENTITY(false, (false) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-4615.2527) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(exp(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))), min(exp(vec2(0.0, 0.0)), exp(vec2(0.0, 0.0)))) * (injectionSwitch)).y))))
          break;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(true, bool(bool(true))) && ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, true, true)), ! (! (bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, true, true))))), _GLF_IDENTITY(false || (bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, true, true))), (false || (bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, true, true)))) && true)))))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || false))), true, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (! ((_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false), true, false, true))))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, _GLF_IDENTITY(false, true && (false)), true)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), false, true)))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))), ! (! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true))))))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(true, false || (true)), false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))))), (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))))))))) || false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))))), (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))))))))) || false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))))), _GLF_IDENTITY(! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)))), (! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))), (! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) || false)) || false)))) || false))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false), false || ((false))) || false)), true, false, true))))), bool(bvec4((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false), false || ((false))) || false)), true, false, true))))), false, true, false)))), _GLF_IDENTITY(false, ! (! (false)))))))) || false))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! ((! (! (_GLF_IDENTITY(false, ! (! (false))))))), (! ((! (! (_GLF_IDENTITY(false, ! (! (false)))))))) && true)))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true))))))))))), false))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))), _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))), true)), (bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))), true))) && true)))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, (false) || false)), true, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))))))), false)))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && true)), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), bool(_GLF_IDENTITY(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)), bvec2(bvec3(bvec2(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false)), true))))), false, true)))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, true))), true, false)))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, false, true)))))))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY((false) || _GLF_IDENTITY(false, (false) || false), bool(bvec4((false) || _GLF_IDENTITY(false, (false) || false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)), true, false, true)))))), bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), false || (! (! (_GLF_IDENTITY(false, ! (! (false))))))), true))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), true, false, true)))))), false))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) && true))))) && true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, abs(0.0), abs(1.0), 0.0, 1.0, 0.0, 1.0))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true)))))), ! (! (_GLF_IDENTITY(false, (false) || false))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, true && ((false) || false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), true), false, false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), true), false, false)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true)), true), false, false)), true))), false, false)))))))), true, true)))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) && true), false))) && (false))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false))) || false), true && _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), true && ((false)))))))) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
              continue;
            }
           else
            {
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), 0 | ((1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(refract(-437.443, 149.091, (bvec4(true, false, true, false) , 765.350))) : injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), int(7)), min(0 >> _GLF_IDENTITY(int(7), int(7)), 0 >> _GLF_IDENTITY(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3))), _GLF_IDENTITY((_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3))), (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3)))) | 0)) ^ 0)) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), max((_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3))), (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3)))) | 0)) ^ 0)) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3))), (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), int(3)))) | 0)) ^ 0)) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min((2), (_GLF_IDENTITY(2, min(2, 2))))), (2))) - 0, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min((2), (2))), (2))), (2))) - 0, (true ? _GLF_IDENTITY((2), _GLF_IDENTITY(min(_GLF_IDENTITY((2), min((2), (2))), (2)), clamp(min(_GLF_IDENTITY((2), min((2), (2))), (2)), min(_GLF_IDENTITY((2), min((2), (2))), (2)), min(_GLF_IDENTITY((2), min((2), (2))), (2))))) - 0 : _GLF_FUZZED(-77746))), 1))), max(_GLF_IDENTITY(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min((2), (_GLF_IDENTITY(2, min(2, 2))))), (2))) - 0, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min((2), (2))), (2))), (2))) - 0, (true ? _GLF_IDENTITY((2), _GLF_IDENTITY(min(_GLF_IDENTITY((2), min((2), (2))), (2)), clamp(min(_GLF_IDENTITY((2), min((2), (2))), (2)), min(_GLF_IDENTITY((2), min((2), (2))), (2)), min(_GLF_IDENTITY((2), min((2), (2))), (2))))) - 0 : _GLF_FUZZED(-77746))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min((2), (_GLF_IDENTITY(2, min(2, 2))))), (2))) - 0, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min((2), (2))), (2))), (2))) - 0, (true ? _GLF_IDENTITY((2), _GLF_IDENTITY(min(_GLF_IDENTITY((2), min((2), (2))), (2)), clamp(min(_GLF_IDENTITY((2), min((2), (2))), (2)), min(_GLF_IDENTITY((2), min((2), (2))), (2)), min(_GLF_IDENTITY((2), min((2), (2))), (2))))) - 0 : _GLF_FUZZED(-77746))), 1))), (_GLF_IDENTITY(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min((2), (_GLF_IDENTITY(2, min(2, 2))))), (2))) - 0, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min(_GLF_IDENTITY((2), min((2), (2))), (2))), (2))) - 0, (true ? _GLF_IDENTITY((2), _GLF_IDENTITY(min(_GLF_IDENTITY((2), min((2), (2))), (2)), clamp(min(_GLF_IDENTITY((2), min((2), (2))), (2)), min(_GLF_IDENTITY((2), min((2), (2))), (2)), min(_GLF_IDENTITY((2), min((2), (2))), (2))))) - 0 : _GLF_FUZZED(-77746))), 1)))) * 1))))), 4, _GLF_IDENTITY(64, (64) >> 0), 0);
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true)))) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), bvec2(bvec3(bvec2(false, false), false))), false, false))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), bvec2(bvec3(bvec2(false, false), false))), false, false))))))), true && (bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), bvec2(bvec3(bvec2(false, false), false))), false, false))))))))))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     subgroupAll(true);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + abs(0.0))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
