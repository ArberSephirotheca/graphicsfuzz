#version 460

// Contents of injectionSwitch: [0.0, 1.0]
layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if((false))
  {
   if(((((mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if((((bool(bool(bool(bvec2(false, false))))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if((((bool(bvec4(bool(bool(false)), ((injectionSwitch.x < injectionSwitch.y)), false, true))))))
    return;
  }
 if((false))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      {
       if((false))
        return;
       return;
      }
     if((false))
      return;
     return;
    }
   return;
   if(((((bool((bool(bool(bool(false)))))) || false))))
    return;
  }
 if(((true && (! ((((! (! (! ((false)))))) && true))))))
  {
   if((bool(((((bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(bvec3((true && (((! (! ((((((max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true))))))), (false || (((false) || false))), false))), false)), true)), true)))))))))
    return;
   if((false))
    {
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 uint gid = (~ (~ (gl_GlobalInvocationID.x)));
 if(((((bool(bvec4(injectionSwitch.x > (max((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, false, ((injectionSwitch.x < injectionSwitch.y)), false)))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(((((vec2(mat2((vec2((vec2(1.0, 1.0) * (vec2(((injectionSwitch) / cos(vec2(0.0, 0.0)))))))), 1.0, ((1.0) - 0.0)))).x > ((min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y))))))))
  {
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if(((bool(bvec4(false, true, false, false)))))
    return;
   return;
  }
 uint num_workgroup = ((min((gl_NumWorkGroups.x) / 1u, (gl_NumWorkGroups.x) / 1u)));
 if(((true && (((injectionSwitch.x > injectionSwitch.y))))))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if((false))
  return;
 uint workgroup_size = (clamp((max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x, ((uvec3(0u, 0u, 0u) & uvec3(97827u, 45469u, 172016u)) ^ ((uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], (~ (~ (gl_WorkGroupSize[2]))))))).x));
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   return;
  }
 uint total_threads = num_workgroup * workgroup_size;
 if((((injectionSwitch.x > injectionSwitch.y))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[(clamp((gid + (((false ? ((((min(28491, 28491))) - 0)) : (((((injectionSwitch.x < injectionSwitch.y)) || false)) ? 1 : (- 59918)))))), (gid + (((false ? (28491) : (((injectionSwitch.x < injectionSwitch.y)) ? 1 : (- 59918)))))), ((false ? (((subgroup_local_id)) * 1u) : (gid + (((false ? (28491) : (((injectionSwitch.x < injectionSwitch.y)) ? 1 : (- 59918)))))))))) % total_threads], (~ (~ (uint(2)))), 4, 64, 4);
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((((false) || false)))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
   if((((((injectionSwitch.x > (mix(float((7627.0530)), float(((log(vec2(1.0, 1.0)) + (((true ? ((clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0) : (vec2(- 3.7, - 93.62))))))).y), bool(true))))) && true))))
    return;
   if((false))
    return;
   if((false))
    return;
   subgroupAll(false);
   if((false))
    return;
   if((((injectionSwitch.x > ((injectionSwitch.y) * 1.0)))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((false))
      {
       if((false))
        {
         if((false))
          return;
         return;
        }
       return;
      }
     if((false))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
  }
 else
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((((injectionSwitch.x > injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y))))))
    return;
   if((false))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    {
     if((bool(bvec2((false), true))))
      return;
     return;
    }
   if(((! (! (((((! (! ((! (((! (! (! (! (! ((! (! (((injectionSwitch.x > injectionSwitch.y))))) || ((bool((bvec3(bvec4(bvec3((bool(bvec2(injectionSwitch.x > (min(injectionSwitch.y, injectionSwitch.y)), (! (((! (false))) && ((injectionSwitch.x < injectionSwitch.y))))))), false, true), ((injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))))))))
    {
     if((((((mat2(1.0) * (vec2(mat3x2(injectionSwitch, length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0))))).x > injectionSwitch.y))))
      return;
     return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > (float((transpose(transpose(mat3x2(injectionSwitch.y, sqrt(1.0), 0.0, 1.0, 1.0, 1.0))))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   atomicStore(buf[((min(0u, 0u)) ^ ((0u ^ ((false ? (workgroup_size) : ((gid + 1))))))) % ((((((injectionSwitch.x < injectionSwitch.y)) ? total_threads : ((uint(uvec2(uint((((uvec2(0u, ((0u) | (0u))) ^ (uvec2((workgroup_size), 0u)))) | (uvec2((workgroup_size), 0u)))), 0u))))))) | (((((((((((injectionSwitch.x > injectionSwitch.y)) || (! (! ((bool(bvec3(injectionSwitch.x < ((max(max((max((min(injectionSwitch, injectionSwitch)), injectionSwitch)), (max(injectionSwitch, injectionSwitch))), max((max((min(injectionSwitch, injectionSwitch)), injectionSwitch)), (max(injectionSwitch, injectionSwitch)))))).y, true, false)))))))))) ? total_threads : (workgroup_size))))) - (0u & 151103u)))], uint(2), 4, (0 | ((0 | (64)))), 4);
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    return;
   subgroupAll((((false || (true))) && ((injectionSwitch.x < injectionSwitch.y))));
   if((((false) || false)))
    return;
   if((((((! (! ((bool(bvec4((((bool(bvec2(bool(bool((! (! (true && ((injectionSwitch.x > (float(mat3x2(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 1.0)))))))))), true))))) || ((false) || false), true, false, false)))))))))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      return;
     if((((((injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      return;
     return;
     if((false))
      return;
     if((false))
      return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        {
         if(((! ((false || (! ((false || (true && ((false)))))))))))
          return;
         return;
        }
       if(((((((! (! (injectionSwitch.x > injectionSwitch.y)))))) && true)))
        return;
       return;
       if((false))
        return;
      }
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     if((false))
      {
       if((false))
        return;
       if((false))
        {
         if((((injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
       if((false))
        return;
       if((false))
        return;
      }
     return;
    }
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if((((false) && true)))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > (((((mix(vec2((0.4), (false ? (pow(injectionSwitch, injectionSwitch)) : injectionSwitch)[1]), vec2((min((clamp((false ? (pow(injectionSwitch, injectionSwitch)) : injectionSwitch)[0], (false ? (pow(injectionSwitch, injectionSwitch)) : injectionSwitch)[0], (false ? (pow(injectionSwitch, injectionSwitch)) : injectionSwitch)[0])), (max((false ? (pow(injectionSwitch, injectionSwitch)) : injectionSwitch)[0], (false ? (pow(injectionSwitch, injectionSwitch)) : injectionSwitch)[0])))), (- 354.636)), bvec2(true, false)))))) * abs(vec2(1.0, 1.0))).y))))
    return;
   return;
  }
 if((((! ((! (! (! ((bool(bool((false))))))))))) && true))
  return;
 if((false))
  {
   if(((bool(bool(((! (! (bool((bvec2(bvec4((bvec2((bvec2(bvec2(bvec2(bvec2(false, true))))))), false, ((injectionSwitch.x < injectionSwitch.y)))))))))))))))
    return;
   return;
   if(((((false || (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if((false))
    return;
  }
 if((false))
  return;
 if((false))
  return;
 if((false))
  {
   if((false))
    return;
   return;
   if((false))
    return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    return;
   if(((((((bool(bvec2(((((true && ((((injectionSwitch.x > injectionSwitch.y))) && true))) && true)), ((injectionSwitch.x > injectionSwitch.y))))))) || false)) || false))
    {
     if(((true && ((bool(bvec2(false, true)))))))
      return;
     if((false))
      return;
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((! (! ((false)))))
    return;
   if((false))
    {
     if((false))
      return;
     if((false))
      return;
     return;
    }
   return;
  }
 if((false))
  {
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(((! ((((! ((! (! (! (! (((injectionSwitch.x > injectionSwitch.y))))))))) && true))))))
    {
     if((false))
      return;
     if((((false) && true)))
      return;
     if((false))
      {
       if((((injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((false))
      return;
     if((((((injectionSwitch.x > injectionSwitch.y)))) && true))
      return;
     return;
     if(((bool(bvec4(false, false, ((injectionSwitch.x > injectionSwitch.y)), false)))))
      {
       if((false))
        return;
       return;
      }
    }
   if((false))
    {
     if(((bool(bool(false)))))
      return;
     return;
    }
   if((((injectionSwitch.x > (1.0 * ((mix(float(injectionSwitch.y), float((- 220.641)), bool(false)))))))))
    return;
   barrier();
   if((((injectionSwitch.x > (clamp((length(0.0) + (injectionSwitch.y)), (length(0.0) + (injectionSwitch.y)), (length(0.0) + (mix(float((- 353.264)), float((injectionSwitch.y)), bool(true))))))))))
    return;
   if((((injectionSwitch.x > injectionSwitch.y))))
    {
     if((false))
      return;
     return;
    }
   if(((((bool(bool(false))) && true))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if((false))
    return;
   if((false))
    return;
   if(((((((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, (((bool((bvec3(bvec4(bvec3(true, true, true), false))))) && true)), false)))) && true)))))
    {
     if((((injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(((! (! (false)))))
  return;
}
