#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_28 {
 uvec4 _f0;
} ;

struct _GLF_struct_27 {
 uvec2 _f0;
} ;

struct _GLF_struct_26 {
 int _f0;
 uint workgroup_id;
 mat4 _f1;
 bvec4 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_25 {
 mat2x3 _f0;
 mat2x3 _f1;
 bool _f2;
 bvec2 _f3;
 bvec3 _f4;
 uvec3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_29 {
 ivec3 _f0;
 _GLF_struct_25 _f1;
 _GLF_struct_26 _f2;
 _GLF_struct_27 _f3;
 _GLF_struct_28 _f4;
 int _f5;
 mat3 _f6;
} ;

struct _GLF_struct_23 {
 uvec2 _f0;
 uvec3 _f1;
 mat2x4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_22 {
 vec2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_21 {
 mat2x3 _f0;
 uvec3 _f1;
 bvec2 _f2;
 mat3x4 _f3;
 vec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_20 {
 mat3x2 _f0;
 bvec2 _f1;
 int _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_24 {
 bvec2 _f0;
 _GLF_struct_20 _f1;
 _GLF_struct_21 _f2;
 bvec2 _f3;
 vec2 _f4;
 _GLF_struct_22 _f5;
 _GLF_struct_23 _f6;
} ;

struct _GLF_struct_18 {
 mat4x3 _f0;
} ;

struct _GLF_struct_19 {
 _GLF_struct_18 _f0;
} ;

struct _GLF_struct_30 {
 vec2 _f0;
 _GLF_struct_19 _f1;
 _GLF_struct_24 _f2;
 mat2x3 _f3;
 _GLF_struct_29 _f4;
} ;

struct _GLF_struct_15 {
 mat3x4 _f0;
 mat3 _f1;
 int _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_14 {
 float _f0;
 ivec2 _f1;
 vec2 _f2;
 bvec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_13 {
 bvec3 _f0;
 uvec2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_16 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 mat2x4 _f2;
 mat4x2 _f3;
 mat2x3 _f4;
 _GLF_struct_15 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_11 {
 ivec2 _f0;
 bvec3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_10 {
 bvec3 _f0;
 mat2x4 _f1;
 vec2 _f2;
 mat2x4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 uvec4 _f1;
 ivec3 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_11 _f4;
} ;

struct _GLF_struct_8 {
 ivec2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_7 {
 vec4 _f0;
 mat3x2 _f1;
 bool _f2;
 mat4 _f3;
 ivec2 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_9 {
 mat3x2 _f0;
 uint _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 mat2 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_6 {
 uint _f0;
 mat3x2 _f1;
 vec2 _f2;
 mat4x3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 vec2 _f1;
 bvec2 _f2;
 int _f3;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_2 {
 uint _f0;
 bvec3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 mat4x2 _f1;
 vec3 _f2;
 ivec3 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_4 _f5;
 bool _f6;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 ivec2 _f1;
 uint _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_17 {
 _GLF_struct_1 _f0;
 uint next_virtual_gid;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_12 _f4;
 _GLF_struct_16 _f5;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))), true))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec2(bvec4(bvec2(false, false), true, true))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))), true))))), true))))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-83490))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) / (1 | 0))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, 0 | (0 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec4(int(1), 1, (1 ^ 0), 0), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED((-23155 * ivec4(-23060, -49538, 46443, -71321))) : _GLF_IDENTITY(ivec4(int(1), 1, (1 ^ 0), 0), max(ivec4(int(1), 1, (1 ^ 0), 0), ivec4(int(1), 1, (1 ^ 0), 0)))))))))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, (false) || false)), true, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, (false) || false)), true, true), false)))))))))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-961.950))), injectionSwitch.x)) > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED((-57717 / 55559)) : _GLF_IDENTITY(int(0), 0 + (int(0))))))) >> _GLF_IDENTITY(int(0), int(0))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-51010 & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         for(int _injected_loop_counter = ((1 & 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((85671 - 3739) & 0)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0) & -81852)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || (_GLF_IDENTITY((false) && true, bool(bvec4((false) && true, true, true, false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(52.33), _GLF_FUZZED(-82.66)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec2(1.0, 1.0)), dot(vec2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec2(1.0, 1.0))), 0.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec2(1.0, 1.0)), dot(vec2(determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (mat2(0.0, 0.0, 0.0, 0.0)) * mat2(1.0))), 0.0), vec2(1.0, 1.0))), 0.0), transpose(transpose(mat2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec2(1.0, 1.0)), dot(vec2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.0)), float(1.0), bool(true)))) - 0.0), 1.0))), 0.0)))))), mat2(1.0) * (mat2(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0), vec2(1.0, 1.0)), dot(vec2(determinant(mat2(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec2(1.0, 1.0))), 0.0)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0, round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), vec2(1.0, 1.0), vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, log(1.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), (float(mat2x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED((-9146.4771 / -4565.4858)) : 1.0)), log(1.0), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6587.3905)), float(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0)))), bool(true))), 1.0))) / 1.0)))))))), 0.0, 0.0, 1.0))), injectionSwitch)).x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 ^ 0) & 1)); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), true, true, false)))))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       for(int _injected_loop_counter = (0 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (11939 * 83337))); _injected_loop_counter --)
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false)))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x < injectionSwitch.y))))))))))
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(-8760))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? _GLF_IDENTITY(int(5), (int(5)) << 0) : _GLF_FUZZED(-92286))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 0.0, exp(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))), 1.0, 1.0))).x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(vec2(1.0), _GLF_struct_19(_GLF_struct_18(mat4x3(1.0))), _GLF_struct_24(bvec2(true), _GLF_struct_20(mat3x2(1.0), bvec2(true), _GLF_IDENTITY(1, max(1, 1)), mat3x2(1.0)), _GLF_struct_21(mat2x3(1.0), uvec3(1u), bvec2(true), mat3x4(1.0), vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-13.73)))), uvec3(1u)), bvec2(true), vec2(1.0), _GLF_struct_22(vec2(1.0), mat4x2(1.0)), _GLF_struct_23(uvec2(1u), uvec3(1u), mat2x4(1.0), vec2(1.0))), mat2x3(1.0), _GLF_struct_29(_GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), ivec3(ivec4(ivec3(1), 0)))) | (ivec3(1))), _GLF_struct_25(mat2x3(1.0), mat2x3(1.0), true, bvec2(true), bvec3(_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, max(1u, 1u))))), ~ (~ (uvec3(1u)))), mat4x3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-76.67, min(-76.67, _GLF_IDENTITY(-76.67, mix(float(-76.67), float(_GLF_FUZZED(-81.18)), bool(false)))))))))), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-85.35, mix(float(_GLF_FUZZED(-354.617)), float(-85.35), bool(true)))))), 1.0, 0.0, 0.0, 1.0, cos(_GLF_IDENTITY(0.0, min(0.0, 0.0))), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(3.3), mix(float(_GLF_FUZZED((vec4(5725.6579, -98.52, -2287.7930, -2323.0832).w / 50.21))), float(_GLF_FUZZED(3.3)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(0.0), bool(true))))), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), vec2(1.0, 0.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(99.63)), float(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (_GLF_IDENTITY(true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161), clamp(true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161), _GLF_IDENTITY(true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161), (false ? _GLF_FUZZED(81.87) : true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161))), true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))))), (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0))), bool(true)))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), (true ? vec3(1.0, 1.0, 0.0) : _GLF_FUZZED(vec3(5712.3237, 1.1, -1.2)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), (normalize(vec3(1.0, 1.0, 1.0))) * mat3(1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0), mat3(mat4x3(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.35))), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / 1.0)), float(_GLF_FUZZED((+ -4827.6997))), bool(false))), 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), (normalize(vec3(1.0, 1.0, 1.0))) * mat3(1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 0.0), vec2(mat4(vec2(1.0, 0.0), 0.0, log(1.0), 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 0.0))))), 1.0))))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(99.63), clamp(_GLF_FUZZED(99.63), _GLF_IDENTITY(_GLF_FUZZED(99.63), (false ? _GLF_FUZZED(-371.626) : _GLF_FUZZED(99.63))), _GLF_IDENTITY(_GLF_FUZZED(99.63), max(_GLF_FUZZED(99.63), _GLF_FUZZED(99.63)))))), float(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-85.35), mix(float(_GLF_FUZZED((+ 5.7))), float(true ? 1.0 : _GLF_FUZZED(-85.35)), bool(true))))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), max(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0))), bool(true)))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.7)))), float(_GLF_FUZZED(3310.3411)), bool(false))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))), float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.7)))), float(_GLF_FUZZED(3310.3411)), bool(false))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.7)))), float(_GLF_FUZZED(3310.3411)), bool(false))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))), clamp(_GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.7)))), float(_GLF_FUZZED(3310.3411)), bool(false))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.7)))), float(_GLF_FUZZED(3310.3411)), bool(false))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.7)))), float(_GLF_FUZZED(3310.3411)), bool(false))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.7)))), float(_GLF_FUZZED(3310.3411)), bool(false))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))), max(_GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.7)))), float(_GLF_FUZZED(3310.3411)), bool(false))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.7)))), float(_GLF_FUZZED(3310.3411)), bool(false))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))))))), determinant(mat4(1.0, 0.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, cos(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), clamp(_GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), vec3(1.0, 1.0, 1.0) * (normalize(vec3(1.0, 1.0, 1.0)))))), mix(_GLF_IDENTITY(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), (true ? float(round(length(normalize(vec3(1.0, 1.0, 1.0))))) : _GLF_FUZZED(-92.98))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(_GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(_GLF_IDENTITY(false, (false) && true)))), 0.0), (vec2(_GLF_IDENTITY(round(length(normalize(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(16.17), (_GLF_FUZZED(16.17)) / 1.0)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0), mix(_GLF_IDENTITY(vec3((vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))), mix(float(_GLF_FUZZED((3.3 * -9.0))), float(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), bool(true))))), 1.0))[0], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[1], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[2]), _GLF_IDENTITY(vec3(mat3x2(_GLF_IDENTITY(vec3((vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))), mix(float(_GLF_FUZZED((3.3 * -9.0))), float(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), bool(true))))), 1.0))[0], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[1], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[2]), (vec3((vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))), mix(float(_GLF_FUZZED((3.3 * -9.0))), float(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), bool(true))))), 1.0))[0], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[1], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[2])) - vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0)), (vec3(mat3x2(_GLF_IDENTITY(vec3((vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))), mix(float(_GLF_FUZZED((3.3 * -9.0))), float(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), bool(true))))), 1.0))[0], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[1], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[2]), (vec3((vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))), mix(float(_GLF_FUZZED((3.3 * -9.0))), float(clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), bool(true))))), 1.0))[0], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[1], (vec3(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), clamp(_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), min(mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)))), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false)), mix(float(1.0), float(_GLF_FUZZED(16.17)), bool(false))))), 1.0))[2])) - vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0))) / vec3(1.0, 1.0, 1.0))), vec3(_GLF_FUZZED(-558.613), _GLF_FUZZED(2.3), _GLF_FUZZED(-770.892)), bvec3(false, false, false)))))), mix(float(round(length(normalize(vec3(1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-7.3)), bool(false))), 0.0)) + vec2(0.0, 0.0)), vec2(1.0, 0.0))))), 1.0)), mix(float(_GLF_FUZZED(99.63)), float(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_IDENTITY(_GLF_FUZZED(1698.6161), _GLF_IDENTITY(1.0 * (_GLF_FUZZED(1698.6161)), max(1.0 * (_GLF_FUZZED(1698.6161)), 1.0 * (_GLF_FUZZED(1698.6161)))))))), (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (true ? _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(162.726), _GLF_FUZZED(vec3(-3.0, 1650.9671, -29.46).z), (vec3(1.0, 1.0, 1.0))[2]), vec3((vec3(1.0, 1.0, 1.0))[0], (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(8.6)), bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) : _GLF_FUZZED(vec3(-0.8, 988.448, 1.3)))), vec3(1.0, 1.0, 1.0))), vec3(1.0, 1.0, 1.0)))))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0))), bool(true)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), _GLF_IDENTITY(abs(0.0), float(mat4x3(abs(0.0), 0.0, 0.0, sqrt(0.0), 0.0, 0.0, length(0.0), 0.0, tan(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(99.63), min(_GLF_FUZZED(99.63), _GLF_FUZZED(99.63))), (_GLF_IDENTITY(_GLF_FUZZED(99.63), min(_GLF_FUZZED(99.63), _GLF_FUZZED(99.63)))) - length(vec4(0.0, 0.0, 0.0, 0.0)))), float(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (mat2(1.0, 0.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(_GLF_IDENTITY(1698.6161, float(vec3(_GLF_IDENTITY(1698.6161, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)))))), 1.0, 0.0)))))))) * _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0))), float(_GLF_FUZZED(2598.5725)), bool(false)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))))), (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0))), bool(true))), clamp(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0))), 1.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(99.63), min(_GLF_FUZZED(99.63), _GLF_FUZZED(99.63)))), float(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), _GLF_IDENTITY((mat2(1.0, 0.0, 1.0, 1.0)), (true ? (mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(mat2(3.7, 678.643, 4509.3175, -4282.4983)))) / mat2(1.0, 1.0, 1.0, 1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(_GLF_IDENTITY(1698.6161, float(vec3(_GLF_IDENTITY(1698.6161, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)))))), 1.0, 0.0)))))))) * _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0))), float(_GLF_FUZZED(2598.5725)), bool(false)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))))), (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(_GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(99.63), min(_GLF_FUZZED(99.63), _GLF_FUZZED(99.63)))), float(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(fma(35.65, -1.6, 770.836)) : 1.0)), 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (mat2(1.0, 0.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(_GLF_IDENTITY(1698.6161, float(vec3(_GLF_IDENTITY(1698.6161, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)))))))), 1.0, 0.0)))))))) * _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0))), float(_GLF_FUZZED(2598.5725)), bool(false)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))))), (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0))), bool(true))), (true ? _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), max(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))), vec2(1.0, 0.0))), 1.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(99.63), min(_GLF_FUZZED(99.63), _GLF_FUZZED(99.63)))), float(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (mat2(1.0, 0.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(_GLF_IDENTITY(1698.6161, float(vec3(_GLF_IDENTITY(1698.6161, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)))))), 1.0, 0.0)))))))) * _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0))), float(_GLF_FUZZED(2598.5725)), bool(false)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))))), (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0))), bool(true))) : _GLF_FUZZED(308.200))), _GLF_IDENTITY(_GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(99.63), min(_GLF_FUZZED(99.63), _GLF_FUZZED(99.63)))), float(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(_GLF_IDENTITY(mat2(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0), (_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (mat2(1.0, 0.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(_GLF_IDENTITY(1698.6161, float(vec3(_GLF_IDENTITY(1698.6161, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(_GLF_IDENTITY(1698.6161, (true ? 1698.6161 : _GLF_FUZZED(asinh(-0.8)))), 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)))))), 1.0, 0.0)))))))) * _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0))), float(_GLF_FUZZED(2598.5725)), bool(false)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))))), (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0))), bool(true))), (true ? _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, 1.0, cos(0.0), abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), mix(float(_GLF_FUZZED(3.8)), float(_GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), min(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))))), bool(true))), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(99.63), min(_GLF_FUZZED(99.63), _GLF_FUZZED(99.63)))), float(float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(length(vec4(-7.3, 5127.4992, 8593.8344, -852.551))) : 1.0)), 0.0, 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, 1.0), (mat2(1.0, 0.0, 1.0, 1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(1698.6161, float(vec3(_GLF_IDENTITY(1698.6161, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)))))), 1.0, 0.0)))), max(_GLF_FUZZED(_GLF_IDENTITY(1698.6161, float(vec3(_GLF_IDENTITY(1698.6161, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)))))), 1.0, 0.0)))), _GLF_FUZZED(_GLF_IDENTITY(1698.6161, float(vec3(_GLF_IDENTITY(1698.6161, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(1698.6161, 1.0, 0.0), (vec3(1698.6161, 1.0, 0.0)) / vec3(1.0, 1.0, 1.0)))))), 1.0, 0.0)))))))))) * _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0))), float(_GLF_FUZZED(2598.5725)), bool(false)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, 1.0)), (true ? float(mat2(1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0, 1.0)) : _GLF_FUZZED(1698.6161)))))), (true ? 1.0 : _GLF_FUZZED(-85.35))), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), cos(0.0), abs(0.0), _GLF_IDENTITY(dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0)), dot(vec2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0), vec2(1.0, 0.0))), 1.0))), bool(true))) : _GLF_FUZZED(383.682)))))))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), min(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0)))))), 1.0))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.4) : _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0, 1.0))))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 1.0))), 1.0, 1.0)))), _GLF_struct_26(1, gl_WorkGroupID.x, mat4(1.0), bvec4(true), vec4(1.0)), _GLF_struct_27(uvec2(1u)), _GLF_struct_28(uvec4(1u)), 1, mat3(1.0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_30._f4._f2.workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     do
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_1(_GLF_struct_0(vec3(1.0), ivec2(1), 1u, mat2x4(1.0)), mat4(1.0)), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, 0 + (1))))) % subgroup_size), _GLF_struct_5(_GLF_struct_2(1u, bvec3(true), uvec3(1u)), mat4x2(1.0), vec3(1.0), ivec3(1), _GLF_struct_3(uvec4(1u), mat4x3(1.0)), _GLF_struct_4(bvec2(true), vec2(1.0), bvec2(true), 1), true), _GLF_struct_6(1u, mat3x2(1.0), vec2(1.0), mat4x3(1.0), vec3(1.0)), _GLF_struct_9(mat3x2(1.0), 1u, _GLF_struct_7(vec4(1.0), mat3x2(1.0), true, mat4(1.0), _GLF_IDENTITY(ivec2(1), max(ivec2(1), ivec2(1))), bvec2(true)), _GLF_struct_8(ivec2(1), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) - uvec4(0u, 0u, 0u, 0u))), mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(323.918) : 1.0))))), mat2x3(1.0)), _GLF_struct_12(bvec4(true), uvec4(1u), ivec3(1), _GLF_struct_10(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))), ! (! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), false || (! (true)))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))))))), mat2x4(1.0), _GLF_IDENTITY(vec2(1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0), max(_GLF_IDENTITY(vec2(1.0), (true ? vec2(1.0) : _GLF_FUZZED(vec2(-8.1, -56.39)))), _GLF_IDENTITY(vec2(1.0), (vec2(1.0)) * _GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat2x4(vec2(1.0, 1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat2x4(mat2x4(mat2x4(vec2(1.0, 1.0), 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0))))))))), max(vec2(1.0), vec2(1.0))), vec2(1.0))), mat2x4(1.0), ivec4(_GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_struct_11(ivec2(1), bvec3(true), bvec3(true))), _GLF_struct_16(_GLF_struct_13(bvec3(true), uvec2(1u), mat3(1.0)), _GLF_struct_14(1.0, ivec2(1), _GLF_IDENTITY(vec2(1.0), (true ? _GLF_IDENTITY(vec2(1.0), clamp(vec2(1.0), vec2(1.0), vec2(1.0))) : _GLF_FUZZED(injectionSwitch))), bvec3(true), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), min(1.0, 1.0)))), mat2x4(1.0), mat4x2(1.0), mat2x3(1.0), _GLF_struct_15(mat3x4(1.0), mat3(1.0), 1, mat4x3(1.0)), mat4x3(1.0)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false))) && true))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   buf[virtual_gid] = 1;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 do
  {
   buf[virtual_gid] = 1;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))
      {
       buf[_GLF_struct_replacement_17.next_virtual_gid] = 2;
       do
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           do
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true))))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     barrier();
                                    }
                                  }
                                }
                               barrier();
                              }
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))))))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)) & 1, max(1 & 1, _GLF_IDENTITY(1, min(1, 1)) & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                        {
                                         barrier();
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             barrier();
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                         do
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 & -19510) ^ 1)); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3281.3568), _GLF_FUZZED(16.64)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(exp(223.978)) : (injectionSwitch)[1]))), bvec2(true, true))).x > injectionSwitch.y)) || (false))));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))) || false))))
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           barrier();
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(bool(bvec2(bool(bool(true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(bool(bool(true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))), (injectionSwitch.x < injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), min(int(0), int(0))), _GLF_IDENTITY(int(0), (int(0)) << 0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                              {
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     do
                                      {
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
                                    }
                                  }
                                 barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = (13212 & _GLF_IDENTITY(0, (0) | (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               do
                                {
                                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                                  {
                                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                    }
                                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                                      barrier();
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(1), int(1))), ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(1), int(1)))) ^ 0) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               barrier();
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
                          barrier();
                         barrier();
                        }
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(0), int(0))) | 0), ~ (~ (((0 << _GLF_IDENTITY(int(0), int(0))) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -45132)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(5), int(5))) ^ (1))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         subgroupAll(false);
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           buf[_GLF_struct_replacement_17.next_virtual_gid] = 2;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0), mat3(mat4(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
                                                {
                                                }
                                               else
                                                {
                                                 barrier();
                                                 do
                                                  {
                                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                    barrier();
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-735.810)), float(injectionSwitch.y), bool(true)))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-735.810)), float(injectionSwitch.y), bool(true))))))))))));
                                                 if(_GLF_DEAD(false))
                                                  barrier();
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                           else
                                            {
                                            }
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     barrier();
                                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             barrier();
                                            }
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               barrier();
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               if(_GLF_DEAD(false))
                                {
                                 do
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))));
                             for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     subgroupAll(true);
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-5167 & (1 ^ 1))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(71.77))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(71.77))))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               for(int _injected_loop_counter = ((1 ^ 1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> (0 | 0))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))))));
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = (1 & (_GLF_IDENTITY(1, min(1, 1)) & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                    {
                                     barrier();
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                             barrier();
                            }
                           do
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4))))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     do
                                      {
                                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           barrier();
                                          }
                                         barrier();
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         do
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       do
                                        {
                                         do
                                          {
                                           barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                     do
                                      {
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             barrier();
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & ivec2(-86474, 21567).t)); _injected_loop_counter --)
                                              {
                                               barrier();
                                              }
                                            }
                                           barrier();
                                          }
                                         else
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                              {
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 barrier();
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_DEAD(false))
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     barrier();
                                                    }
                                                  }
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                 if(_GLF_DEAD(false))
                                                  {
                                                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                    {
                                                     barrier();
                                                    }
                                                  }
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         if(_GLF_DEAD(false))
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                           for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                            {
                                             barrier();
                                            }
                                          }
                                        }
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             barrier();
                                            }
                                           else
                                            {
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
                              barrier();
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (_GLF_IDENTITY(int(6), (int(6)) >> 0))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) << 0), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))), 1 * (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))))) | 0))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              barrier();
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9271.2107, -269.911)) : injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9271.2107, -269.911)) : injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9271.2107, -269.911)) : injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9271.2107, -269.911)) : injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, true)))))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-75963))), 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(267.700)), bool(false))) > injectionSwitch.y))))
                            barrier();
                          }
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || (_GLF_IDENTITY(true, (true) && true)))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
                                        barrier();
                                       barrier();
                                      }
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         else
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(true, (true) && true))))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
          }
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0), vec4(1.0, determinant(mat4(0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, cos(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))))), 0.0)), 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0), vec4(1.0, determinant(mat4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2(0.0, 1.0, exp(length(vec2(0.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0))))), max(float(mat2(0.0, 1.0, exp(length(vec2(0.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0))))), float(mat2(0.0, 1.0, exp(length(vec2(0.0, 0.0))), _GLF_IDENTITY(dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0)))))))), 0.0)), 0.0, 1.0)), min(_GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0), vec4(1.0, determinant(mat4(0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), float(mat4x2(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.4)))), vec4(1.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), sqrt(0.0), _GLF_IDENTITY(determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, sqrt(0.0) + (0.0)), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), min(determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - 0.0), 0.0, 0.0, 0.0, 1.0, 1.0))), dot(vec4(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0), vec4(1.0, determinant(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 1.0, sqrt(0.0), 1.0), (vec4(0.0, 1.0, sqrt(0.0), 1.0)) * mat4(1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), transpose(transpose(transpose(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))), 0.0, 1.0))))), determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, abs(1.0), 0.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(151902u))), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), exp(0.0), abs(0.0))), max(vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0), vec4(1.0, determinant(mat4(0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(8.3) : 0.0)))), min(0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), sqrt(0.0), 0.0, 1.0, 0.0, 0.0), (mat2x4(0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), sqrt(0.0), 0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, cos(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))))), 0.0)), 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0), vec4(1.0, determinant(mat4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), min(float(mat4x2(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), float(mat4x2(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), min(_GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0), vec4(1.0, determinant(mat4(0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), float(mat4x2(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.4)))), vec4(1.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), sqrt(0.0), determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) * 1.0), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0))), dot(vec4(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0), vec4(1.0, determinant(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2(0.0, abs(1.0), 0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), sqrt(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)))), (false ? _GLF_FUZZED(-4.6) : float(mat2(0.0, abs(1.0), 0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), sqrt(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)))))))) - determinant(mat2(determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))))))), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), transpose(transpose(transpose(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))), 0.0, 1.0))))), determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, abs(1.0), 0.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(151902u))), bool(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), sin(0.0), 1.0))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), sin(0.0), 1.0))) > injectionSwitch.y))))))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), exp(0.0), abs(0.0))), vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0), vec4(1.0, determinant(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, cos(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))))), 0.0), transpose(transpose(mat4(0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, cos(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))))), 0.0))))), 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0), vec4(1.0, determinant(mat4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), min(_GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0), vec4(1.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), float(mat4x2(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6.4)))), vec4(1.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0)), sqrt(0.0), _GLF_IDENTITY(determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(525.386)), bool(false))), 0.0, 0.0, 0.0, 1.0, 1.0))), dot(vec4(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0), vec4(1.0, determinant(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), transpose(transpose(transpose(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))), 0.0, 1.0))))), determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, abs(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, 0.0, 0.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), max(_GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0))), _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), clamp(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0)))))), mix(float(1.0), float(_GLF_FUZZED(float(151902u))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), exp(0.0), abs(0.0)))))).y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(int(_GLF_IDENTITY(int(5), int(5)))))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), 0 + ((_injected_loop_counter ++))) >> 0)) ^ 0))
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0)))))), int(int(_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0)))))), 0 | (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}
