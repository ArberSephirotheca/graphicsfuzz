#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 bvec2 _f0;
 vec3 _f1;
 mat4x2 _f2;
 vec3 _f3;
 bvec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_3 {
 bvec2 _f0;
 float _f1;
 bvec3 _f2;
 uvec4 _f3;
 bvec4 _f4;
 mat2x3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 mat3x2 _f1;
 mat2 _f2;
 int _f3;
 ivec3 _f4;
 mat4x2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 mat4 _f1;
 int _f2;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 mat2 _f1;
 bvec4 _f2;
 vec3 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 _GLF_struct_0 _f1;
 vec3 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 mat4x2 _f1;
 uint subgroup_id;
 _GLF_struct_6 _f2;
 uvec3 _f3;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_4(mat3x2(1.0), _GLF_struct_0(bvec2(true), mat2(1.0), bvec4(true), vec3(1.0), ivec2(1)), vec3(1.0), _GLF_struct_1(uvec3(1u), mat4(1.0), 1), _GLF_struct_2(uvec4(1u), mat3x2(1.0), mat2(1.0), 1, ivec3(1), mat4x2(1.0), mat3x4(1.0)), _GLF_struct_3(bvec2(true), 1.0, bvec3(true), uvec4(1u), bvec4(true), mat2x3(1.0), ivec2(1))), mat4x2(1.0), gl_SubgroupID, _GLF_struct_6(_GLF_struct_5(bvec2(true), vec3(1.0), mat4x2(1.0), vec3(1.0), bvec4(true), bvec2(true)), vec3(1.0)), uvec3(1u));
 uint subgroup_size = gl_SubgroupSize;
 uint gid = gl_GlobalInvocationID.x;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint total_threads = num_workgroup * workgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   buf[gid] = 1;
  }
 else
  {
  }
 atomicStore(buf[(gid + 1) % total_threads], uint(2), 4, 64, 4);
}
