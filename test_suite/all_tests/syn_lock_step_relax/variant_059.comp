#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 ivec2 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_9 {
 vec3 _f0;
 mat2 _f1;
 vec2 _f2;
 uvec2 _f3;
 uvec3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_8 {
 float _f0;
 mat2 _f1;
 bvec2 _f2;
 uvec4 _f3;
 vec3 _f4;
 uvec3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_7 {
 float _f0;
 uvec4 _f1;
 vec3 _f2;
 uvec4 _f3;
 mat2x3 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 _GLF_struct_7 _f1;
 uvec3 _f2;
 mat4 _f3;
 _GLF_struct_8 _f4;
 _GLF_struct_9 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_6 {
 uint workgroup_id;
 ivec3 _f0;
} ;

struct _GLF_struct_4 {
 int _f0;
 mat2x3 _f1;
 uvec2 _f2;
 mat2x3 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 bool _f1;
 vec3 _f2;
} ;

struct _GLF_struct_2 {
 uint _f0;
 float _f1;
 float _f2;
 uvec3 _f3;
 ivec3 _f4;
 uvec3 _f5;
 uint _f6;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 mat4x2 _f1;
 vec4 _f2;
 vec2 _f3;
 uvec2 _f4;
 mat4x3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 vec2 _f1;
 mat2x3 _f2;
 uint _f3;
 int _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 ivec3 _f2;
 mat4x2 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_12 {
 bool _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_10 _f4;
 _GLF_struct_11 _f5;
 uint _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(true, _GLF_struct_3(_GLF_struct_0(mat3(1.0), vec2(1.0), mat2x3(1.0), 1u, 1), _GLF_struct_1(mat4x3(1.0), mat4x2(1.0), vec4(1.0), vec2(1.0), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) | 0u)), mat4x3(1.0), mat2x3(1.0)), ivec3(1), mat4x2(1.0), _GLF_struct_2(1u, 1.0, 1.0, uvec3(1u), ivec3(1), uvec3(1u), 1u)), _GLF_struct_5(_GLF_struct_4(1, mat2x3(1.0), uvec2(1u), mat2x3(1.0), vec4(1.0)), true, vec3(1.0)), _GLF_struct_6(gl_WorkGroupID.x, ivec3(1)), _GLF_struct_10(mat3x2(1.0), _GLF_struct_7(1.0, uvec4(1u), vec3(1.0), uvec4(1u), mat2x3(1.0), mat2x4(1.0)), uvec3(1u), mat4(1.0), _GLF_struct_8(1.0, mat2(1.0), bvec2(true), uvec4(_GLF_IDENTITY(1u, (1u) ^ 0u)), vec3(1.0), uvec3(1u), mat3(1.0)), _GLF_struct_9(vec3(1.0), mat2(1.0), vec2(1.0), uvec2(1u), uvec3(1u), bvec4(true)), mat2(1.0)), _GLF_struct_11(ivec2(1), mat4x3(1.0), mat2x4(1.0)), 1u);
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_12._f3.workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u) + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
}
