#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 ivec2 _f0;
 vec3 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_0 {
 int _f0;
 mat2x4 _f1;
 int _f2;
 uvec3 _f3;
 mat4x3 _f4;
 mat2x4 _f5;
 bool _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat2 _f2;
 uint workgroup_id;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 _GLF_struct_2 _f3;
 mat4 _f4;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(vec2(1.0), bvec4(_GLF_IDENTITY(true, (true) && true)), mat2x4(1.0), _GLF_struct_2(_GLF_struct_0(1, mat2x4(1.0), 1, uvec3(1u), mat4x3(1.0), mat2x4(1.0), true), _GLF_struct_1(ivec2(1), vec3(1.0), mat3x4(1.0)), mat2(1.0), gl_WorkGroupID.x), mat4(1.0));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_3._f3.workgroup_id, min(_GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_3._f3.workgroup_id, 1u * (workgroup_size * _GLF_struct_replacement_3._f3.workgroup_id)), _GLF_IDENTITY(workgroup_size * _GLF_struct_replacement_3._f3.workgroup_id, (workgroup_size * _GLF_struct_replacement_3._f3.workgroup_id) | 0u)));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf = virtual_gid;
 subgroupAllEqual(buf);
}
