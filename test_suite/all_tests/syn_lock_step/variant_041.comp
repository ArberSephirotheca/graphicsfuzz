#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) + 0.0), injectionSwitch.x))), ((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 1 * (_GLF_IDENTITY(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))), ~ (_GLF_IDENTITY(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-0.1)), bool(false))), 0.0, 1.0, 1.0, 0.0, 1.0)))))), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))), clamp(_GLF_IDENTITY(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))), ivec3(ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))))))), ~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))) - 0.0), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).x)), 0, 1))))))), _GLF_IDENTITY(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))), ivec3(_GLF_IDENTITY(ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))))), (ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))))) | (ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))))))))))))))), ~ (_GLF_IDENTITY(~ (int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))), (~ (int(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))) / 1)))))), min(_GLF_IDENTITY(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 1 * (_GLF_IDENTITY(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))), ~ (_GLF_IDENTITY(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-0.1)), bool(false))), 0.0, 1.0, 1.0, 0.0, 1.0)))))), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))), clamp(_GLF_IDENTITY(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))), ivec3(ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))))))), ~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))) - 0.0), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).x)), 0, 1))))))), _GLF_IDENTITY(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))), ivec3(_GLF_IDENTITY(ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))))), (ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))))) | (ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))))))))))))))), ~ (_GLF_IDENTITY(~ (int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))), (~ (int(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))) / 1)))))), _GLF_IDENTITY(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 1 * (_GLF_IDENTITY(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))), ~ (_GLF_IDENTITY(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-0.1)), bool(false))), 0.0, 1.0, 1.0, 0.0, 1.0)))))), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))), clamp(_GLF_IDENTITY(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))), ivec3(ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))))))), ~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))) - 0.0), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).x)), 0, 1))))))), _GLF_IDENTITY(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))), ivec3(_GLF_IDENTITY(ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))))), (ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))))))) | (ivec3(~ (ivec3(ivec3(_GLF_IDENTITY(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ~ (~ (ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))))))))))))))))), ~ (_GLF_IDENTITY(~ (int(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))), (~ (int(ivec3(1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))) / 1)))))))))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 | (2))) / 1), 0), ~ _GLF_IDENTITY((~ (ivec2(2, 0))), ((~ (ivec2(2, 0)))) / ivec2(1, 1)))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(47835, ~ (~ (47835))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(47835, ~ (~ _GLF_IDENTITY((47835), ~ (~ ((47835)))))), int(int(_GLF_IDENTITY(47835, ~ (~ (47835)))))), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ ((0 >> _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))), 0)))) : int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec3(2, 1, 1)), ~ (~ (int(ivec3(2, 1, 1)))))), 0), ~ (~ (ivec2(2, 0))))))))), int(2)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(bool(false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), false)), (bool(_GLF_IDENTITY(bvec3(bool(false), false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec3(bvec3(bool(false), false, false)))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec3(bvec3(bool(false), false, false)))), false)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec3(bvec3(bool(false), false, false)))), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bool(false), false, false), bvec3(bvec3(bvec3(bool(false), false, false)))), false)))))))), true)))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true))), false, false)), (bool(bvec3(bool(false), false, false))) || false), false || (_GLF_IDENTITY(bool(bvec3(bool(false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) && true), false), false, false)))))))), false)), (bool(bvec3(bool(false), false, false))) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint gid = gl_GlobalInvocationID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(_GLF_IDENTITY(-952.415, 1.0 * (-952.415)))), bvec2(true, false)))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))).x, mix(float(_GLF_FUZZED(860.904)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(_GLF_IDENTITY(-952.415, 1.0 * (-952.415)))), bvec2(true, false)))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))).x), bool(true))) > injectionSwitch.y, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) || false)) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(1.8), mix(float(_GLF_FUZZED(1.8)), float(_GLF_FUZZED(2.7)), bool(false))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 | (0))), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((~ (0)), ((~ (0))) - 0) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 0 | (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), (-9308 & 0), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))) - 0))], _GLF_FUZZED(-952.415)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))) | (~ (0))), (~ (0)) << 0)))))) / 1)], _GLF_IDENTITY(_GLF_FUZZED(-952.415), (_GLF_FUZZED(-952.415)) / 1.0)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, true, false)), (bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, true, false))) || false))), true)))))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((~ (0)) << 0, (0 >> _GLF_IDENTITY(int(1), int(1))) | ((~ (0)) << 0)))), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)))))) / 1)], _GLF_FUZZED(-952.415)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-1.8), (_GLF_FUZZED(-1.8)) * 1.0), _GLF_FUZZED(-855.619)), bvec2(false, false))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(_GLF_IDENTITY(-952.415, 1.0 * (-952.415)))), bvec2(true, false)))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))).x, mix(float(_GLF_FUZZED(860.904)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(_GLF_IDENTITY(-952.415, 1.0 * (-952.415)))), bvec2(true, false)))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))).x), bool(true))) > injectionSwitch.y, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) || false)) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(1.8), mix(float(_GLF_FUZZED(1.8)), float(_GLF_FUZZED(2.7)), bool(false))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 | (0))), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((~ (0)), ((~ (0))) - 0) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 0 | (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), (-9308 & 0), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))) - 0))], _GLF_FUZZED(-952.415)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))) | (~ (0))), (~ (0)) << 0)))))) / 1)], _GLF_IDENTITY(_GLF_FUZZED(-952.415), (_GLF_FUZZED(-952.415)) / 1.0)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, true, false)), (bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, true, false))) || false))), true)))))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((~ (0)) << 0, (0 >> _GLF_IDENTITY(int(1), int(1))) | ((~ (0)) << 0)))), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)))))) / 1)], _GLF_FUZZED(-952.415)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-1.8), (_GLF_FUZZED(-1.8)) * 1.0), _GLF_FUZZED(-855.619)), bvec2(false, false))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(_GLF_IDENTITY(-952.415, 1.0 * (-952.415)))), bvec2(true, false)))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))).x, mix(float(_GLF_FUZZED(860.904)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(_GLF_IDENTITY(-952.415, 1.0 * (-952.415)))), bvec2(true, false)))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))).x), bool(true))) > injectionSwitch.y, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) || false)) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(1.8), mix(float(_GLF_FUZZED(1.8)), float(_GLF_FUZZED(2.7)), bool(false))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 | (0))), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((~ (0)), ((~ (0))) - 0) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 0 | (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), (-9308 & 0), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))) - 0))], _GLF_FUZZED(-952.415)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))) | (~ (0))), (~ (0)) << 0)))))) / 1)], _GLF_IDENTITY(_GLF_FUZZED(-952.415), (_GLF_FUZZED(-952.415)) / 1.0)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, true, false)), (bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, true, false))) || false))), true)))))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((~ (0)) << 0, (0 >> _GLF_IDENTITY(int(1), int(1))) | ((~ (0)) << 0)))), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)))))) / 1)], _GLF_FUZZED(-952.415)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-1.8), (_GLF_FUZZED(-1.8)) * 1.0), _GLF_FUZZED(-855.619)), bvec2(false, false))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))), true, true), bvec3(bvec4(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(_GLF_IDENTITY(-952.415, 1.0 * (-952.415)))), bvec2(true, false)))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))).x, mix(float(_GLF_FUZZED(860.904)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]))), vec2(((injectionSwitch))[0], _GLF_FUZZED(_GLF_IDENTITY(-952.415, 1.0 * (-952.415)))), bvec2(true, false)))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))).x), bool(true))) > injectionSwitch.y, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) || false)) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(1.8), mix(float(_GLF_FUZZED(1.8)), float(_GLF_FUZZED(2.7)), bool(false))), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 | (0))), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((~ (0)), ((~ (0))) - 0) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, 0 | (1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), (-9308 & 0), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))) - 0))], _GLF_FUZZED(-952.415)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0)))) | (~ (0))), (~ (0)) << 0)))))) / 1)], _GLF_IDENTITY(_GLF_FUZZED(-952.415), (_GLF_FUZZED(-952.415)) / 1.0)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, true, false)), (bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false, true, false))) || false))), true)))))[1]), vec2(_GLF_FUZZED(-1.8), _GLF_FUZZED(-855.619)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1.8), ((injectionSwitch))[1]), vec2(((injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), clamp(~ (_GLF_IDENTITY(~ (0), _GLF_IDENTITY((~ (0)) << 0, (0 >> _GLF_IDENTITY(int(1), int(1))) | ((~ (0)) << 0)))), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)), ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0)))))) / 1)], _GLF_FUZZED(-952.415)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true)))))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-1.8), (_GLF_FUZZED(-1.8)) * 1.0), _GLF_FUZZED(-855.619)), bvec2(false, false))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))), true, true), true))), false))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     return;
    }
  }
 for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)), true)))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) + 0), 1)), (1) | 0)))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) + (_injected_loop_counter ++), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec3(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 1, 1))))), ((0 << _GLF_IDENTITY(int(6), int(6)))) | 0) + (_injected_loop_counter ++)) + (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))))))))
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(-73638) : _GLF_IDENTITY(int(5), int(ivec3(_GLF_IDENTITY(int(5), 0 | (int(5))), 0, 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) * (0))) | 0)); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint total_threads = num_workgroup * workgroup_size;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-7386)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(1.0))), 0.0, 1.0)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))), true && (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -82161)); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 buf[gid] = 1;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))), false, false)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) << 0)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         buf[(gid + 1) % total_threads] = 2;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
}
