#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 ivec3 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 int i;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.z = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.w = subgroup_size;
 uint gid = gl_GlobalInvocationID.x;
 GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.x = gid;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint total_threads = GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.y * workgroup_size;
 buf[GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.x] = 1;
 if(_GLF_IDENTITY(subgroup_local_id + 1 < GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.w, ! (! (subgroup_local_id + 1 < GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.w))))
  {
   _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_0(ivec3(1)), 0);
   atomicStore(buf[(GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.x + 1) % total_threads], uint(2), 4, 64, 0);
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     atomicStore(buf[(GLF_merged4_0_1_3_1_1_13_2_1_11_3_1_13gidnum_workgroupsubgroup_idsubgroup_size.x + 1) % total_threads], uint(_GLF_IDENTITY(2, int(ivec3(2, 0, 0)))), 4, 64, 0);
    }
  }
}
