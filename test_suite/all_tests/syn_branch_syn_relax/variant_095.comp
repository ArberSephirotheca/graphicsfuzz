#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 vec3 _f0;
} ;

struct _GLF_struct_4 {
 vec2 _f0;
 ivec2 _f1;
 uvec2 _f2;
 mat2x3 _f3;
 vec4 _f4;
 mat4x3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 bool _f1;
 vec4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 uint subgroup_size;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
 ivec3 _f1;
 uvec4 _f2;
 ivec3 _f3;
 mat4x2 _f4;
 uvec3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 mat2x3 _f1;
 int _f2;
 uint _f3;
 mat4x2 _f4;
 uint _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_2 {
 int _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_7 {
 mat3 _f0;
 _GLF_struct_2 _f1;
 vec3 _f2;
 ivec3 _f3;
 _GLF_struct_6 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(mat3(1.0), _GLF_struct_2(1, _GLF_struct_0(mat4(1.0), mat2x3(1.0), 1, 1u, mat4x2(1.0), 1u, bvec3(true)), _GLF_struct_1(ivec4(1), ivec3(1), uvec4(1u), ivec3(1), mat4x2(1.0), uvec3(1u), uvec4(1u)), mat2x3(1.0)), vec3(1.0), ivec3(1), _GLF_struct_6(mat3x4(1.0), gl_SubgroupSize, _GLF_struct_3(bvec3(true), true, vec4(1.0), vec2(1.0)), _GLF_struct_4(vec2(1.0), ivec2(1), uvec2(1u), mat2x3(1.0), vec4(1.0), mat4x3(1.0), mat4x3(1.0)), _GLF_struct_5(vec3(1.0))));
 uint gid = gl_GlobalInvocationID.x;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 buf[gid] = 1;
 if(subgroup_local_id + 1 < _GLF_struct_replacement_7._f4.subgroup_size)
  {
   atomicStore(buf[gid + 1], uint(2), 4, 64, 0);
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)))); _injected_loop_counter ++)
      {
       return;
      }
    }
   atomicStore(buf[(gid + 1) % _GLF_struct_replacement_7._f4.subgroup_size], uint(2), 4, 64, 0);
  }
 if(_GLF_DEAD(false))
  return;
}
