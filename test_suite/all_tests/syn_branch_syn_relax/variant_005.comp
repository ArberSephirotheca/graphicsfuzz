#version 460
struct _GLF_struct_3 {
 uint _f0;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 int _f1;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 mat3x2 _f1;
 int _f2;
 bvec2 _f3;
 bvec4 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 _GLF_struct_0 _f1;
 uvec2 _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_4 {
 uint subgroup_size;
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(gl_SubgroupSize, _GLF_struct_2(mat2x4(1.0), _GLF_struct_0(mat2(1.0), mat3x2(1.0), 1, bvec2(true), bvec4(true), vec4(1.0)), uvec2(1u), _GLF_struct_1(ivec3(1), 1)), _GLF_struct_3(1u));
 uint gid = gl_GlobalInvocationID.x;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint total_threads = num_workgroup * workgroup_size;
 buf[gid] = 1;
 if(subgroup_local_id + 1 < _GLF_struct_replacement_4.subgroup_size)
  {
   int i = 0;
   atomicStore(buf[(gid + 1) % total_threads], uint(2), 4, 64, 0);
  }
 else
  {
   atomicStore(buf[(gid + 1) % total_threads], uint(2), 4, 64, 0);
  }
}
