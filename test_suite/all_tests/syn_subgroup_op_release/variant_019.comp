#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))) && true))), (injectionSwitch.x > injectionSwitch.y)))) && true)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), 0 | (int(4)))) | (_GLF_IDENTITY(int(4), 0 | (int(4))))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6612.0658, 6809.1605)))).y))));
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], uint(uint(gl_NumWorkGroups[2]))))).x) | (gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, false)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))));
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true, true, true)))))), _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) && true) || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y)) && _GLF_IDENTITY((true), ((true)) || false)), true, true, true))))))) || false, true && ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) && true) || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))).x < injectionSwitch.y)) && _GLF_IDENTITY((true), ((true)) || false)), true, true, true))))))) || false))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) * 1))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)))), bool(bvec3(! ((! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)))), false, true)))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | 0u);
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))) && true)), false || (true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))) && true))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 0.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch[0])), injectionSwitch[1])).x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ float(true))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(43.04)), bvec2(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))))) + vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), (_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true)) && true))))), (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), (_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true)) && true)))))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, abs(0.0), 1.0, 0.0, 1.0)))) - 0.0)) | 0, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY(0, clamp(0, 0, 0)), clamp(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) | 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(0.0))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), (injectionSwitch)[0])) : _GLF_FUZZED(7.5))), _GLF_FUZZED((- 2109.9944))), vec2(_GLF_FUZZED(41.13), (injectionSwitch)[1]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), (injectionSwitch)[0])) : _GLF_FUZZED(7.5))), _GLF_FUZZED((- 2109.9944))), vec2(_GLF_FUZZED(41.13), (injectionSwitch)[1]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), (injectionSwitch)[0])) : _GLF_FUZZED(7.5))), _GLF_FUZZED((- 2109.9944))), vec2(_GLF_FUZZED(41.13), (injectionSwitch)[1]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).y : _GLF_FUZZED(-461.522))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), (injectionSwitch)[0])) : _GLF_FUZZED(7.5))), _GLF_FUZZED((- 2109.9944))), vec2(_GLF_FUZZED(41.13), (injectionSwitch)[1]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), (injectionSwitch)[0])) : _GLF_FUZZED(7.5))), _GLF_FUZZED((- 2109.9944))), vec2(_GLF_FUZZED(41.13), (injectionSwitch)[1]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).y)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-39991))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / 1)), _GLF_IDENTITY(int(0), 0 + (int(0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(ivec3(int(0), 0, 1))), int(0))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))), int(0), int(0))), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
             else
              {
              }
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(_injected_loop_counter))), 7))), _GLF_IDENTITY((true ? int(7) : _GLF_FUZZED(76038)), max((true ? int(7) : _GLF_FUZZED(76038)), _GLF_IDENTITY((true ? int(7) : _GLF_FUZZED(76038)), ~ (~ ((true ? int(7) : _GLF_FUZZED(76038)))))))))), _GLF_IDENTITY(max((0 >> _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((max((0 >> _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(7))), int(7))))) / 1, _GLF_IDENTITY(int(ivec3((max((0 >> _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(7))), int(7))))) / 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), int(ivec2(int(ivec3((max((0 >> _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(7))), int(7))))) / 1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)), 1)))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))) || _GLF_IDENTITY(false, ! (! (false)))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) - 0))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), false || (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))), true, true, false))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) >> 0u)))) << 0u) + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)) ^ 0u)) / 1u))) + 1), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(1, int(ivec2(1, 1))))), (false ? _GLF_FUZZED(workgroup_id) : ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(1, int(ivec2(1, 1))))))), clamp(~ ((subgroup_local_id + 1)), ~ ((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))))), ~ ((subgroup_local_id + 1)))))) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec2((subgroup_local_id + 1), 0u)))), _GLF_IDENTITY(uint(uvec3(0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec2((subgroup_local_id + 1), 0u)))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))) ^ 0u), 0u)), (uint(uvec3(0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec2((subgroup_local_id + 1), 0u)))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))) ^ 0u), 0u))) * 1u))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> 0u)) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))) - _GLF_IDENTITY(0u, (0u) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true)), (bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))) || false))) && true))
    {
    }
   else
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || (false))))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))))) || (false))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), false))))))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              {
               for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - 0)); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 0.0), mat2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 0.0), (true ? mat2(injectionSwitch, 0.0, 0.0) : _GLF_FUZZED(mat2(-50.46, -1.2, -6.0, 2879.1276))))), transpose(transpose(mat4x2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 0.0), (true ? mat2(injectionSwitch, 0.0, 0.0) : _GLF_FUZZED(mat2(-50.46, -1.2, -6.0, 2879.1276)))))))))))).y)), int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4))), (_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))) || false), false, false, true)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) - 0)) - 0)), ((0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) - 0)) - 0))) >> 0), (_GLF_IDENTITY((0 ^ 1), min((0 ^ 1), _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) - 0)))) * 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.5)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), (injectionSwitch.x) - 0.0) < injectionSwitch.y)))) && true)) && true)))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             buf[virtual_gid] = 1;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, false))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) / exp(vec2(0.0, 0.0)))).y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5688.3103)), float((injectionSwitch)[0]), bool(true)))) / 1.0), _GLF_FUZZED(-784.397)), bvec2(true, false)))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-2009.8169), _GLF_FUZZED(-51.15)), bvec2(false, false)))) - vec2(0.0, 0.0)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5688.3103)), float((injectionSwitch)[0]), bool(true)))) / 1.0), _GLF_FUZZED(-784.397)), bvec2(true, false)))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-2009.8169), _GLF_FUZZED(-51.15)), bvec2(false, false)))) - vec2(0.0, 0.0)).y))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], ((injectionSwitch) - vec2(0.0, 0.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], ((injectionSwitch) - vec2(0.0, 0.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(((injectionSwitch) - vec2(0.0, 0.0))[0], (((injectionSwitch) - vec2(0.0, 0.0))[0]) + 0.0), ((injectionSwitch) - vec2(0.0, 0.0))[1]), (true ? vec2(_GLF_IDENTITY(((injectionSwitch) - vec2(0.0, 0.0))[0], (((injectionSwitch) - vec2(0.0, 0.0))[0]) + 0.0), ((injectionSwitch) - vec2(0.0, 0.0))[1]) : _GLF_FUZZED(vec2(6.0, -50.07)))), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y))))), false, true, _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5688.3103)), float((injectionSwitch)[0]), bool(true)))) / 1.0), _GLF_FUZZED(-784.397)), bvec2(true, false)))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-2009.8169), _GLF_FUZZED(-51.15)), bvec2(false, false)))) - vec2(0.0, 0.0)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5688.3103)), float((injectionSwitch)[0]), bool(true)))) / 1.0), _GLF_FUZZED(-784.397)), bvec2(true, false)))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-2009.8169), _GLF_FUZZED(-51.15)), bvec2(false, false)))) - vec2(0.0, 0.0)).y))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], ((injectionSwitch) - vec2(0.0, 0.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], ((injectionSwitch) - vec2(0.0, 0.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(((injectionSwitch) - vec2(0.0, 0.0))[0], (((injectionSwitch) - vec2(0.0, 0.0))[0]) + 0.0), ((injectionSwitch) - vec2(0.0, 0.0))[1]), (true ? vec2(_GLF_IDENTITY(((injectionSwitch) - vec2(0.0, 0.0))[0], (((injectionSwitch) - vec2(0.0, 0.0))[0]) + 0.0), ((injectionSwitch) - vec2(0.0, 0.0))[1]) : _GLF_FUZZED(vec2(6.0, -50.07)))), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y))))), false, true, _GLF_IDENTITY(false, bool(bvec3(false, true, false))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), min(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), mix(vec2(_GLF_FUZZED(0.7), _GLF_FUZZED(-577.713)), vec2((vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]))[0], (vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]))[1]), bvec2(true, true))))), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5688.3103)), float((injectionSwitch)[0]), bool(true)))) / 1.0), _GLF_FUZZED(-784.397)), bvec2(true, false)))) / vec2(1.0, 1.0)))[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))]), vec2(_GLF_FUZZED(-2009.8169), _GLF_FUZZED(-51.15)), bvec2(false, false)))) - vec2(0.0, 0.0)).y), _GLF_IDENTITY(false, false || (false)) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5688.3103)), float((injectionSwitch)[0]), bool(true)))) / 1.0), _GLF_FUZZED(-784.397)), bvec2(true, false)))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-2009.8169), _GLF_FUZZED(-51.15)), bvec2(false, false)))) - vec2(0.0, 0.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5688.3103)), float((injectionSwitch)[0]), bool(true)))) / 1.0), _GLF_FUZZED(-784.397)), bvec2(true, false)))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-2009.8169), _GLF_FUZZED(-51.15)), bvec2(false, false)))) - vec2(0.0, 0.0), ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.3), (injectionSwitch)[_GLF_IDENTITY(1, 1 * (1))]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5688.3103)), float((injectionSwitch)[0]), bool(true)))) / 1.0), _GLF_FUZZED(-784.397)), bvec2(true, false)))) / vec2(1.0, 1.0)))[1]), vec2(_GLF_FUZZED(-2009.8169), _GLF_FUZZED(-51.15)), bvec2(false, false)))) - vec2(0.0, 0.0)) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))).y))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], ((injectionSwitch) - vec2(0.0, 0.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat4x2((injectionSwitch), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0), (mat4x2((injectionSwitch), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0)) * mat4(1.0)))))) - vec2(0.0, 0.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), vec2(((injectionSwitch) - vec2(0.0, 0.0))[0], ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(6.0), _GLF_FUZZED(-41.44)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(((injectionSwitch) - vec2(0.0, 0.0))[0], (((injectionSwitch) - vec2(0.0, 0.0))[0]) + 0.0), ((injectionSwitch) - vec2(0.0, 0.0))[1]), (true ? vec2(_GLF_IDENTITY(((injectionSwitch) - vec2(0.0, 0.0))[0], (((injectionSwitch) - vec2(0.0, 0.0))[0]) + 0.0), ((injectionSwitch) - vec2(0.0, 0.0))[1]) : _GLF_IDENTITY(_GLF_FUZZED(vec2(6.0, -50.07)), mix(vec2(_GLF_FUZZED(-716.077), _GLF_IDENTITY((_GLF_FUZZED(vec2(6.0, -50.07)))[1], max((_GLF_FUZZED(vec2(6.0, -50.07)))[1], (_GLF_FUZZED(vec2(6.0, -50.07)))[1]))), vec2((_GLF_FUZZED(vec2(6.0, -50.07)))[0], _GLF_FUZZED(-322.148)), bvec2(true, false))))), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).y))))), false, true, _GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, false, true)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, false, true)))), ! (! (bool(_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, false, true))))))))))) || false)), false)))), true, true)))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) - 0.0))))) && true), true, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(7.8), _GLF_FUZZED((true ? -296.076 : -4.8))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) - vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED((-7.8 * 3.8)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1], clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))[0], _GLF_FUZZED(-5.6)), vec2(_GLF_FUZZED(-4.9), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))[1]), bvec2(false, true)))[1]))), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[0], _GLF_FUZZED(1.0)), bvec2(true, false))).y, true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(7.8), _GLF_FUZZED((true ? -296.076 : -4.8))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) - vec2(0.0, 0.0), clamp(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(7.8), _GLF_FUZZED((true ? -296.076 : -4.8))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(7.8), _GLF_FUZZED((true ? -296.076 : -4.8))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(7.8), _GLF_FUZZED((true ? -296.076 : -4.8))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) - vec2(0.0, 0.0)))), mix(vec2(_GLF_FUZZED((-7.8 * 3.8)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1], clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat4x2(_GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-5935.0304), _GLF_FUZZED(1.4)), vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), bvec2(true, true))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0))))))[0], _GLF_FUZZED(-5.6)), vec2(_GLF_FUZZED(-4.9), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))[1]), bvec2(false, true)))[1]))), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[0], _GLF_FUZZED(1.0)), bvec2(true, false))).y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), false, _GLF_IDENTITY(true, (true) || false), false)))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), false, true, false)))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 0.0), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 0.0)))))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), false, true, false)))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), bool(bool(bool(bool(_GLF_IDENTITY(true, ! (! (true))))))))), true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y), false, true, false)))), true, true), false)), true))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))) && true), true, false, true))), ! (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), false, true, false))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), false, true, false))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), false, true, false))))))) && true)), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(5.0), (vec2(0.0, 0.0))[1]), vec2((_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.4)), bool(false))), 0.0))))[_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(int(~ (0))))))], _GLF_FUZZED(6.5)), bvec2(true, false)))).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))) - vec2(0.0, 0.0)).y), false, true, false)))), true, true)))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) - vec2(0.0, 0.0)).y)))) && true, ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))) && true) || false)), true, false, true)))), true && (! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, abs(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))))), vec4(mat4x2(vec4(injectionSwitch, 0.0, abs(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))))), 0.0, 1.0, 1.0, 1.0))))), (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), false, true, false)))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)).y), false, true, false)))), _GLF_IDENTITY(true, ! (! (true))), true), bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)).y), false, true, false)))), _GLF_IDENTITY(true, ! (! (true))), true))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))) && true), true, false, true))), ! (! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(vec3(-4.4, 681.853, -600.615).b)), vec2(_GLF_FUZZED((true ? -2.1 : 42.85)), (vec2(0.0, 0.0))[1]), bvec2(false, true)))).y), false, true, false)))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)).y), false, true, false)))), true, true)))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))) && true), true, false, true)))))))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-17.24), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0))), _GLF_FUZZED(322.763)), bvec2(true, false))).y))));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false)))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1 < subgroup_size)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / determinant(mat2(1.0, 1.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, sqrt(0.0))), round(length(normalize(cos(vec2(0.0, 0.0))))), sin(0.0)))) > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))))), _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6))))))), max(((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), (_GLF_IDENTITY(int(int(6)), int(ivec3(int(int(6)), 0, 1)))) | (_GLF_IDENTITY(int(int(6)), (false ? _GLF_FUZZED(-89610) : int(int(6))))))))), (false ? _GLF_FUZZED(88911) : _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), (_GLF_IDENTITY(int(int(6)), int(ivec3(int(int(6)), 0, 1)))) | (_GLF_IDENTITY(int(int(6)), (false ? _GLF_FUZZED(-89610) : int(int(6))))))))))))), ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(int(int(6))))), min(0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(int(int(6))))), 0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(int(int(6))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) | (max(0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) | (max(0, 0)))), (_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) | (max(0, 0))))) >> 0)) | 0)) / 1) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) / 1) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))))), ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) / 1) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6))))))) << 0)))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(int(int(6)))), (_GLF_IDENTITY(int(6), int(int(int(6))))) | (_GLF_IDENTITY(int(6), int(int(int(6)))))))), ((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6))))))) ^ 0)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                 subgroupAll(false);
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false, true && ((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec3(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, true)))))))))), (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)) && true))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         subgroupAll(true);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
}
