#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 bvec2 _f0;
 bool _f1;
 int _f2;
 float _f3;
} ;

struct _GLF_struct_9 {
 bool _f0;
 uint _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
 vec2 _f1;
 vec4 _f2;
 uvec3 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 bvec4 _f1;
 _GLF_struct_9 _f2;
 mat2 _f3;
 _GLF_struct_10 _f4;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 ivec3 _f1;
 uint _f2;
} ;

struct _GLF_struct_4 {
 uint _f0;
 ivec4 _f1;
 uvec3 _f2;
 float _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
 _GLF_struct_4 _f1;
 vec3 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 vec4 _f1;
 mat2 _f2;
 bvec4 _f3;
 uint workgroup_id;
} ;

struct _GLF_struct_12 {
 uvec4 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_11 _f4;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_1 {
 uint subgroup_size;
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(gl_SubgroupSize, _GLF_struct_0(mat4(1.0), vec3(1.0))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(uvec4(1u), _GLF_struct_3(ivec2(1), vec4(1.0), mat2(1.0), bvec4(true), gl_WorkGroupID.x), _GLF_struct_6(uvec3(1u), _GLF_struct_4(1u, ivec4(1), uvec3(1u), 1.0, mat4x2(1.0)), vec3(1.0), _GLF_struct_5(mat2(1.0), ivec3(1), 1u)), _GLF_struct_7(uvec2(1u), mat4x2(1.0)), _GLF_struct_11(_GLF_struct_8(mat4x2(1.0), vec2(1.0), vec4(1.0), uvec3(1u), ivec4(1)), bvec4(true), _GLF_struct_9(true, 1u, mat3x4(1.0)), mat2(1.0), _GLF_struct_10(bvec2(true), true, 1, 1.0)));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_12._f1.workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_2._f0.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_2._f0.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_2._f0.subgroup_size);
 buf[virtual_gid] = 1;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(subgroup_local_id + 1 < _GLF_struct_replacement_2._f0.subgroup_size)
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     subgroupAll(false);
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     subgroupAll(true);
    }
  }
 else
  {
  }
}
