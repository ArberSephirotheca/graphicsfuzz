#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(90.54), _GLF_FUZZED(float(-93810))), bvec2(false, false))), min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint gid = _GLF_IDENTITY(gl_GlobalInvocationID.x, (gl_GlobalInvocationID.x) | (gl_GlobalInvocationID.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(386.793)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y), float(_GLF_FUZZED(386.793)), bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))) - 0.0)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))))), _GLF_IDENTITY(true, bool(bool(true)))))), true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-1.7) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), false || (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))) && true)))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-40022) : _injected_loop_counter)) != _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)), _GLF_IDENTITY(min(min(int(0), int(0)), min(int(0), int(0))), _GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (_GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (int(int(min(min(int(0), int(0)), min(int(0), int(0)))))) ^ 0)) - 0))))))), (_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)), _GLF_IDENTITY(min(min(int(0), int(0)), min(int(0), int(0))), _GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (_GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (int(int(min(min(int(0), int(0)), min(int(0), int(0)))))) ^ 0)) - 0)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)), _GLF_IDENTITY(min(min(int(0), int(0)), min(int(0), int(0))), _GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (_GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (int(int(min(min(int(0), int(0)), min(int(0), int(0)))))) ^ 0)) - 0))))))), (_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)), _GLF_IDENTITY(min(min(int(0), int(0)), min(int(0), int(0))), _GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (_GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (int(int(min(min(int(0), int(0)), min(int(0), int(0)))))) ^ 0)) - 0)))))))) >> 0))), _GLF_IDENTITY(int(0), int(int(int(0)))))) >> _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)), max(~ (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)), ~ (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))))))))), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))), _GLF_IDENTITY(int(0), (int(0)) * ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))) >> _GLF_IDENTITY(int(0), int(0)))) * 1)) | 0), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-40022) : _injected_loop_counter)) != _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)), _GLF_IDENTITY(min(min(int(0), int(0)), min(int(0), int(0))), _GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (_GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (int(int(min(min(int(0), int(0)), min(int(0), int(0)))))) ^ 0)) - 0))))))), (_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)), _GLF_IDENTITY(min(min(int(0), int(0)), min(int(0), int(0))), _GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (_GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (int(int(min(min(int(0), int(0)), min(int(0), int(0)))))) ^ 0)) - 0)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)), _GLF_IDENTITY(min(min(int(0), int(0)), min(int(0), int(0))), _GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (_GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (int(int(min(min(int(0), int(0)), min(int(0), int(0)))))) ^ 0)) - 0))))))), (_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)), _GLF_IDENTITY(min(min(int(0), int(0)), min(int(0), int(0))), _GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (_GLF_IDENTITY(int(int(min(min(int(0), int(0)), min(int(0), int(0))))), (int(int(min(min(int(0), int(0)), min(int(0), int(0)))))) ^ 0)) - 0)))))))) >> 0))), _GLF_IDENTITY(int(0), int(int(int(0)))))) >> _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(min(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)), max(~ (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)), ~ (_GLF_IDENTITY(min(int(0), int(0)), (min(int(0), int(0))) * 1)))))))))), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(_GLF_IDENTITY(int(0), min(int(0), int(0)))))), _GLF_IDENTITY(int(0), (int(0)) * ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))) >> _GLF_IDENTITY(int(0), int(0)))) * 1)) | 0), false)))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)) - 0))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), bool(bvec4(false, false, false, true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false) || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-21.15)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y))));
 uint total_threads = _GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(num_workgroup, uint(uvec4(num_workgroup, (0u ^ 0u), (0u | 0u), 0u)))), max(~ (_GLF_IDENTITY(num_workgroup, uint(uvec4(num_workgroup, (0u ^ 0u), (0u | 0u), 0u)))), ~ (_GLF_IDENTITY(num_workgroup, uint(uvec4(num_workgroup, (0u ^ 0u), (0u | 0u), 0u)))))))) * _GLF_IDENTITY(workgroup_size, (workgroup_size) / uint(_GLF_ONE(1.0, injectionSwitch.y)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   buf[gid] = _GLF_IDENTITY(1, min(1, 1));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), true && ((false))), false, false)))), true, true)))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(~ (~ (subgroup_size)), (~ (~ (subgroup_size))) | (~ (~ (subgroup_size)))), _GLF_IDENTITY(~ (~ (subgroup_size)), 0u + (~ (~ (subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (subgroup_size)), clamp(~ (~ (subgroup_size)), _GLF_IDENTITY(~ (~ (subgroup_size)), (~ (~ (subgroup_size))) - 0u), ~ (~ (subgroup_size)))), (_GLF_IDENTITY(~ (~ (subgroup_size)), min(~ (~ (subgroup_size)), ~ (~ (subgroup_size))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(bitfieldExtract(subgroup_id, -26353, 57093)) : clamp(_GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_size), min((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size))))))), (~ (~ (subgroup_size))) | (~ (~ (subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))))), (~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))))) >> 0u), _GLF_IDENTITY(0u, (0u) | 0u) + (~ (~ (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), max(_GLF_IDENTITY(~ (subgroup_size), uint(uvec2(~ (subgroup_size), 0u))), ~ (subgroup_size))))))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size)))), min(~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size))))), ~ (~ (subgroup_size))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3507.0390), _GLF_FUZZED(7344.4371)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec2(0.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), dot(vec3(0.0, 0.0, 1.0), vec3(length(vec2(0.0, 0.0)), 0.0, 1.0))), 0.0, 1.0, 1.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3886.0839) : _GLF_IDENTITY(0.0, (0.0) - 0.0))), 1.0, cos(0.0), 0.0, abs(1.0)))), max(injectionSwitch, injectionSwitch)).y))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3507.0390), _GLF_FUZZED(7344.4371)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), abs(0.0))))))[1]), clamp(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), abs(0.0))))))[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), abs(0.0))))))[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), abs(0.0))))))[1]))), bvec2(true, true))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec2(0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(length(vec2(0.0, 0.0)), 0.0, 1.0))), 0.0, 1.0, 1.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(5.4))))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, cos(0.0), 0.0, abs(1.0)))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0))).y))), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3507.0390), _GLF_FUZZED(7344.4371)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), abs(0.0))))))[1]), clamp(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), abs(0.0))))))[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), abs(0.0))))))[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + (_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), abs(0.0))))))[1]))), bvec2(true, true))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(length(vec2(0.0, 0.0)), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(length(vec2(0.0, 0.0)), 0.0, 1.0))), 0.0, 1.0, 1.0, 1.0, log(1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(5.4))))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, cos(0.0), 0.0, abs(1.0)))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0))).y)))) && true), true, false, true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, exp(0.0), 1.0))), injectionSwitch.y)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, true, true)))) || false)) || false))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     int i = 0;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY((gid + 1), 0u | ((gid + 1))) % total_threads, clamp(_GLF_IDENTITY((gid + 1) % total_threads, min((gid + 1) % total_threads, _GLF_IDENTITY((gid + 1) % _GLF_IDENTITY(total_threads, uint(uint(total_threads))), ((gid + 1) % total_threads) | (_GLF_IDENTITY(_GLF_IDENTITY((gid + 1) % total_threads, ~ (~ ((gid + 1) % total_threads))), max(_GLF_IDENTITY((gid + 1) % total_threads, uint(uint((_GLF_IDENTITY(gid + 1, min(_GLF_IDENTITY(gid + 1, 0u + (gid + 1)), gid + 1))) % _GLF_IDENTITY(total_threads, (total_threads) | (_GLF_IDENTITY(total_threads, (_GLF_IDENTITY(total_threads, (total_threads) | (total_threads))) ^ 0u)))))), (gid + 1) % total_threads)))))), (gid + 1) % total_threads, _GLF_IDENTITY(_GLF_IDENTITY((gid + 1) % total_threads, max((gid + 1) % total_threads, (gid + 1) % total_threads)), max((gid + 1) % total_threads, (_GLF_IDENTITY(gid, min(gid, _GLF_IDENTITY(gid, clamp(gid, gid, gid)))) + 1) % total_threads))))], uint(2), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), true && (bool(bool((injectionSwitch.x > injectionSwitch.y)))))), false, false, true))), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), true && (bool(bool((injectionSwitch.x > injectionSwitch.y)))))), false, false, true))), true), false), false)))))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))), true), false)))))), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))), _GLF_IDENTITY(true, false || (true))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false, false, true))), true), false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))), true), false)), bvec3(bvec4(bvec3(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1)))) + (0 & 85877))])).y), false, false, true))), true), false)), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false, false, true)), bool(bvec2(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false, false, true)), true)))), true), false)), bvec3(bvec4(bvec3(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false, false, true))), true), false)), false)))))))))))))) && true)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, false))))) && true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)).y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))))) >> _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(max((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), int(0))), (max((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), int(0)))) >> 0)), 0, 0)), (int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), _GLF_IDENTITY(~ (1), 0 ^ (~ (1))), ~ (1))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), clamp((int(0)), _GLF_IDENTITY((int(0)), 0 ^ ((int(0)))), _GLF_IDENTITY((int(0)), ((int(0))) << 0))) | 0))) >> _GLF_IDENTITY(int(0), int(0)), max((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)), 0 + (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)), (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) | (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))))))) >> _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-16777) : 0))) << 0)), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) >> 0))))), 0, 0))) * 1))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), int(0))), (((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(int(0), int(0)))) >> 0)), int(ivec4(~ (((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (1 ^ 1))), (int(0)) | 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) >> 0)), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) >> 0))))))))), 1, 1, 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))) || false))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true))))))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), bvec2(bvec4(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), false, false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), bvec2(bvec4(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), false, false))), true), false))))))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0))))))).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y)))))) || false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, false))))))))), false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), _GLF_IDENTITY(true && (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), _GLF_IDENTITY(bool(bvec4(true && (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec4(true && (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), false || (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)), _GLF_IDENTITY(true && (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), _GLF_IDENTITY(bool(bvec4(true && (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(_GLF_IDENTITY(bool(bool(bvec4(true && (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (bool(bool(bvec4(true && (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          {
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (73066 & 0))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false, false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))) || false)) || false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-0.4, 514.271)) : injectionSwitch)).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_IDENTITY(false, bool(bool(false))))), bvec2(bvec4(bvec2(bvec2(false, _GLF_IDENTITY(false, bool(bool(false))))), true, false)))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_IDENTITY(false, bool(bool(false))))), bvec2(bvec4(bvec2(bvec2(false, _GLF_IDENTITY(false, bool(bool(false))))), true, false))))))))))));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))), (! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))) || false))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false)), false, true), false))))), true, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))))[0], _GLF_IDENTITY((injectionSwitch)[1], ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(0.3, 937.899)))))[1]) - 0.0)), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED((268.431 - _GLF_IDENTITY(vec4(98.81, -1452.8216, 3.1, _GLF_IDENTITY(-9.3, (false ? _GLF_FUZZED(-9.7) : _GLF_IDENTITY(-9.3, mix(float(-9.3), float(_GLF_FUZZED(7.1)), bool(false)))))), vec4(mat2x4(vec4(98.81, -1452.8216, 3.1, _GLF_IDENTITY(-9.3, (false ? _GLF_FUZZED(-9.7) : _GLF_IDENTITY(-9.3, mix(float(-9.3), float(_GLF_FUZZED(7.1)), bool(false)))))), 0.0, 0.0, 1.0, 0.0))).g))), bvec2(false, false)), min(mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED((_GLF_IDENTITY(268.431, clamp(268.431, 268.431, 268.431)) - vec4(98.81, -1452.8216, 3.1, -9.3).g))), bvec2(false, false)), mix(vec2(_GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), (injectionSwitch))) : _GLF_FUZZED((vec2(-299.067, 8.6)))))[0], _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]), min(((injectionSwitch)[1]), _GLF_IDENTITY(((injectionSwitch)[1]), max(((injectionSwitch)[1]), ((injectionSwitch)[1]))))) - 0.0)), vec2(_GLF_IDENTITY(_GLF_FUZZED(-7.1), clamp(_GLF_IDENTITY(_GLF_FUZZED(-7.1), float(mat4x2(_GLF_FUZZED(-7.1), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), _GLF_FUZZED(-7.1), _GLF_FUZZED(-7.1))), _GLF_FUZZED((268.431 - vec4(98.81, -1452.8216, 3.1, -9.3).g))), bvec2(false, false))))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-563.145)), bool(false))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED((268.431 - _GLF_IDENTITY(vec4(98.81, -1452.8216, 3.1, -9.3).g, clamp(vec4(98.81, -1452.8216, 3.1, -9.3).g, vec4(98.81, -1452.8216, 3.1, -9.3).g, vec4(98.81, -1452.8216, 3.1, -9.3).g))))), bvec2(false, false)), min(mix(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0), (_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)) - 0.0)), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED((268.431 - vec4(98.81, -1452.8216, 3.1, -9.3).g))), bvec2(false, false)), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED((268.431 - vec4(98.81, -1452.8216, 3.1, -9.3).g))), bvec2(false, false))))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-563.145)), bool(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))))))) < injectionSwitch.y))))
      {
       atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY((gid + 1), (_GLF_IDENTITY((gid + 1), _GLF_IDENTITY(clamp((gid + 1), (gid + 1), (gid + 1)), min(clamp((gid + 1), (gid + 1), (gid + 1)), _GLF_IDENTITY(clamp((gid + 1), (gid + 1), (gid + 1)), _GLF_IDENTITY(uint(uvec3(clamp((gid + 1), (gid + 1), (gid + 1)), 0u, 0u)), (uint(uvec3(clamp((gid + 1), (gid + 1), (gid + 1)), 0u, 0u))) << 0u)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gid, uint(uvec4(gid, 1u, 1u, 1u))), (_GLF_IDENTITY(gid, uint(uvec4(gid, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))) * 1u), 1u, 1u)))) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (_GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(0 | ((1)), (0 | ((1))) - 0)) ^ 0)))), uint(uvec4((gid + 1), _GLF_IDENTITY(0u, (0u) ^ 0u), 1u, 1u))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((gid + 1), (_GLF_IDENTITY((gid + 1), _GLF_IDENTITY(clamp((gid + 1), (gid + 1), (gid + 1)), min(clamp((gid + 1), (gid + 1), (gid + 1)), _GLF_IDENTITY(clamp((gid + 1), (gid + 1), (gid + 1)), _GLF_IDENTITY(uint(uvec3(clamp((gid + 1), (gid + 1), (gid + 1)), 0u, 0u)), (uint(uvec3(clamp((gid + 1), (gid + 1), (gid + 1)), 0u, 0u))) << 0u)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gid, uint(uvec4(gid, 1u, 1u, 1u))), (_GLF_IDENTITY(gid, uint(uvec4(gid, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))) * 1u), 1u, 1u)))) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (_GLF_IDENTITY(1, (1) ^ 0)) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(0 | ((1)), (0 | ((1))) - 0)) ^ 0)))), uint(uvec4((gid + 1), _GLF_IDENTITY(0u, (0u) ^ 0u), 1u, 1u))))))) % total_threads], _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (uint(2)))) / _GLF_IDENTITY(1u, (1u) / 1u)), _GLF_IDENTITY((uint(2)), ((uint(2))) | ((uint(2)))) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) | (uint(2))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2)))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / _GLF_IDENTITY(1u, 1u * (1u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / 1u)))) ^ _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), min((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(_GLF_IDENTITY(2, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | 0)), int(1))) + (2)))) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2)))), (true ? _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u)))) : _GLF_FUZZED(subgroup_id))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), max(uint(2), uint(2))), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), min(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u)))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / 1u)) ^ 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / 1u)) ^ 0u)))), max(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2)))) / 1u, (_GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2)))) / 1u) * 1u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) | 0u), (uint(_GLF_IDENTITY(2, (2) - 0))) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / 1u)) ^ 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) >> 0u)) | 0u)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2)))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / 1u)) ^ 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(_GLF_IDENTITY(2, (2) * 1))) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2)))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)), ~ (~ ((uint(2))))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) ^ 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(_GLF_IDENTITY(2, (2) * 1))) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2)))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)), ~ (~ ((uint(2))))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))) ^ 0u))))) / 1u))) >> 0u)), _GLF_IDENTITY(((_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (uint(2)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), max(uint(2), uint(2))), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u), (false ? _GLF_FUZZED(gid) : _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)))) ^ 0u)))) >> 0u))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (uint(2)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), max(uint(2), uint(2))), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u), (false ? _GLF_FUZZED(gid) : _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)))) ^ 0u)))) >> 0u))), (((_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (uint(2)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), max(uint(2), uint(2))), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u), (false ? _GLF_FUZZED(gid) : _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)))) ^ 0u)))) >> 0u)))) | (((_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (uint(2)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), max(uint(2), uint(2))), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u), (false ? _GLF_FUZZED(gid) : _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)))) ^ 0u)))) >> 0u))))), ((_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (uint(2)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), max(uint(2), uint(2))), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u), (false ? _GLF_FUZZED(gid) : _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)))) ^ 0u)))) >> 0u))), ((_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (uint(2)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), max(uint(2), uint(2))), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u), (false ? _GLF_FUZZED(gid) : _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)))) ^ 0u)))) >> 0u))))) / 1u), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), (true ? 2 : _GLF_FUZZED(-53298))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), ~ (~ (uint(2))))) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(_GLF_IDENTITY(2, max(2, 2)))), (uint(2)), (uint(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | (2))))))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), _GLF_IDENTITY((uint(2)) / 1u, 0u | ((uint(2)) / 1u)))) ^ 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (uint(2))), _GLF_IDENTITY((uint(2)) / 1u, 0u | (_GLF_IDENTITY((uint(2)) / 1u, ((uint(2)) / 1u) ^ 0u))))) ^ 0u) : _GLF_FUZZED(gid)))), ~ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(_GLF_IDENTITY(2, max(2, 2)))), (uint(2)), (uint(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | (2))))))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), _GLF_IDENTITY((uint(2)) / 1u, 0u | ((uint(2)) / 1u)))) ^ 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (uint(2))), _GLF_IDENTITY((uint(2)) / 1u, 0u | (_GLF_IDENTITY((uint(2)) / 1u, ((uint(2)) / 1u) ^ 0u))))) ^ 0u) : _GLF_FUZZED(gid)))), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(_GLF_IDENTITY(2, max(2, 2)))), (uint(2)), (uint(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | (2))))))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), _GLF_IDENTITY((uint(2)) / 1u, 0u | ((uint(2)) / 1u)))) ^ 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (uint(2))), _GLF_IDENTITY((uint(2)) / 1u, 0u | (_GLF_IDENTITY((uint(2)) / 1u, ((uint(2)) / 1u) ^ 0u))))) ^ 0u) : _GLF_FUZZED(gid))))) | (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(_GLF_IDENTITY(2, max(2, 2)))), (uint(2)), (uint(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) | (2))))))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), _GLF_IDENTITY((uint(2)) / 1u, 0u | ((uint(2)) / 1u)))) ^ 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (uint(2))), _GLF_IDENTITY((uint(2)) / 1u, 0u | (_GLF_IDENTITY((uint(2)) / 1u, ((uint(2)) / 1u) ^ 0u))))) ^ 0u) : _GLF_FUZZED(gid))))))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) - (0 >> _GLF_IDENTITY(int(4), int(4)))) | 0)), (uint(2)) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) * 1u)) | (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) | (uint(2)))) ^ 0u)))) ^ 0u)), 0u + (~ (_GLF_IDENTITY(uint(2), (uint(2)) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(0u, 1u)))) | (0u)))))))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint(2) : _GLF_FUZZED(gid)))), clamp((uint(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), clamp(_GLF_IDENTITY((~ (2)), ((~ (2))) | ((~ (2)))), (~ (2)), (~ (2))))))))), (uint(2)), (uint(2)))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)), uint(uvec2((uint(2)), 0u))) / 1u), ~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)), uint(_GLF_IDENTITY(uvec2((uint(2)), 0u), (_GLF_IDENTITY(uvec2((uint(2)), 0u), (_GLF_IDENTITY(uvec2((uint(2)), 0u), ~ (~ (uvec2((uint(2)), 0u))))) - uvec2(0u, 0u))) * uvec2(1u, 1u)))) / 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u, (true ? (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) | 0u : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / 1u)) ^ 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) << 0))), max(_GLF_IDENTITY((uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) << 0))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) << 0)))), (~ ((uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) << 0))))) / 1u)), (~ (_GLF_IDENTITY(~ ((uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) << 0)))), (~ ((uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) << 0))))) / 1u))) | (~ (_GLF_IDENTITY(~ ((uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) << 0)))), (~ ((uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) << 0))))) / 1u))))), (uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) << 0))))) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(_GLF_IDENTITY(2, 1 * (2)))))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2)))) / 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (uint(2)))) / 1u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp(_GLF_IDENTITY((uint(2)), ((uint(2))) >> (0u & 171668u)), (uint(2)), (uint(2)))) / 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), min(uint(2), uint(2)))) | (uint(2))), uint(2)))))) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp(_GLF_IDENTITY((uint(2)), ((uint(2))) >> (0u & 171668u)), (uint(2)), (uint(2)))) / 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(2)), (uint(2)), (_GLF_IDENTITY(uint(2), max(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), min(uint(2), uint(2)))) | (uint(2))), uint(2)))))) / 1u))))) * 1u) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp((uint(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(-89447) : 2)))), (uint(2)), (uint(2)))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) ^ 0u), _GLF_IDENTITY((uint(2)), clamp(_GLF_IDENTITY((uint(2)), ~ (~ (_GLF_IDENTITY((uint(2)), uint(uvec4(_GLF_IDENTITY((uint(2)), clamp((uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (false ? _GLF_FUZZED(-40104) : 2))) - 0))), (uint(2)), (uint(2)))), 0u, 0u, 1u)))))), (uint(2)), (uint(2)))) / 1u)) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(1u * (uint(2)), min(1u * (uint(2)), 1u * (uint(2))))), (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)), 0u | (_GLF_IDENTITY((uint(2)), (false ? _GLF_FUZZED(subgroup_id) : (uint(2)))))) / 1u)) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), (uint(2)) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(0u | (~ (1u)), (_GLF_IDENTITY(0u | (~ (1u)), clamp(0u | (~ (1u)), 0u | (~ (1u)), 0u | (~ (1u))))) | (0u | (~ (1u))))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)), ~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)))))) | 0u)), ~ (_GLF_IDENTITY(uint(2), (uint(2)) / 1u))))))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(1u * (uint(2)), min(1u * (uint(2)), 1u * (uint(2))))), (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)), 0u | (_GLF_IDENTITY((uint(2)), (false ? _GLF_FUZZED(subgroup_id) : (uint(2)))))) / 1u)) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), (uint(2)) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(0u | (~ (1u)), (_GLF_IDENTITY(0u | (~ (1u)), clamp(0u | (~ (1u)), 0u | (~ (1u)), 0u | (~ (1u))))) | (0u | (~ (1u))))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)), ~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)))))) | 0u)), ~ (_GLF_IDENTITY(uint(2), (uint(2)) / 1u))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(1u * (uint(2)), min(1u * (uint(2)), 1u * (uint(2))))), (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)), 0u | (_GLF_IDENTITY((uint(2)), (false ? _GLF_FUZZED(subgroup_id) : (uint(2)))))) / 1u)) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), (uint(2)) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(0u | (~ (1u)), (_GLF_IDENTITY(0u | (~ (1u)), clamp(0u | (~ (1u)), 0u | (~ (1u)), 0u | (~ (1u))))) | (0u | (~ (1u))))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)), ~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)))))) | 0u)), ~ (_GLF_IDENTITY(uint(2), (uint(2)) / 1u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(1u * (uint(2)), min(1u * (uint(2)), 1u * (uint(2))))), (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)), 0u | (_GLF_IDENTITY((uint(2)), (false ? _GLF_FUZZED(subgroup_id) : (uint(2)))))) / 1u)) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), ~ (~ (uint(2)))), (uint(2)) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (_GLF_IDENTITY(~ (1u), _GLF_IDENTITY(0u | (~ (1u)), (_GLF_IDENTITY(0u | (~ (1u)), clamp(0u | (~ (1u)), 0u | (~ (1u)), 0u | (~ (1u))))) | (0u | (~ (1u))))))))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)), ~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (_GLF_IDENTITY((uint(2)) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (uint(2)) / 1u))) | 0u)))))) | 0u)), ~ (_GLF_IDENTITY(uint(2), (uint(2)) / 1u))))))))))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2))), (uint(2)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), max(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), _GLF_IDENTITY(uint(2), 0u ^ (uint(2))))), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))) : _GLF_FUZZED(total_threads), (true ? _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))) : _GLF_FUZZED(total_threads)) | (_GLF_IDENTITY(true ? _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))) : _GLF_FUZZED(total_threads), 0u + (true ? _GLF_IDENTITY(uint(2), ~ (~ (uint(2)))) : _GLF_FUZZED(total_threads)))))))) / _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | 0u, ~ (~ (_GLF_IDENTITY((1u) | 0u, uint(uvec3((1u) | 0u, 1u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))))))))) ^ 0u)))))) >> 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec4(_GLF_IDENTITY(2, 0 ^ (2)), 0, (0 | 0), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) - 0u)) << 0u)) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), 0u ^ (uint(2)))) / 1u), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u)), (_GLF_IDENTITY(max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u)), (false ? _GLF_FUZZED(workgroup_size) : max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))))) ^ 0u)))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), _GLF_IDENTITY((uint(2)) / 1u, ((uint(2)) / 1u) | ((uint(2)) / 1u)))) ^ 0u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 ^ (2))), (uint(2)) / 1u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), min(uint(2), _GLF_IDENTITY(uint(2), _GLF_IDENTITY(uint(uint(uint(2))), max(uint(uint(uint(2))), uint(uint(uint(2))))))))) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size)) | 0u))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(_GLF_IDENTITY(115296u, clamp(115296u, 115296u, _GLF_IDENTITY(115296u, (115296u) * uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u))))))) >> 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) - 0u)) << 0u)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u)), 0u ^ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u)))), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), 0u ^ (uint(2))), (uint(2)) / 1u), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)), ((uint(2))) ^ 0u) / 1u)) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), clamp(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) >> 0u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size)) | 0u))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, 0 | (0)))), (uint(2)) / 1u)) ^ 0u))))))) >> 0u)), max((_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) - 0u)) << 0u)) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size)) | 0u))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u))))))) >> 0u), ~ (~ (_GLF_IDENTITY(uint(2), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) - 0u)) << 0u)) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size)) | 0u))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u))))))) >> 0u, max((_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) - 0u)) << 0u)) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size)) | 0u))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u))))))) >> 0u, (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) - 0u)) << 0u)) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size)) | 0u))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u))))))) >> 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, _GLF_IDENTITY(1, ~ (~ (1)))))), 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) >> 0u), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), 0u ^ (_GLF_IDENTITY(uint(2), (uint(2)) << 0u)))) - 0u)) << 0u)) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / _GLF_IDENTITY(1u, (1u) << (0u ^ (0u & 130043u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))))), (uint(2)) / 1u)) ^ 0u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), min(uint(2), uint(2)))) | (uint(2)))) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) << (0 ^ 0))), (uint(_GLF_IDENTITY(2, (2) << (0 ^ 0)))) | 0u)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) * 1)), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (false ? _GLF_FUZZED(packSnorm4x8(vec4(-8.0, 70.06, -7.6, 973.988))) : uint(2))), (_GLF_IDENTITY(uint(2), clamp(uint(2), uint(2), uint(2)))) / 1u), (_GLF_IDENTITY(uint(2), (uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) >> 0))) / 1u)) / _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 0u | (_GLF_IDENTITY(1u, ~ (~ (1u)))))))))) : _GLF_FUZZED(subgroup_size)) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), 1u * (_GLF_IDENTITY(uint(2), (uint(2)) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u), 0u), uvec2(uvec3(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u), 0u), 1u))))))))))))) >> 0u)), ((_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, int(ivec4(2, 1, 1, 1))), 1)))), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) - 0u)) << 0u)) / 1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(_GLF_IDENTITY(2, (2) + 0))) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(uint(2), (uint(2)) / 1u))))))))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) / (((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))) & 1u))) / 1u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec3(2, 1, 1), min(ivec3(2, 1, 1), ivec3(2, 1, 1))))) : _GLF_FUZZED((-92881)))), (2) | 0)), (uint(2)) / 1u)) ^ 0u)), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(2)) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(gid)))) - 0u))))))))) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), min(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))) : _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), max(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) / 1u), (_GLF_IDENTITY(uint(2), (uint(_GLF_IDENTITY(2, ~ (~ (2))))) / 1u)) / _GLF_IDENTITY(1u, ~ (~ (1u)))))))) : _GLF_FUZZED(subgroup_size)) | 0u))), _GLF_IDENTITY(uint(2), (uint(2)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), _GLF_IDENTITY((uint(2)) / 1u, (true ? (uint(2)) / 1u : _GLF_FUZZED(115296u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) | 0)), (uint(2)) / 1u)) ^ 0u))))))))) >> 0u))) ^ 0u)))) << 0u)) / 1u)))), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(true ? _GLF_IDENTITY(64, 0 | (64)) : _GLF_FUZZED(75512), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(64, 0 | (64)) : _GLF_FUZZED(75512), 0 ^ (true ? _GLF_IDENTITY(64, _GLF_IDENTITY(0 | (64), (_GLF_IDENTITY(0 | (64), (0 | (64)) ^ 0)) - 0)) : _GLF_FUZZED(75512))), _GLF_IDENTITY(true ? _GLF_IDENTITY(64, 0 | (64)) : _GLF_FUZZED(75512), 0 + (true ? _GLF_IDENTITY(64, 0 | (64)) : _GLF_FUZZED(75512))), _GLF_IDENTITY(true ? _GLF_IDENTITY(64, 0 | (64)) : _GLF_FUZZED(75512), min(true ? _GLF_IDENTITY(_GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) ^ 0)) / 1)))), 0 | (64)) : _GLF_FUZZED(75512), true ? _GLF_IDENTITY(_GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, min(64, 64)), 64)) : _GLF_FUZZED(-9558))), 0 | (64)) : _GLF_FUZZED(75512))))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) | _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, (0) | (0)))));
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-509.826)), float(0.0), bool(true))))), round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))))), (float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 0.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch.x, 0.0, _GLF_IDENTITY(round(length(normalize(1.0))), min(round(length(normalize(1.0))), round(length(normalize(1.0))))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))) / 1.0), 0.0, 1.0, 0.0, 1.0)))))) * 1.0)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))), ! (! (bool(bool((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), (false) && true), true, true, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, false, true))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), float(_GLF_FUZZED(-47.74)), bool(false))), injectionSwitch.y))), _GLF_IDENTITY(bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), bool(bvec3(bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, true, false)), (bool(bvec4(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, true, false))) && true)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, true)))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, true))))) || false)), true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(573.411)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.5)), bool(false))), injectionSwitch.x, injectionSwitch.x))), bool(true))), min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) || false)))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))) && true))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), ! (! (false))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), true, false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED((336 / -52166)) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) * 1.0)))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (_GLF_IDENTITY(true, ! (! (true))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, true)))))) || false), ! (! (true))))), true), false, false))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), true && (bool(_GLF_IDENTITY(false, true && (false)))))))))));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(749.012))) < injectionSwitch.y)))), false || (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))) && true)))))))))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(! (false)))), ! (! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))))), bool(bvec3(_GLF_IDENTITY(! (false), bool(bool(! (false)))), false, false)))) && true)))), (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(! (false)))), ! (! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))))), bool(bvec3(_GLF_IDENTITY(! (false), bool(bool(! (false)))), false, false)))) && true))))) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY((false) && true, ! (_GLF_IDENTITY(! ((false) && true), true && (! ((false) && true))))), true))))))
  barrier();
}
