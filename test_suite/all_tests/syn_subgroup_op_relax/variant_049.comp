#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) || false), true)))))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)))).x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true)))
      continue;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (false), (! (false)) && true), false, true, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (false), (! (false)) && true), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(! (false), (! (false)) && true), false, true, false))))), true, true)))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        break;
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))) - 0u);
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((0 | ((0 | 1) & 1)), (_GLF_IDENTITY((0 | ((0 | 1) & 1)), ((0 | ((0 | 1) & 1))) << _GLF_IDENTITY(0, (0) | (0)))) * 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) > (71741 & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-3.6), min(_GLF_FUZZED(-3.6), _GLF_FUZZED(-3.6))))) > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false))))))))))))))) || false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false), true && (! ((_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false, ! (! ((_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false)))))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) * _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) * _GLF_IDENTITY(1u, (1u) / 1u)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) * _GLF_IDENTITY(1u, (1u) / 1u)), _GLF_IDENTITY(subgroup_id, (subgroup_id) * _GLF_IDENTITY(1u, (1u) / 1u)))) * subgroup_size) | (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, (_GLF_IDENTITY((subgroup_id) * 1u, clamp((subgroup_id) * 1u, (subgroup_id) * 1u, (subgroup_id) * 1u))) | (_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec2((subgroup_id) * 1u, (0u << _GLF_IDENTITY(uint(3u), uint(3u))))))))) * subgroup_size)), (true ? _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id))))) * _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 0u, 1u)))) | (1u))) * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), uint(uvec2(_GLF_IDENTITY(uint(6u), uint(6u)), 0u))), _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, 0u ^ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380)))), max(_GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380)))), (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))) - 0u), _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))))), 1u, 1u)))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) | 0u)))) | (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, _GLF_IDENTITY(54380, ~ (~ (_GLF_IDENTITY(54380, (54380) | (54380)))))))))), 1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) + 0u)))))))) * subgroup_size))) / 1u, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, 0u ^ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) | 0u)))) | (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) / 1u)), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, _GLF_IDENTITY(184954u, (184954u) << 0u), 46886, 54380))))), 1u, 1u)))) * subgroup_size))) / 1u), (~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))) << uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (false ? _GLF_FUZZED(atomicMin(num_workgroup, workgroup_size)) : _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), uint(uint(0u << _GLF_IDENTITY(uint(6u), uint(6u)))))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) | ((subgroup_id) * 1u)), clamp(_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec2((subgroup_id) * 1u, 1u))), (subgroup_id) * 1u, _GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) ^ 0u))), uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, 0u ^ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), clamp(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), _GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), _GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))))), 1u, 1u)))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 1u, 1u, 0u))) ^ 0u)) | 0u)))) | (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (uvec3(0u, 0u, 0u) & uvec3(74067u, 80527u, 77079u)) + (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))))) | (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))))))), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY((subgroup_id) * 1u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (uvec3(0u, 0u, 0u) & uvec3(74067u, 80527u, 77079u)) + (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))))) | (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))))))))) * subgroup_size))), ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, clamp(_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec2((subgroup_id) * 1u, 1u))), (subgroup_id) * 1u, _GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) ^ 0u))), uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(_GLF_IDENTITY(bitfieldInsert(191041u, 184954u, 46886, 54380), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (bitfieldInsert(191041u, 184954u, 46886, 54380))))))), 1u, 1u)))) * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u))), (_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) | (_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))))) * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 1u, 1u, 0u))) ^ 0u)) | 0u, 0u + ((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 1u, 1u, 0u))) ^ 0u)) | 0u)))))) | (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) - 0u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) >> 0u)), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) >> 0u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) >> 0u)))))))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * _GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(packSnorm2x16(vec2(21.16, -8.0))) : 1u)), ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (uvec3(0u, 0u, 0u) & uvec3(74067u, 80527u, 77079u)) + _GLF_IDENTITY((uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), max((uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))))))) | (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) | ((1u))) | (1u)))))))) * subgroup_size)))) * 1u) / 1u), ~ (~ ((_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))) << uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (false ? _GLF_FUZZED(atomicMin(num_workgroup, workgroup_size)) : _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), uint(uint(0u << _GLF_IDENTITY(uint(6u), uint(6u)))))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) | ((subgroup_id) * 1u)), clamp(_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec2((subgroup_id) * 1u, 1u))), (subgroup_id) * 1u, _GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) ^ 0u))), uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, 0u ^ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), clamp(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), _GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), _GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))))), 1u, 1u)))) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 1u, 1u, 0u))) ^ 0u)) | 0u)))) | (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (uvec3(0u, 0u, 0u) & uvec3(74067u, 80527u, 77079u)) + (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))))) | (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))))))), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY((subgroup_id) * 1u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (uvec3(0u, 0u, 0u) & uvec3(74067u, 80527u, 77079u)) + (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))))) | (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))))))))) * subgroup_size))), ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, clamp(_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec2((subgroup_id) * 1u, 1u))), (subgroup_id) * 1u, _GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) ^ 0u))), uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(_GLF_IDENTITY(bitfieldInsert(191041u, 184954u, 46886, 54380), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (bitfieldInsert(191041u, 184954u, 46886, 54380))))))), 1u, 1u)))) * subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u))), (_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))) | (_GLF_IDENTITY((subgroup_id) * 1u, uint(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), min(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? (0u << _GLF_IDENTITY(uint(6u), uint(6u))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, 1u)))))) * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 1u, 1u, 0u))) ^ 0u)) | 0u, 0u + ((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 1u, 1u, 0u))) ^ 0u)) | 0u)))))) | (workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) - 0u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) >> 0u)), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) >> 0u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(uint(6u), uint(6u))) >> 0u)))))))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY((subgroup_id) * _GLF_IDENTITY(1u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(packSnorm2x16(vec2(21.16, -8.0))) : 1u)), ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u))), (uvec3(0u, 0u, 0u) & uvec3(74067u, 80527u, 77079u)) + _GLF_IDENTITY((uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), max((uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, (1u) | (1u)))))))) | (uvec3(_GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) >> _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), max((0u << _GLF_IDENTITY(uint(6u), uint(6u))), (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (true ? _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(6u), uint(6u))), ((0u << _GLF_IDENTITY(uint(6u), uint(6u)))) | ((0u << _GLF_IDENTITY(uint(6u), uint(6u))))) : _GLF_FUZZED(bitfieldInsert(191041u, 184954u, 46886, 54380))))), 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) | ((1u))) | (1u)))))))) * subgroup_size)))) * 1u) / 1u))))) - 0u)))) : _GLF_FUZZED((-- subgroup_size)))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u))) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), int(int(int(int(1)))))), min(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), int(int(int(int(1)))))), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), int(int(int(int(1))))))) - 0u), subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), _GLF_IDENTITY(int(int(int(int(1)))), ~ (~ (int(int(int(int(1)))))))))))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 + _GLF_IDENTITY((int(2)), int(_GLF_IDENTITY(ivec4((int(2)), 1, 1, (0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0), min(_GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), max((0), (0))), _GLF_IDENTITY((0), clamp((0), (0), (0))))), (0))) | (0)))), (true ? ivec4((int(2)), 1, 1, (0 | 0)) : _GLF_FUZZED(ivec4(-47201, -38938, -78384, -36229))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 + (int(2))), int(int(_GLF_IDENTITY(int(2), 0 + (int(2)))))), _GLF_IDENTITY(int(2), 0 + (_GLF_IDENTITY(int(2), (int(2)) >> 0))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                break;
               _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | 0u)) | (_GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | 0u)) | (_GLF_FUZZED(num_workgroup)))) << 0u) : buf[virtual_gid] = 1)), (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = 1, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | 0u)) | (_GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | 0u)) | (_GLF_FUZZED(num_workgroup)))) << 0u) : buf[virtual_gid] = 1)), (_GLF_IDENTITY(buf[virtual_gid] = 1, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | 0u)) | (_GLF_FUZZED(num_workgroup))), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) | 0u)) | (_GLF_FUZZED(num_workgroup)))) << 0u) : buf[virtual_gid] = 1))) | 0u)) ^ 0u);
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.6)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), (((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.6)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))) && true), (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.6)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), bool(bool(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.6)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))) && true)))) || false))), bool(bool((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.6)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), (((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.6)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))) && true), (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.6)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), bool(bool(! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.6)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))) && true)))) || false)))))))))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), false, false, false)), (bool(bvec4(_GLF_WRAPPED_LOOP(false), false, false, false))) && true)));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), 0 | (int(7)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.9)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x) - 0.0)), bool(true))) > injectionSwitch.y))))
                          {
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) / 1.0))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) ^ 0), 0, 0))); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0)))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))) || false)))))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & -88278) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)) | ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ~ (~ (_GLF_IDENTITY(0, (0) | (0)) | ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec3(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), 0u, 0u), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((uvec3(subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0))), 0u, 0u)), (_GLF_IDENTITY((uvec3(subgroup_local_id + 1, 0u, 0u)), ((uvec3(subgroup_local_id + 1, _GLF_IDENTITY(0u, (0u) << 0u), 0u))) | ((uvec3(subgroup_local_id + 1, 0u, 0u))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u))))))) < _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (-77800 & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), true))) || false)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / exp(vec2(0.0, 0.0))), max(injectionSwitch, injectionSwitch)).y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))), (injectionSwitch.x > injectionSwitch.y)), true))));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, clamp(1, 1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, exp(0.0), 0.0, cos(0.0), exp(0.0), 1.0)))))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        break;
                       subgroupAll(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ((! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))) || false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), true && ((! (false))))) && true)), ((! (! (false)))) || false)))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ((! (! (false)))) || false))))))))), false, false))));
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / 1) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(0), int(0))) | 0)); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9919.7684))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9919.7684))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9919.7684)))) + 0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0), (vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9919.7684))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9919.7684)))) + 0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y, true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, true, false, true))))))))))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           return;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           continue;
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.4)), float(_GLF_IDENTITY(injectionSwitch.x, sqrt(0.0) + (injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true))))))), true && ((_GLF_IDENTITY(false, ! (! (false))))))))) || false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)), (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y))) && true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true, false, true)))) || false)), _GLF_IDENTITY(true && ((_GLF_IDENTITY(false, ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true && ((_GLF_IDENTITY(false, ! (! (false))))), ! (! (true && ((_GLF_IDENTITY(false, ! (! (false))))))))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), max(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), clamp(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), max(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), _GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))), _GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))))).y))), bool(bool((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), clamp(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), max(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), _GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))), _GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))))).y)))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)))))))) || false, false || (_GLF_IDENTITY(((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)))))))) || false, _GLF_IDENTITY(bool(bool(((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)))))))) || false)), ! (! (bool(bool(((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)))))))) || false)))))))))) && true))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false))))))))) || false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false))))))))), true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))), false, true)), bool(bool(bool(bvec3(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))), false, true)))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))))))))) || false))))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)), (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)), _GLF_IDENTITY(bool(bvec4(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)), false, true, false)), true && (bool(bvec4(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)), false, true, false)))))) && true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y))))))), ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(_GLF_IDENTITY(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), tan(vec2(0.0, 0.0)) + (_GLF_IDENTITY(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), min(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), _GLF_IDENTITY(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(0.0, 0.0) + (vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]))))))), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), true)), false || (bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), true)))))))))))) || false)) && true))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true && ((_GLF_IDENTITY(false, ! (! (false))))), (true && ((_GLF_IDENTITY(false, ! (! (false)))))) || false)))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && ((_GLF_IDENTITY(false, ! (! (false))))))))) || false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(-24.07), (max(injectionSwitch, injectionSwitch))[1]), vec2((max(injectionSwitch, injectionSwitch))[0], _GLF_FUZZED(vec2(-2593.9623, -8.2).y)), bvec2(true, false)))) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-7.8, -97.40)), _GLF_IDENTITY(vec2(mat3x2(_GLF_FUZZED(vec2(-7.8, -97.40)), 0.0, 1.0, 0.0, cos(0.0))), clamp(vec2(mat3x2(_GLF_FUZZED(vec2(-7.8, -97.40)), 0.0, 1.0, 0.0, cos(0.0))), vec2(mat3x2(_GLF_FUZZED(vec2(-7.8, -97.40)), 0.0, 1.0, 0.0, cos(0.0))), vec2(mat3x2(_GLF_FUZZED(vec2(-7.8, -97.40)), 0.0, 1.0, 0.0, cos(0.0)))))))).y)), (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)), bool(_GLF_IDENTITY(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y))), ! (! (bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y))))))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)), bool(_GLF_IDENTITY(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y))), ! (! (bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y))))))))), (bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)), bool(_GLF_IDENTITY(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y))), ! (! (bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y)))))))))) || false))))))) && true)))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false))))))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false))))), ! (! (((_GLF_IDENTITY(false, ! (! (false))))))))))))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) || false))) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y))))))), ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40))), min((_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40))), _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40))), vec2(0.0, 0.0) + ((_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))))))).y)), (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40))), min((_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40))), _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40))), vec2(0.0, 0.0) + ((_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))))))).y))) && _GLF_IDENTITY(true, (true) && true)))))))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(! (! (false)), true, false, false)), ! (! (bool(bvec4(! (! (false)), true, false, false)))))), true, true, false)), bool(bool(bool(bvec4(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec4(! (! (false)), true, false, false)), ! (! (bool(bvec4(! (! (false)), true, false, false)))))), true, true, false))))))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! (true)), true && ((! (true)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((! (true)), true && ((! (true)))), true), true)))))))) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y))))))), ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(_GLF_IDENTITY(vec2(-7.8, -97.40), max(vec2(-7.8, -97.40), vec2(-7.8, -97.40)))))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, true))))) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(_GLF_IDENTITY(vec2(-7.8, -97.40), vec2(0.0, 0.0) + (vec2(-7.8, -97.40)))))).y)))))))) || false)), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y, (false ? _GLF_FUZZED(2.5) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y) - 0.0)))) + tan(0.0))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))) ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_IDENTITY(_GLF_FUZZED(vec2(-7.8, -97.40)), (true ? _GLF_FUZZED(vec2(-7.8, -97.40)) : _GLF_FUZZED(injectionSwitch))))).y))))))), ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2((max(injectionSwitch, injectionSwitch))[0], (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-8474.5299), _GLF_FUZZED(-2.1)), bvec2(false, false)))) : _GLF_FUZZED(vec2(-7.8, -97.40)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), min(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-7.8, -97.40)) : _GLF_FUZZED(injectionSwitch))))))).y)))))))) || false)))))) && true) && true))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-771.429), _GLF_FUZZED(-742.258)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), mix(vec2(_GLF_FUZZED(-4141.3806), _GLF_FUZZED(6673.5080)), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), (injectionSwitch)[1]), bvec2(true, true))).y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         return;
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, true)))))
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))));
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, round(length(normalize(1.0))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 1.0, 1.0, 0.0, 0.0, 0.0))) > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(50.79)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true)))), float(_GLF_FUZZED(-5.9)), bool(false))) > injectionSwitch.y))))
                        continue;
                       break;
                      }
                     return;
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), bool(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), false))))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                      {
                       do
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                  }
                }
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))) && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y)), ! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))) && (injectionSwitch.x > injectionSwitch.y))))))))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    continue;
                  }
                 else
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (1 & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (0 ^ 1), 0 | _GLF_IDENTITY((_GLF_IDENTITY(0 ^ (0 ^ 1), clamp(0 ^ (0 ^ 1), 0 ^ (0 ^ 1), 0 ^ (0 ^ 1)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(0 ^ (0 ^ 1), clamp(0 ^ (0 ^ 1), 0 ^ (0 ^ 1), _GLF_IDENTITY(0 ^ (0 ^ 1), (0 ^ (0 ^ 1)) << 0))))), int(ivec2(~ ((_GLF_IDENTITY(0 ^ (0 ^ 1), clamp(0 ^ (0 ^ 1), 0 ^ (0 ^ 1), 0 ^ (0 ^ 1))))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), 1, 1))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 ^ (0 ^ 1), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0 ^ 1, (true ? 0 ^ _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(96552))) : _GLF_FUZZED(_injected_loop_counter)))), clamp(0 ^ (0 ^ 1), 0 ^ (0 ^ 1), 0 ^ (0 ^ 1))), (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ (0 ^ 1), clamp(0 ^ (0 ^ 1), 0 ^ (0 ^ 1), 0 ^ (_GLF_IDENTITY(0 ^ 1, min(0 ^ 1, 0 ^ 1))))), (_GLF_IDENTITY(0 ^ (0 ^ 1), clamp(_GLF_IDENTITY(0 ^ (0 ^ 1), (0 ^ (_GLF_IDENTITY(0 ^ 1, int(int(_GLF_IDENTITY(0 ^ 1, clamp(0 ^ 1, 0 ^ 1, 0 ^ 1))))))) | 0), 0 ^ (_GLF_IDENTITY(0, 0 + _GLF_IDENTITY((0), 0 + (_GLF_IDENTITY((0), (true ? (0) : _GLF_FUZZED(_injected_loop_counter)))))) ^ 1), 0 ^ (0 ^ 1)))) >> 0)) << 0)))), (false ? _GLF_FUZZED(45796) : (_GLF_IDENTITY(0 ^ (0 ^ 1), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0 ^ 1, clamp(0 ^ 1, 0 ^ 1, 0 ^ 1))), clamp(0 ^ (0 ^ 1), 0 ^ (0 ^ 1), 0 ^ (0 ^ 1))), min(_GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0 ^ 1, clamp(0 ^ 1, 0 ^ 1, 0 ^ 1))), clamp(0 ^ (0 ^ 1), 0 ^ (0 ^ 1), 0 ^ (0 ^ 1))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(0 ^ 1, clamp(0 ^ 1, 0 ^ 1, 0 ^ 1))), clamp(0 ^ (0 ^ 1), 0 ^ (0 ^ 1), 0 ^ (0 ^ 1))))))))))) ^ (0 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, int(ivec3(2, 1, ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (true ? 3 : _GLF_FUZZED((_injected_loop_counter))))), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                    break;
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))), bool(bvec2(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat2x4(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4(vec2(1.0, 1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)))), 0.0))), vec2(0.0, 0.0))), 1.0, sqrt(0.0), 1.0, 0.0))) > injectionSwitch.y), true)))))), ((_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))) && true), false))))));
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0)))))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1 & 1, (1 & 1) | (1 & 1))), clamp((1 & 1), (1 & 1), (1 & 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)) && (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-85969) : 4))) | (4)), int(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-85969) : 4))) | (4))))), int(ivec2(4, 1))), 64, 0);
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       subgroupAll(true);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 0.0))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), mat2(1.0) * ((injectionSwitch) - vec2(0.0, 0.0)))))).y))))
    return;
  }
}
