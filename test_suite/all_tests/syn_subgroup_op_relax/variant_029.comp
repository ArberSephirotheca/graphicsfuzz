#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
struct _GLF_struct_8 {
 bvec3 _f0;
 vec2 _f1;
 uvec4 _f2;
 bvec3 _f3;
 uint _f4;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 uvec2 _f1;
 uint subgroup_local_id;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 _GLF_struct_7 _f1;
 vec4 _f2;
 _GLF_struct_8 _f3;
 vec3 _f4;
 uint _f5;
 vec4 _f6;
} ;

struct _GLF_struct_5 {
 uint _f0;
 ivec3 _f1;
 mat2x4 _f2;
 bool _f3;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 mat3x4 _f1;
 vec2 _f2;
 mat2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 mat3x4 _f1;
 mat2 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
 float _f1;
 _GLF_struct_3 _f2;
 mat2 _f3;
 _GLF_struct_4 _f4;
 mat4 _f5;
 _GLF_struct_5 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 _GLF_struct_9 _f1;
} ;

struct _GLF_struct_0 {
 int _f0;
 mat4x3 _f1;
 vec3 _f2;
 vec4 _f3;
 ivec3 _f4;
 uvec2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat2x3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 bvec2 _f1;
 uint gid;
 _GLF_struct_1 _f2;
} ;

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(uvec2(1u), bvec2(true), gl_GlobalInvocationID.x, _GLF_struct_1(_GLF_struct_0(1, mat4x3(1.0), vec3(1.0), vec4(1.0), ivec3(1), uvec2(1u), bvec2(true)), mat2x3(1.0), mat2(1.0)));
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_6(mat4(1.0), 1.0, _GLF_struct_3(mat2x3(1.0), mat3x4(1.0), mat2(1.0), ivec4(1)), mat2(1.0), _GLF_struct_4(mat4x3(1.0), mat3x4(1.0), vec2(1.0), mat2(1.0), bvec4(true)), mat4(1.0), _GLF_struct_5(1u, ivec3(1), mat2x4(1.0), true)), _GLF_struct_9(mat4x2(1.0), _GLF_struct_7(mat3x4(1.0), uvec2(1u), gl_SubgroupInvocationID), vec4(1.0), _GLF_struct_8(bvec3(true), vec2(1.0), uvec4(1u), bvec3(true), 1u), vec3(1.0), 1u, vec4(1.0)));
 if(_GLF_struct_replacement_10._f1._f1.subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[_GLF_struct_replacement_2.gid + 1], uint(2), 4, 64, 0);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   subgroupAll(true);
  }
 else
  {
   atomicStore(buf[(_GLF_struct_replacement_2.gid + 1) % subgroup_size], uint(2), 4, 64, 0);
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}
