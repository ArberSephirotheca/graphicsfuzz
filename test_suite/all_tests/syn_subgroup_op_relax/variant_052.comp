#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 uint workgroup_size;
 ivec2 _f0;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 bvec3 _f1;
 uvec4 _f2;
 uvec4 _f3;
 vec4 _f4;
 mat3x4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
 uint subgroup_local_id;
 uint _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 mat2x3 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
} ;

struct _GLF_struct_1 {
 float _f0;
 bool _f1;
 mat4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 ivec4 _f3;
 mat2x4 _f4;
 _GLF_struct_3 _f5;
 bool _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_4 _f0;
 ivec4 _f1;
 _GLF_struct_8 _f2;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_4(_GLF_struct_0(uvec3(1u), bvec3(true)), _GLF_struct_1(1.0, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false), ! (! (_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false), ! (! (_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false))))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, false)), _GLF_IDENTITY((bool(bvec2(true, false))), true && ((bool(bvec2(true, false))))) || false), ! (! (_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false), ! (! (_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false), ! (! (_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false))))), false || (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(true, false)), _GLF_IDENTITY((bool(bvec2(true, false))), true && ((bool(bvec2(true, false))))) || false), ! (! (_GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))), mat4(1.0), mat3x2(1.0)), _GLF_struct_2(ivec4(1)), ivec4(1), mat2x4(1.0), _GLF_struct_3(bvec3(true), mat2x4(1.0)), true), ivec4(_GLF_IDENTITY(1, (false ? _GLF_FUZZED((89122 >> 44882)) : 1))), _GLF_struct_8(_GLF_struct_5(bvec4(_GLF_IDENTITY(true, (true) && true)), gl_SubgroupInvocationID, 1u), mat2x3(1.0), _GLF_struct_6(mat4(1.0), ivec4(1)), _GLF_struct_7(uvec2(1u), bvec3(true), uvec4(1u), uvec4(_GLF_IDENTITY(1u, (1u) + 0u)), vec4(1.0), mat3x4(1.0), vec3(1.0))));
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)).x, (gl_NumWorkGroups.x) * 1u);
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(gl_WorkGroupSize.x, _GLF_IDENTITY(ivec2(1), max(ivec2(1), _GLF_IDENTITY(ivec2(1), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (true ? ivec2(1) : _GLF_FUZZED(ivec2(-74440, -68848)))), ivec2(0, 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | 0)) | (1))), (true ? ivec2(1) : _GLF_FUZZED(ivec2(-74440, -68848)))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (true ? ivec2(1) : _GLF_FUZZED(ivec2(-74440, -68848)))), (false ? _GLF_FUZZED(ivec2(44518, -1294)) : _GLF_IDENTITY(ivec2(1), (true ? _GLF_IDENTITY(ivec2(1), max(_GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(-30891, 77598)) : ivec2(1))), _GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)))) : _GLF_FUZZED(ivec2(-74440, -68848))))))) / _GLF_IDENTITY(ivec2(1, 1), ~ (~ (ivec2(1, 1))))))), ivec2(1))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = (((1 | int(_GLF_ZERO(0.0, injectionSwitch.x))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), (true ? ~ (int(1)) : _GLF_FUZZED(-22937))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(bool(bvec2(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), false)), (bool(bvec2(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), (! (false)) || false), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), (! (false)) || false), false, true), true)))))))))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_size * workgroup_id, _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) ? _GLF_FUZZED(subgroup_size) : _GLF_struct_replacement_10.workgroup_size * workgroup_id), clamp(_GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) ? _GLF_FUZZED(subgroup_size) : _GLF_struct_replacement_10.workgroup_size * workgroup_id), (false ? _GLF_FUZZED(subgroup_id) : (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) || false, false, false))), true && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, bool(bvec3(((injectionSwitch.x > injectionSwitch.y)) || false, false, false))))))) ? _GLF_FUZZED(subgroup_size) : _GLF_struct_replacement_10.workgroup_size * workgroup_id))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, true && (false)))) ? _GLF_FUZZED(subgroup_size) : _GLF_struct_replacement_10.workgroup_size * workgroup_id), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))) ? _GLF_FUZZED(subgroup_size) : _GLF_struct_replacement_10.workgroup_size * workgroup_id))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      return;
    }
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, (false) && true), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, false, false), false)), false)))))))))));
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 + (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), vec2(0.0, 0.0) + (injectionSwitch)).y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     return;
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_9._f2._f0.subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-835.744)), vec2(_GLF_FUZZED(_GLF_IDENTITY(52.96, (_GLF_IDENTITY(52.96, min(52.96, 52.96))) - 0.0)), (injectionSwitch)[1]), bvec2(false, true))).y))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, false), true)))))))
            break;
           continue;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(float(false)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[_GLF_IDENTITY(1, _GLF_IDENTITY(0, ((0 << _GLF_IDENTITY(int(6), int(6))) | 0) ^ (_GLF_IDENTITY(0, ~ (~ (0))))) ^ (1))]), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(_GLF_IDENTITY(611.998, float(mat4(_GLF_IDENTITY(611.998, max(611.998, 611.998)), 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 1.0))))), bvec2(true, false))).x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(log(1.0), (log(1.0)) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))) + (injectionSwitch.x)) < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true)))) + _GLF_IDENTITY(0.0, (0.0) / 1.0)) > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0))))), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))), true, true), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), true))))))))))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), mat3x2(mat3(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))))))), sqrt(vec2(0.0, 0.0)) + (vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), mat3x2(mat3(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))))))))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))) || false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 1.0, 0.0, determinant(mat3(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 0.0, sqrt(0.0))), determinant(mat2(0.0, 0.0, abs(0.0), 0.0)), 1.0))) > injectionSwitch.y))))
                continue;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))))) || false)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))));
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 1u * (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) << _GLF_IDENTITY(0u, (0u) / _GLF_IDENTITY(1u, 0u ^ (1u)))))), 0u ^ (workgroup_base)) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1, min(_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1, _GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id, clamp(_GLF_struct_replacement_9._f2._f0.subgroup_local_id, _GLF_struct_replacement_9._f2._f0.subgroup_local_id, _GLF_struct_replacement_9._f2._f0.subgroup_local_id)), _GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id) * 1u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id) * 1u))) + 1) | (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))))), _GLF_IDENTITY(0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), max((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, (1) * 1)), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), _GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), (1) - 0), (1 | 1), 1, 0)))), ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) - 0), (1 | 1), 1, 0))))) / 1u), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))), min((_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), _GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1)) | ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))), (_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (0 | 0), min((1) | (0 | 0), (1) | (0 | 0))))), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, int(ivec2(1, 1)))), (~ (_GLF_IDENTITY(1, int(ivec2(1, 1))))) / 1)))), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))))), (_GLF_IDENTITY(0u ^ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1, max(_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1, _GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), _GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) - 0), (1 | 1), 1, 0)))), ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) - 0), (1 | 1), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) >> 0)))))) / 1u), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))), min((_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))), (_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, (1) | (0 | 0))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id, (_GLF_struct_replacement_9._f2._f0.subgroup_local_id) | (_GLF_struct_replacement_9._f2._f0.subgroup_local_id))) / 1u) + _GLF_IDENTITY(1, (1) - 0)), clamp(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, int(ivec2(1, 1)))), (~ (_GLF_IDENTITY(1, int(ivec2(1, 1))))) / 1)))), ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, int(ivec2(1, 1)))), (~ (_GLF_IDENTITY(1, int(ivec2(1, 1))))) / 1))))) | (195876u & 0u)), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))))), min(0u ^ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), clamp(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), uint(uvec3((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), 1u, 1u)))) ^ 0u), _GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), ~ (~ ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1)))), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), clamp((_GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id, 1u * (_GLF_struct_replacement_9._f2._f0.subgroup_local_id)) + 1), _GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) - 0), (1 | 1), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(60902))), 0)))), ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) - 0), (1 | 1), 1, 0))))) / 1u), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))), min((_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))), (_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, (1) | (0 | 0))), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, int(ivec2(1, 1)))), (~ (_GLF_IDENTITY(1, int(ivec2(1, 1))))) / 1)))), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), _GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) - 0), (1 | _GLF_IDENTITY(1, 0 + (1))), 1, 0)))), ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (1) - 0), (1 | 1), 1, 0)), (false ? _GLF_FUZZED(-74517) : int(ivec4(_GLF_IDENTITY(1, (1) - 0), (1 | 1), 1, 0))))))) / 1u), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), (false ? _GLF_FUZZED(subgroup_id) : uint(uvec2(0u, 1u))))))))), min((_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u)))), (_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, (1) | (0 | 0))), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, ((1) - 0) >> (0 >> _GLF_IDENTITY(int(5), int(5)))))), clamp((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, int(ivec2(1, 1)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(ivec2(1, 1)))), ((_GLF_IDENTITY(1, int(ivec2(1, 1))))) | ((_GLF_IDENTITY(1, int(ivec2(1, 1))))))) / 1)))), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1))), 0u))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1)) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) * 1u))))) | (_GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id, 0u + (_GLF_struct_replacement_9._f2._f0.subgroup_local_id)) + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1) | (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1)), uint(uvec2(min(_GLF_IDENTITY((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1), ((_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1)) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) * 1u))))) | (_GLF_IDENTITY(_GLF_struct_replacement_9._f2._f0.subgroup_local_id, 0u + (_GLF_struct_replacement_9._f2._f0.subgroup_local_id)) + 1), (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1) | (_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1)), (0u | (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), true, false))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     buf[virtual_gid] = 1;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_struct_replacement_9._f2._f0.subgroup_local_id + 1 < subgroup_size)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(max(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1)), min(max(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) * 1), (_GLF_IDENTITY(int(4), (int(4)) * 1)) | 0), _GLF_IDENTITY(int(4), (int(4)) * 1), _GLF_IDENTITY(int(4), (int(4)) * 1)))), max(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1)))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec3(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, true))))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (4) << (0 << _GLF_IDENTITY(int(6), int(6)))), 64, 0);
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true)), true, true)))))))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     subgroupAll(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))))));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       do
        {
         atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))) - 0u)], uint(2), 4, 64, _GLF_IDENTITY(0, 0 | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0) | 0))))))), (0 >> _GLF_IDENTITY(int(8), int(8))))), (int(ivec2((_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), clamp((~ (0)), (~ (0)), (~ (0)))))), (0 >> _GLF_IDENTITY(int(8), int(8)))))) - 0)), max(_GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0) | 0))))))), (0 >> _GLF_IDENTITY(int(8), int(8))))), (int(ivec2((_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), clamp((~ (0)), (~ (0)), (~ (0)))))), (0 >> _GLF_IDENTITY(int(8), int(8)))))) - 0)), _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0) | 0))))))), (0 >> _GLF_IDENTITY(int(8), int(8))))), (int(ivec2((_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), clamp((~ (0)), (~ (0)), (~ (0)))))), (0 >> _GLF_IDENTITY(int(8), int(8)))))) - 0))))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         do
          {
           do
            {
             subgroupAll(true);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), true && (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(((-8.7 * 6.1)))), float(injectionSwitch.y), bool(true)))), false, true))))))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (_GLF_IDENTITY(false, false || (false))))))))))), ! _GLF_IDENTITY((! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), bool(bvec4((! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) < injectionSwitch.y)), true))))))), true && ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false || (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))) && true)), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (false))))))))), ! _GLF_IDENTITY((! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), bool(bool(! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))))), bool(bvec4((! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) || false))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-44.28, 2.6)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) < injectionSwitch.y)), true)))))))))), false, false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), false, false))) || false, ((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false)))), false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), false, _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))))))))))))), ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))))))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), false, false))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))), true && ((_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (! ((true))))))), true)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(904.017), _GLF_FUZZED(9668.6180)), bvec2(false, false))))).x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))), true && (false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(1.4)), vec2(_GLF_FUZZED(17.91), (injectionSwitch)[1]), bvec2(false, true)))) * vec2(1.0, 1.0)).y)))), true))))))), false, false))) || false, ((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), bool(bvec4(bool(_GLF_IDENTITY(false, true && (false))), false, false, false))))), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, true)))))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ((! (_GLF_IDENTITY(false, false || (false))))) || false)))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), bool(bvec2(! (! (_GLF_IDENTITY(false, false || (false)))), false))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false)))), false || (false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))), _GLF_IDENTITY(true, ! (! (true)))), true)), false, _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), _GLF_IDENTITY(false, bool(bool(false))) || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))))))))))))))), ! _GLF_IDENTITY((! ((! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))), false)))))))), bool(bvec3(_GLF_IDENTITY((! ((! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))), false)))))))), bool(bvec3((! ((! (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (_GLF_IDENTITY(! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), ! (! (! (! ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))), false)))))))), false, false))), true, false))))), _GLF_IDENTITY(true, ! (! (true)))), true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), false, false))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false)))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                return;
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false)))))), true && (bool(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false)))))), true && (bool(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false)))))))))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! _GLF_IDENTITY((false || (_GLF_DEAD(false))), bool(bvec3(_GLF_IDENTITY((false || (_GLF_DEAD(false))), bool(bvec2((false || (_GLF_DEAD(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)))))), true && (bool(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false))))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
}
