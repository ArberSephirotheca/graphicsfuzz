#version 460
struct _GLF_struct_0 {
 float _f0;
 mat3 _f1;
 mat3x4 _f2;
 vec2 _f3;
 uint subgroup_size;
} ;

struct _GLF_struct_1 {
 uvec4 _f0;
 bvec4 _f1;
 _GLF_struct_0 _f2;
 uint _f3;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(uvec4(1u), bvec4(true), _GLF_struct_0(1.0, mat3(1.0), mat3x4(1.0), vec2(1.0), gl_SubgroupSize), 1u);
 uint gid = gl_GlobalInvocationID.x;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint total_threads = num_workgroup * workgroup_size;
 if(subgroup_local_id + 1 < _GLF_struct_replacement_1._f2.subgroup_size)
  {
   atomicStore(buf[(gid + 1) % total_threads], uint(2), 4, 64, 0);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[(gid + 1) % total_threads], uint(2), 4, 64, 0);
   subgroupAll(true);
  }
}
