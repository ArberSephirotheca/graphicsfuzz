#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1630.9570), _GLF_FUZZED(6.3)), bvec2(false, false))).y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, false)), bool(bvec2(bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, false)), true))), (_GLF_IDENTITY(bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, false)), bool(bvec2(bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), true)))) && true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec3(int(1), 0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, 0 | (1)) ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y) || false, true && ((injectionSwitch.x < injectionSwitch.y) || false)))), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (((injectionSwitch.x < injectionSwitch.y))), bool(bool(! (((injectionSwitch.x < injectionSwitch.y))))))))))) || false)) || false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (injectionSwitch.x > injectionSwitch.y))) || false)) && true), (! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((- 837.154))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.3)), bool(false))))))) > injectionSwitch.y)), (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) || false)) && true)) && true))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       return;
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, min(0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) + (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec4(8, 0, 1, 1)))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (false ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(subgroup_local_id))) : subgroup_id)))), max(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (false ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(subgroup_local_id))) : subgroup_id)))), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (false ? _GLF_FUZZED(num_workgroup) : _GLF_FUZZED(subgroup_local_id))) : subgroup_id)))))) * subgroup_size) ^ _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), ~ (_GLF_IDENTITY(~ (min(0u, 0u)), max(~ (min(0u, 0u)), ~ (min(0u, 0u))))))), 0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY(0u, ~ (~ (0u))))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1694u) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(atomicMax(subgroup_size, num_workgroup)) : _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u, 0u)))), (uint(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) - 0u)), 1u * (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1694u) : _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(atomicMax(subgroup_size, num_workgroup)) : _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u, 0u)))), (uint(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) - 0u))))))))) + _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), (_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), bool(bool((_GLF_IDENTITY(true, false || (true))))))) || false) || false), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (true ? _GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)))[0], (injectionSwitch)[1]), (true ? vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)))[0], (injectionSwitch)[1]) : _GLF_FUZZED(_GLF_IDENTITY(vec2(1.7, 7.0), clamp(_GLF_IDENTITY(vec2(1.7, 7.0), vec2(1.0, 1.0) * (vec2(1.7, 7.0))), _GLF_IDENTITY(vec2(1.7, 7.0), (vec2(1.7, 7.0)) + vec2(0.0, 0.0)), vec2(1.7, 7.0)))))) : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_FUZZED(8.9), _GLF_FUZZED(-9.1)), bvec2(false, false))).y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true))))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))))))))), true, false, true))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) >> (0 | (0 << _GLF_IDENTITY(int(3), int(3)))))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(int(_GLF_IDENTITY(int(1), 0 | (int(1)))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1), (_injected_loop_counter ++) | 0))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    continue;
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           return;
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), (true ? _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) : _GLF_FUZZED(45752u))))), clamp((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) + ((subgroup_id))) | (subgroup_id))), min(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) + ((subgroup_id))) | (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) + ((subgroup_id))) | (subgroup_id))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))) | (subgroup_id))))), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))) | (subgroup_id)))))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_id) | (subgroup_id), uint(_GLF_IDENTITY(uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) ^ (~ (uvec4((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))))))))))))))))) * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), (true ? _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) : _GLF_FUZZED(45752u))))), clamp((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) + ((subgroup_id))) | (subgroup_id))), min(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) + ((subgroup_id))) | (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) + ((subgroup_id))) | (subgroup_id))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))) | (subgroup_id))))), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))) | (subgroup_id)))))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_id) | (subgroup_id), uint(_GLF_IDENTITY(uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) ^ (~ (uvec4((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))))))))))))))))) * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_size))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(((subgroup_id)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), ~ (~ (((subgroup_id)) >> (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) | (0u))), (~ (_GLF_IDENTITY(0u, (0u) | (0u)))) << 0u))) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))))))))), (true ? _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) : _GLF_FUZZED(45752u))))), clamp((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))), (_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id)))) | (_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))) : _GLF_FUZZED(workgroup_size)))) + ((subgroup_id))) | (subgroup_id))), min(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), max(~ (subgroup_size), ~ (subgroup_size)))))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) + ((subgroup_id))) | (_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))))))), _GLF_IDENTITY((subgroup_id) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : 0u, clamp(false ? _GLF_FUZZED(num_workgroup) : 0u, false ? _GLF_FUZZED(num_workgroup) : 0u, false ? _GLF_FUZZED(num_workgroup) : 0u)))))) + ((subgroup_id))) | (subgroup_id))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))) | (subgroup_id))))), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u)), min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))))) | (subgroup_id)))))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_id) | (subgroup_id), uint(_GLF_IDENTITY(uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) ^ (~ (uvec4((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))))))))))))))))), ~ (_GLF_IDENTITY(~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(((subgroup_id)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), ~ (~ (((subgroup_id)) >> (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) | (0u))), (~ (_GLF_IDENTITY(0u, (0u) | (0u)))) << 0u))) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))))))))), (true ? _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) : _GLF_FUZZED(45752u))))), clamp((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))), (_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id)))) | (_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))) : _GLF_FUZZED(workgroup_size)))) + ((subgroup_id))) | (subgroup_id))), min(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), max(~ (subgroup_size), ~ (subgroup_size)))))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) + ((subgroup_id))) | (_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))))))), _GLF_IDENTITY((subgroup_id) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : 0u, clamp(false ? _GLF_FUZZED(num_workgroup) : 0u, false ? _GLF_FUZZED(num_workgroup) : 0u, false ? _GLF_FUZZED(num_workgroup) : 0u)))))) + ((subgroup_id))) | (subgroup_id))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))) | (subgroup_id))))), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u)), min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))))) | (subgroup_id)))))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_id) | (subgroup_id), uint(_GLF_IDENTITY(uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) ^ (~ (uvec4((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))))))))))))))))))), (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(((subgroup_id)) >> (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), ~ (~ (((subgroup_id)) >> (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (0u) | (0u))), (~ (_GLF_IDENTITY(0u, (0u) | (0u)))) << 0u))) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))))))))), (true ? _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | _GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), 0u ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) : _GLF_FUZZED(45752u))))), clamp((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))), (_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id)))) | (_GLF_IDENTITY((subgroup_id) | _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec2((subgroup_id), 0u), (uvec2((subgroup_id), 0u)) >> uvec2(0u, 0u)))), ((subgroup_id)) | ((subgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) | (subgroup_id))))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u))) : _GLF_FUZZED(workgroup_size)))) + ((subgroup_id))) | (subgroup_id))), min(_GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), max(~ (subgroup_size), ~ (subgroup_size)))))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)))) + ((subgroup_id))) | (_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))))))), _GLF_IDENTITY((subgroup_id) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : 0u, clamp(false ? _GLF_FUZZED(num_workgroup) : 0u, false ? _GLF_FUZZED(num_workgroup) : 0u, false ? _GLF_FUZZED(num_workgroup) : 0u)))))) + ((subgroup_id))) | (subgroup_id))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))) | (subgroup_id))))), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY((subgroup_id) | (subgroup_id), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u)), min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u | 0u))))) | (subgroup_id)))))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_id) | (subgroup_id), uint(_GLF_IDENTITY(uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (~ (uvec4((subgroup_id) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) ^ (~ (uvec4((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) | (subgroup_id), uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))))))))))))))))))) >> 0u)))) * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_size)))))) * 1u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 buf[virtual_gid] = 1;
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(1), int(1))) + (int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 | (0))))) ^ 1))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 | (0))))) ^ 1)), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 | (0))))) ^ 1)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec4(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 | (0))))) ^ 1)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) || false); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), true && (subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)) < _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                 return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) >> 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), 0 | (int(3))))), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(int(3), int(3)), 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, ! (! (false)))), (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(vec3(18.99, -4.9, -8.0).s), _GLF_FUZZED(float(false))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
          continue;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 1 * (int(3))), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-90784) : int(3))))) >> _GLF_IDENTITY(int(3), int(3)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))), (min(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3))))) << 0)) | 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) - (0 & 53840)), int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(_injected_loop_counter) : 3))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(ivec3((3), ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), (int(7)) | 0), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(int(_GLF_IDENTITY(7, ~ (~ (7))))))), 0 | (int(7))))), int(_GLF_ONE(1.0, injectionSwitch.y))))) | (3))), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((3), int(_GLF_IDENTITY(ivec3((3), ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | _GLF_IDENTITY((int(7)), clamp((int(7)), (int(7)), (int(7))))))), int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (~ (ivec3((3), ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | _GLF_IDENTITY((int(7)), clamp((int(7)), (int(7)), (int(7))))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))))) | (3))), int(3)), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, _GLF_IDENTITY((_GLF_IDENTITY(3, max(3, 3))), int(ivec3((3), ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), int(7), int(7))), _GLF_IDENTITY(0 | (int(7)), _GLF_IDENTITY(int(ivec3(0 | (int(7)), 0, 1)), max(_GLF_IDENTITY(int(ivec3(0 | (int(7)), 0, 1)), 0 + (int(ivec3(0 | (int(7)), 0, 1)))), int(ivec3(0 | (int(7)), 0, 1)))))))), int(_GLF_ONE(1.0, injectionSwitch.y))))) | (3))), int(3))) ^ 0)) | 0))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                  }
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (! (! (_GLF_WRAPPED_IF_TRUE(true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(724.880)), bool(false))), max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false))), true, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(724.880)), bool(false))), max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false))), true, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(724.880)), bool(false))), max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), false))), true, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0))))))))), false))))))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y))))
                        {
                         do
                          {
                           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), true, true), false))))))); _injected_loop_counter --)
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       if(_GLF_DEAD(false))
                        break;
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(13.24)), float(injectionSwitch.y), bool(true)))))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               else
                {
                }
               break;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (0 >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        continue;
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), 0 | (int(7)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), 0 | (int(7)))), 0 | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), 0 | (int(7)))), 0 | (~ (_GLF_IDENTITY(int(7), 0 | (int(7))))))))) ^ 0))), _GLF_IDENTITY(int(7), min(int(7), int(7)))), 0 | (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), 0 | (int(7)))))), _GLF_IDENTITY(int(7), min(int(7), int(7))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) * (_GLF_IDENTITY(7, (7) ^ 0)))), int(7))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (60200 & 0)); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)), (0) << (0 << _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter --)
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     int i = _GLF_IDENTITY(0, (0) | 0);
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0) | (0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
          barrier();
         continue;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)), ~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)), ~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)), ~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) - 0), 0, 0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1)), 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) / 1), clamp(0, 0, 0))))), (0 << _GLF_IDENTITY(int(1), int(1))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) / 1), clamp(0, 0, 0))))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0))))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), int(ivec4(_GLF_IDENTITY(0, clamp(0, 0, 0)), 1, 0, 0)))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) ^ 0))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))) - 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (_GLF_IDENTITY(0, (0) << 0))))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))))), 1)), _GLF_IDENTITY(~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))), ~ (_GLF_IDENTITY(~ (~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1))))), max(~ (~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1))))), ~ (~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1))))))))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) - 0)))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)), ~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) - 0), 0, 0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) / 1), clamp(0, 0, 0))))), (0 << _GLF_IDENTITY(int(1), int(1))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) / 1), clamp(0, 0, 0))))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (_GLF_IDENTITY(0, (0) << 0))))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)), ~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1)))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)), ~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) - 0), 0, 0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) / 1), clamp(0, 0, 0))))), (0 << _GLF_IDENTITY(int(1), int(1))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) / 1), clamp(0, 0, 0))))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (_GLF_IDENTITY(0, (0) << 0))))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)), ~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)), ~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1, ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) - 0), 0, 0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) / 1), clamp(0, 0, 0))))), (0 << _GLF_IDENTITY(int(1), int(1))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) / 1), clamp(0, 0, 0))))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))) | ((_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, clamp(0, 0, 0)), 0)), 0))))))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))), max((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), clamp(0, 0, 0))))))))))) / 1), min(_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (_GLF_IDENTITY(0, (0) << 0))))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), _GLF_IDENTITY(int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)), ~ (~ (int(ivec2((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 ^ (~ (0)))))) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) >> 0), 1)), 1, 1))), _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) / 1))))) * 1))))), 1)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))))))))))))))) | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), true && (_GLF_DEAD(false))), true))), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, false))))))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.1), _GLF_FUZZED(-6.9)), bvec2(false, false))))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))) || false, ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) * 1.0), _GLF_FUZZED(-8249.7905)), vec2(_GLF_FUZZED(-1414.1578), (injectionSwitch)[1]), bvec2(false, true))))[1]), vec2(_GLF_FUZZED(-6.1), _GLF_FUZZED(_GLF_IDENTITY(-6.9, 1.0 * (-6.9)))), bvec2(false, false))))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && true))) || false) || false)))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-7.6))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false)))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (_GLF_IDENTITY((0 ^ 1) ^ 0, (_GLF_IDENTITY((0 ^ 1) ^ 0, min((0 ^ 1) ^ 0, _GLF_IDENTITY((0 ^ 1) ^ 0, 0 + ((0 ^ 1) ^ 0))))) | ((0 ^ 1) ^ 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   break;
                  }
                }
              }
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -26990)); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
          }
         _GLF_IDENTITY(buf[next_virtual_gid] = _GLF_IDENTITY(2, max(2, 2)), (_GLF_IDENTITY(buf[next_virtual_gid] = _GLF_IDENTITY(2, max(2, 2)), (true ? buf[next_virtual_gid] = _GLF_IDENTITY(2, max(2, 2)) : _GLF_FUZZED(num_workgroup)))) << 0u);
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec2(true, false))) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3.2)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)) || false)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
                        continue;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        continue;
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))), (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   break;
                  }
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
              return;
             barrier();
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)), true, false), bvec3(bvec3(bvec3(bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, true)), true, false))))))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        continue;
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - sin(0.0)), injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           buf[next_virtual_gid] = _GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, int(ivec4(2, 0, 0, 1))))), 0 + (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, int(ivec4(2, 0, 0, 1)))))));
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), ! (! (false))), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false))))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) || false))))))))))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (_GLF_IDENTITY(true, (true) || false)))))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec2((! (false)), false)), (bool(bvec2((! (false)), false))) || false)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           return;
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0))).x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(false, (false) || false)))), true, false, true)))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(max((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : max((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  return;
}
