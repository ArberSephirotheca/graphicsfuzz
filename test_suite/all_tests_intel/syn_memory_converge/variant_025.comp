#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 bool _f0;
 uint _f1;
 bvec4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 int _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 mat4x2 _f1;
 _GLF_struct_3 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
} ;

struct _GLF_struct_1 {
 float _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_5 {
 mat3 _f0;
 mat3 _f1;
 _GLF_struct_1 _f2;
 ivec3 _f3;
 int _f4;
 _GLF_struct_4 _f5;
 uint virtual_gid;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(0u, 0u, 0u)).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(mat3(1.0), mat3(1.0), _GLF_struct_1(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_struct_0(ivec2(1))), ivec3(1), 1, _GLF_struct_4(_GLF_struct_2(uvec3(1u), 1), mat4x2(1.0), _GLF_struct_3(true, 1u, bvec4(true), vec3(1.0)), bvec3(true)), workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) + subgroup_local_id);
 write_val = _GLF_struct_replacement_5.virtual_gid;
 atomicStore(buf[_GLF_struct_replacement_5.virtual_gid], uint(subgroupAllEqual(write_val)), 4, 64, 4);
}
