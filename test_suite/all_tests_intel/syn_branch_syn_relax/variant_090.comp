#version 430

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 bool _f0;
 mat4 _f1;
} ;

struct _GLF_struct_16 {
 uvec3 _f0;
 _GLF_struct_15 _f1;
 uint _f2;
} ;

struct _GLF_struct_17 {
 uint workgroup_base;
 _GLF_struct_16 _f0;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_11 {
 mat2x4 _f0;
 mat2x3 _f1;
 float _f2;
} ;

struct _GLF_struct_13 {
 vec3 _f0;
 _GLF_struct_11 _f1;
 uint _f2;
 mat2x4 _f3;
 vec4 _f4;
 _GLF_struct_12 _f5;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
 mat3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_10 {
 mat2 _f0;
 _GLF_struct_9 _f1;
 bool _f2;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 bvec3 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_13 _f3;
 uint next_virtual_gid;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
 float _f1;
 mat4x2 _f2;
 bool _f3;
 mat2 _f4;
 mat3x2 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 vec2 _f1;
 uvec3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_3 {
 mat2x4 _f0;
 vec3 _f1;
 float _f2;
 bvec4 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_2 {
 uint _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
} ;

struct _GLF_struct_1 {
 uint workgroup_size;
 _GLF_struct_0 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_1 _f0;
 vec4 _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_7 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_1(gl_WorkGroupSize.x, _GLF_struct_0(vec2(1.0)), ivec3(1)), vec4(1.0), _GLF_struct_4(mat3x2(1.0), _GLF_struct_2(1u, mat3x4(1.0)), _GLF_struct_3(mat2x4(1.0), vec3(1.0), 1.0, bvec4(true), mat2x3(1.0))), _GLF_struct_7(mat4x2(1.0), _GLF_struct_5(uvec3(1u), vec2(1.0), uvec3(1u), mat4(1.0)), _GLF_struct_6(uvec3(1u), 1.0, mat4x2(1.0), true, mat2(1.0), mat3x2(1.0), bvec2(true)), mat3(1.0)));
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_replacement_8._f0.workgroup_size * workgroup_id, _GLF_struct_16(uvec3(1u), _GLF_struct_15(true, mat4(1.0)), 1u));
 uint virtual_gid = _GLF_struct_replacement_17.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(mat2x3(1.0), bvec3(true), _GLF_struct_10(mat2(1.0), _GLF_struct_9(bvec3(true), mat3(1.0), bvec2(true)), true), _GLF_struct_13(vec3(1.0), _GLF_struct_11(mat2x4(1.0), mat2x3(1.0), 1.0), 1u, mat2x4(1.0), vec4(1.0), _GLF_struct_12(mat2(1.0), mat4x2(1.0))), _GLF_struct_replacement_17.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size));
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   do
    {
     atomicStore(buf[_GLF_struct_replacement_14.next_virtual_gid], uint(2), 4, 64, 0);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       atomicStore(buf[_GLF_struct_replacement_14.next_virtual_gid], uint(2), 4, 64, 0);
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}
