#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 int _f0;
 mat3x2 _f1;
 uvec2 _f2;
 mat4x2 _f3;
 uvec3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 uvec4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_0 {
 int _f0;
 mat4x2 _f1;
 mat4 _f2;
 vec3 _f3;
 bvec2 _f4;
 mat3x4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 mat3 _f1;
 ivec4 _f2;
 _GLF_struct_0 _f3;
 _GLF_struct_1 _f4;
 uvec2 _f5;
 _GLF_struct_2 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 ivec4 _f1;
 uint workgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))
  return;
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_3(ivec3(1), mat3(1.0), ivec4(1), _GLF_struct_0(1, mat4x2(1.0), mat4(1.0), vec3(1.0), bvec2(true), mat3x4(1.0), mat2(1.0)), _GLF_struct_1(vec3(1.0), uvec4(1u), bvec2(true)), uvec2(1u), _GLF_struct_2(1, mat3x2(1.0), uvec2(1u), mat4x2(1.0), uvec3(1u), mat2x3(1.0))), ivec4(1), gl_WorkGroupID.x);
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_4.workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.x = next_virtual_gid;
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z + 1 < subgroup_size)
  {
   atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.x], uint(2), 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.x], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   subgroupAll(true);
  }
}
