#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 bvec4 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 mat2x3 _f1;
 mat4x3 _f2;
 float _f3;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 mat3x4 _f1;
 vec3 _f2;
 ivec3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_12 {
 mat2x3 _f0;
 int _f1;
} ;

struct _GLF_struct_11 {
 vec2 _f0;
} ;

struct _GLF_struct_16 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 mat4x2 _f3;
 _GLF_struct_14 _f4;
 _GLF_struct_15 _f5;
} ;

struct _GLF_struct_17 {
 uvec2 _f0;
 uint num_workgroup;
 vec2 _f1;
 _GLF_struct_16 _f2;
} ;

struct _GLF_struct_8 {
 ivec4 _f0;
 uvec2 _f1;
 mat3x4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_7 {
 uint _f0;
 mat2x3 _f1;
 uint _f2;
 bool _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 uvec2 _f1;
 ivec4 _f2;
 int _f3;
 mat2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 _GLF_struct_6 _f1;
 vec4 _f2;
 ivec4 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 mat2 _f1;
 uvec3 _f2;
 bvec3 _f3;
 _GLF_struct_4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 vec4 _f1;
 mat3x2 _f2;
 uvec3 _f3;
 mat3x4 _f4;
 mat2x4 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 vec2 _f1;
 mat2x4 _f2;
 int _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_3 _f0;
 uint subgroup_size;
 bvec3 _f1;
 vec4 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_9 _f4;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_3(_GLF_struct_0(vec2(1.0)), _GLF_struct_1(ivec2(1), vec2(1.0), mat2x4(1.0), 1, uvec2(1u)), _GLF_struct_2(mat2x3(1.0), vec4(1.0), mat3x2(1.0), uvec3(1u), mat3x4(1.0), mat2x4(1.0), vec4(1.0))), 16, bvec3(true), vec4(1.0), _GLF_struct_5(ivec2(1), mat2(1.0), uvec3(1u), bvec3(true), _GLF_struct_4(mat3x2(1.0), ivec4(1)), mat3x4(1.0)), _GLF_struct_9(mat3(1.0), _GLF_struct_6(mat3(1.0), uvec2(1u), ivec4(1), 1, mat2(1.0), vec4(1.0)), vec4(1.0), ivec4(1), _GLF_struct_7(1u, mat2x3(1.0), 1u, true, uvec2(1u)), _GLF_struct_8(ivec4(1), uvec2(1u), mat3x4(1.0), mat4x2(1.0))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(uvec2(1u), gl_NumWorkGroups.x, vec2(1.0), _GLF_struct_16(_GLF_struct_11(vec2(1.0)), _GLF_struct_12(mat2x3(1.0), 1), _GLF_struct_13(bvec2(true), mat3x4(1.0), vec3(1.0), ivec3(1), mat4(1.0)), mat4x2(1.0), _GLF_struct_14(mat2x3(1.0), mat2x3(1.0), mat4x3(1.0), 1.0), _GLF_struct_15(bvec4(true), uvec2(1u))));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_10.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_10.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_10.subgroup_size);
 buf[virtual_gid] = 1;
 do
  {
   if(subgroup_local_id + 1 < _GLF_struct_replacement_10.subgroup_size)
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))));
     subgroupAll(false);
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       subgroupAll(true);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}
